angular.module("standingOut.services",["ngResource"]).constant("API",(window.location.href,"/")),angular.module("standingOut.controllers",["ngMessages"]),angular.module("standingOut.directives",["angularModalService","as.sortable","ngFileUpload"]),angular.module("standingOut",["ngCookies","ngSanitize","standingOut.services","standingOut.controllers","standingOut.directives"]),angular.module("standingOut.controllers").controller("AlertPopModalController",["$scope","$timeout","close","title","message","confirmButtons","noText","yesText",function(o,e,s,t,n,a,i,r){o.decision=!1,o.confirmButtons=a,o.closed=!1,o.title=t,o.message=n,o.noText=i,o.yesText=r,o.confirm=function(e){o.decision=e,o.close()},o.close=function(){if(!o.closed)return o.closed=!0,void s(o.decision,500)}}]),angular.module("standingOut.controllers").controller("AskForHelpController",["$scope","$rootScope","ModalService","DeleteService",function(s,e,o,t){s.classSessionId=classSessionId,s.isOpen=!1,s.init=function(){s.isOpen=!1},s.cancel=function(){s.toggle()},s.toggle=function(){s.isOpen=!s.isOpen},s.$on("toggleAskForHelp",function(e,o){s.toggle()}),s.sendHelpRequest=function(){e.$broadcast("askForHelp"),s.toggle()},s.init()}]),angular.module("standingOut.controllers").controller("ClassroomAudioController",["$scope","ModalService","DeleteService",function(e,o,s){e.classSessionId=classSessionId,e.isOpen=!1,e.init=function(){console.log("audio")},e.toggle=function(){e.isOpen=!e.isOpen},e.init()}]),angular.module("standingOut.controllers").controller("ClassroomCalculatorController",["$scope","ModalService","DeleteService",function(s,e,o){s.classSessionId=classSessionId,s.isOpen=!1,s.init=function(){console.log("calculator"),s.isOpen=!1},s.toggle=function(){s.isOpen=!s.isOpen},s.$on("toggleCalculator",function(e,o){s.toggle()}),s.init()}]),angular.module("standingOut.controllers").controller("ClassroomChatController",["$scope","$rootScope","$timeout","SessionMessagesService",function(c,n,d,s){c.classSessionId=classSessionId,c.sessionAttendee=void 0,c.userId=userId,c.tutorId=tutorId,c.isTutor=isTutor,c.isOpen=!1,c.chatInstances=[],c.selectedInstance=void 0,c.deviceOptions={chatIndividuals:!1,chatGroup:!1,chatAll:!1},c.someonesTyping=!1,c.typingDisplayName="",c.messageBox="",c.timeout=void 0,c.currentTotalUnread=0,c.sendTyping=!1,c.lastPing=null,c.pingSpacing=6e5,c.pingBuffer=c.pingSpacing+2e4,c.chattConnection=(new signalR.HubConnectionBuilder).withUrl("/hubs/chat").build(),c.chattConnection.onclose(function(){n.$broadcast("signalRDisconnect")}),c.init=function(){s.getChatroomInstances({classSessionId:c.classSessionId},function(e){c.chatInstances=e,c.isOpen=!n.sessionEnded;for(var o=0;o<c.chatInstances.length;o++)if(0<c.chatInstances[o].messages.length){for(var s=0,t=c.chatInstances[o].messages.length-c.chatInstances[o].currentChatPosition;s<t;){if(c.chatInstances[o].messages[s].fromUserId==c.userId){c.chatInstances[o].currentChatPosition=c.chatInstances[o].messages.length-s;break}s+=1}c.currentTotalUnread=c.currentTotalUnread+(c.chatInstances[o].messages.length-c.chatInstances[o].currentChatPosition)}c.chattConnection.start().then(function(){for(var e=0;e<c.chatInstances.length;e++)c.chattConnection.invoke("connect",c.classSessionId,c.chatInstances[e].groupId,c.chatInstances[e].toUserId,c.chatInstances[e].sessionOneToOneChatInstanceId);c.extendPing(),c.setupPing(c.pingSpacing)}).catch(function(e){return console.error(e.toString())})},function(e){}),0==c.isTutor?s.getChatPermissions({classSessionId:c.classSessionId,userId:c.userId},function(e){c.deviceOptions=e},function(e){}):c.deviceOptions={chatIndividuals:!0,chatGroup:!0,chatAll:!0}},c.extendPing=function(){c.lastPing=new Date},c.setupPing=function(e){d(function(){(new Date).getTime()-c.pingBuffer<c.lastPing.getTime()?(c.chattConnection.invoke("ping"),c.lastPing=new Date,c.setupPing(c.pingSpacing)):c.setupPing(c.pingSpacing-((new Date).getTime()-c.lastPing.getTime()))},e)},c.chattConnection.on("pingChat",function(){console.log("pingChat")}),c.toggle=function(){n.sessionEnded?(toastr.clear(),toastr.error("Text Chat is not available to use out of class")):c.isOpen=!c.isOpen},c.showInstance=function(e){c.messageBox="",c.boxInit=!0;var o=$("#chat-messages");setTimeout(function(){o.animate({scrollTop:o[0].scrollHeight-o[0].clientHeight},0)},120),c.selectedInstance=e,c.chatInstances[e].currentChatPosition!=c.chatInstances[e].messages.length&&c.readMessages()},c.cancelChat=function(){c.messageBox="",c.selectedInstance=void 0},c.userTyping=function(e){c.boxInit=!1,0==c.sendTyping&&13!=e.which?void 0!==c.selectedInstance&&null!=c.selectedInstance&&13!=e.which&&(c.sendTyping=!0,c.chattConnection.invoke("typing",c.classSessionId,c.chatInstances[c.selectedInstance].groupId,c.chatInstances[c.selectedInstance].toUserId,c.chatInstances[c.selectedInstance].sessionOneToOneChatInstanceId),c.extendPing(),d(function(){c.sendTyping=!1},3e3)):void 0!==c.selectedInstance&&null!=c.selectedInstance&&13==e.which&&""!=c.messageBox&&c.sendMessage(),c.readMessages()},c.sendMessage=function(){c.readMessages(),1==c.chatInstances[c.selectedInstance].helpRequested&&n.$broadcast("helpDelivered",c.chatInstances[c.selectedInstance].toUserId),c.chattConnection.invoke("SendMessage",c.messageBox,c.classSessionId,c.tutorId,c.chatInstances[c.selectedInstance].groupId,c.chatInstances[c.selectedInstance].toUserId,c.chatInstances[c.selectedInstance].sessionOneToOneChatInstanceId),c.extendPing(),c.messageBox=""},c.readMessages=function(){var e=c.selectedInstance;c.readMessagesForInstance(e)},c.readMessagesForInstance=function(e){null!=c.chatInstances[e]&&c.chatInstances[e].currentChatPosition<c.chatInstances[e].messages.length&&(c.chattConnection.invoke("ReadMessages",c.classSessionId,c.tutorId,c.chatInstances[e].groupId,c.chatInstances[e].toUserId,c.chatInstances[e].sessionOneToOneChatInstanceId),c.extendPing(),c.currentTotalUnread=c.currentTotalUnread-(c.chatInstances[e].messages.length-c.chatInstances[e].currentChatPosition),c.chatInstances[e].currentChatPosition=c.chatInstances[e].messages.length)},c.chattConnection.on("readMessages",function(o,e,s,t,n){var a=_.findIndex(c.chatInstances,function(e){return e.groupId==o&&e.sessionOneToOneChatInstanceId==s});-1<a&&c.chatInstances[a].mostRead<c.chatInstances[a].messages.length&&d(function(){c.$apply(function(){c.chatInstances[a].mostRead=c.chatInstances[a].messages.length})})}),c.shownTotalUnread=function(){return null!=c.selectedInstance&&c.chatInstances[c.selectedInstance].messages.length>c.chatInstances[c.selectedInstance].currentChatPosition?c.currentTotalUnread-(c.chatInstances[c.selectedInstance].messages.length-c.chatInstances[c.selectedInstance].currentChatPosition):c.currentTotalUnread},c.chattConnection.on("newMessage",function(a,i,e,r){d(function(){c.$apply(function(){var e=_.findIndex(c.chatInstances,function(e){return e.groupId==i&&e.sessionOneToOneChatInstanceId==r});if(-1<e){if(c.chatInstances[e].messages.push(a),c.userId!=a.fromUserId?c.currentTotalUnread=c.currentTotalUnread+1:c.chatInstances[e].currentChatPosition=c.chatInstances[e].messages.length,e==c.selectedInstance&&c.isOpen){var o=$("#chat-messages");setTimeout(function(){o.animate({scrollTop:o[0].scrollHeight-o[0].clientHeight},120)},120),c.someonesTyping=!1}else{var s=a.message;toastr.clear(),toastr.info('New message - "'+(45<s.length?s.slice(0,45)+"...":s)+'"');var t=document.getElementById("messageSound");t.load(),t.play().catch(function(e){})}for(var n=0;n<c.chatInstances[e].chatPositions.length;n++)if(c.chatInstances[e].chatPositions[n].userId==a.fromUserId){d(function(){c.$apply(function(){c.chatInstances[e].chatPositions[n].numberRead=c.chatInstances[e].messages.length})});break}}})})}),c.chattConnection.on("userTyping",function(e,o,s,t){void 0!==c.selectedInstance&&null!=c.selectedInstance&&c.chatInstances[c.selectedInstance].groupId==e&&c.chatInstances[c.selectedInstance].sessionOneToOneChatInstanceId==s&&(clearTimeout(c.timeout),d(function(){c.$apply(function(){c.someonesTyping=!0,c.typingDisplayName=t;var e=$("#chat-messages");e.animate({scrollTop:e[0].scrollHeight-e[0].clientHeight},50)})}),c.timeout=setTimeout(function(){c.$apply(function(){c.someonesTyping=!1,c.typingDisplayName=t})},4e3))}),n.$on("openAllChat",function(e){c.findAndOpenChat(null,null)}),n.$on("openGroupChat",function(e,o){c.findAndOpenChat(o,null)}),n.$on("openSingleChat",function(e,o){c.findAndOpenChat(null,o)}),c.findAndOpenChat=function(e,o){for(var s=0;s<c.chatInstances.length;s++)if(c.chatInstances[s].groupId==e&&c.chatInstances[s].toUserId==o){c.isOpen||(c.isOpen=!0),c.showInstance(s);break}},c.makeCall=function(e){null!=e.toUserId?c.callUser(e.toUserId):null!=e.groupId?c.joinGroupRoom(e.groupId):c.joinAllRoom()},c.callUser=function(e){c.isTutor?n.$broadcast("callUser",{classSessionId:c.classSessionId,userId:e}):n.$broadcast("callFromStudentFromChat",{classSessionId:c.classSessionId,userId:e})},c.joinGroupRoom=function(e){c.isTutor?n.$broadcast("joinGroupCallFromChat",{classSessionId:c.classSessionId,groupId:e}):n.$broadcast("callGroupFromStudentFromChat",{classSessionId:c.classSessionId,groupId:e})},c.joinAllRoom=function(){c.isTutor?n.$broadcast("joinAllCallFromChat",{classSessionId:c.classSessionId}):n.$broadcast("callAllFromStudentFromChat",{classSessionId:c.classSessionId})},n.$on("helpRequested",function(e,o){for(var s=0;s<c.chatInstances.length;s++)if(c.chatInstances[s].toUserId==o){c.chatInstances[s].helpRequested=!0;break}}),n.$on("helpDelivered",function(e,o){for(var s=0;s<c.chatInstances.length;s++)if(c.chatInstances[s].toUserId==o){c.chatInstances[s].helpRequested=!1;break}}),n.$on("individualPermissionChangeChat",function(e,o){d(function(){c.$apply(function(){c.deviceOptions.chatIndividuals=o})})}),n.$on("allPermissionChangeChat",function(e,o){d(function(){c.$apply(function(){c.deviceOptions.chatAll=o})})}),n.$on("groupPermissionChangeChat",function(e,o){d(function(){c.$apply(function(){c.deviceOptions.chatGroup=o})})}),c.isChatAvailableFromInstance=function(e){return null==c.chatInstances[e].toUserId||null==c.chatInstances[e].toUserId?null==c.chatInstances[e].groupId||null==c.chatInstances[e].groupId?c.deviceOptions.chatAll:c.deviceOptions.chatGroup:c.deviceOptions.chatIndividuals},c.isChatAvailable=function(){if(null!=c.selectedInstance)return null==c.chatInstances[c.selectedInstance].toUserId||null==c.chatInstances[c.selectedInstance].toUserId?null==c.chatInstances[c.selectedInstance].groupId||null==c.chatInstances[c.selectedInstance].groupId?c.deviceOptions.chatAll:c.deviceOptions.chatGroup:c.deviceOptions.chatIndividuals},n.$on("groupMoved",function(e,o){d(function(){c.$apply(function(){s.getGroupInstance({classSessionId:c.classSessionId,groupId:o},function(e){for(var o=!1,s=0;s<c.chatInstances.length;s++)if(null==c.chatInstances[s].toUserId&&null!=c.chatInstances[s].groupId){s==c.selectedInstance&&(c.messageBox="",c.selectedInstance=void 0),c.currentTotalUnread=c.currentTotalUnread-(c.chatInstances[s].messages.length-c.chatInstances[s].currentChatPosition)+(e.messages.length-e.currentChatPosition);var t=c.chatInstances.splice(s,1,e)[0];o=!0,c.chattConnection.invoke("disconnect",c.classSessionId,t.groupId,t.toUserId,t.sessionOneToOneChatInstanceId),c.extendPing();break}0==o&&(0<c.chatInstances.length?c.chatInstances.splice(1,0,e):c.chatInstances.push(e)),c.deviceOptions.chatGroup=e.chatActive,c.chattConnection.invoke("connect",c.classSessionId,e.groupId,e.toUserId,e.sessionOneToOneChatInstanceId),c.extendPing()},function(e){})})})}),n.$on("groupRemoved",function(e){d(function(){c.$apply(function(){for(var e=0;e<c.chatInstances.length;e++)if(null==c.chatInstances[e].toUserId&&null!=c.chatInstances[e].groupId){e==c.selectedInstance&&(c.messageBox="",c.selectedInstance=void 0),c.currentTotalUnread=c.currentTotalUnread-(c.chatInstances[e].messages.length-c.chatInstances[e].currentChatPosition);var o=c.chatInstances.splice(e,1)[0];c.chattConnection.invoke("disconnect",c.classSessionId,o.groupId,o.toUserId,o.sessionOneToOneChatInstanceId);break}})})}),c.init()}]),angular.module("standingOut.controllers").controller("DocumentModalController",["$scope","$log","$sce","close","ModalService","documentUrl","SessionDocumentsService",function(e,o,s,t,n,a,i){e.selectedDocument=a,e.cancel=function(){t(e.result,100)},e.trust=function(e){return console.log(e),s.trustAsResourceUrl(e)},e.init=function(){console.log(e.selectedDocument)},e.init()}]),angular.module("standingOut.controllers").controller("DocumentUploadModalController",["$scope","$log","$sce","close","ModalService","classSessionId","names","folderId","isMaster","chooseFileActive","fileIds","toggleStart","SessionDocumentsService",function(s,e,o,t,n,a,i,r,c,d,l,u,p){s.classSessionId=a,s.sessionAttendees=[],s.fileToUpload=void 0,s.chooseFileActive=d,s.readToggle=u,s.writeToggle=u,s.fileIds=null==l?[]:l,s.names=null==i?"":i,s.isMaster=c,s.folderId=r,s.result=!1,s.hasJustUploaded=!1,s.cancel=function(){t(s.hasJustUploaded,100)},s.init=function(){$(".loading").show(),s.getAttendees()},s.getAttendees=function(){p.getAttendeesForFileUpload({classSessionId:s.classSessionId},function(e){s.sessionAttendees=e,s.embelishAttendees(),$(".loading").hide()},function(e){$(".loading").hide()})},s.embelishAttendees=function(){for(var e=0;e<s.sessionAttendees.length;e++)s.sessionAttendees[e].isReadable=s.toggleStart,s.sessionAttendees[e].isWriteable=s.toggleStart},s.setFiles=function(e){0<e.length&&($(".loading").show(),s.files=e,s.toUpload=s.files.length,s.uploaded=0,s.performUploads())},s.performUploads=function(){for(var e=0;e<s.files.length;e++){var o={file:s.files[e]};s.performUpload(o)}},s.performUpload=function(o){p.uploadFromClassroom(o,s.classSessionId,s.folderId,function(e){s.fileIds.push(e),""==s.names?s.names=o.file.name:s.names=s.names+", "+o.file.name,s.incrementUpload()},function(e){toastr.clear(),toastr.error((1<s.fileIds.length?"The files were":"This file was")+" not uploaded successfully."),s.close(!1,100)})},s.incrementUpload=function(){s.uploaded++,s.uploaded>=s.toUpload&&($(".loading").hide(),toastr.clear(),toastr.success((1<s.fileIds.length?"The files were":"This file was")+" uploaded successfully."),s.isMaster?(s.uploaded=0,100<s.names.length&&(s.names=s.names.substring(0,99)+"..."),s.chooseFileActive=!1,s.hasJustUploaded=!0,s.result=!0):t(!0,100))},s.setWrite=function(){for(var e=0;e<s.sessionAttendees.length;e++)s.sessionAttendees[e].isWriteable!=s.writeToggle&&(s.sessionAttendees[e].isWriteable=s.writeToggle);s.writeToggle&&(s.readToggle=!0,s.setRead())},s.setRead=function(){for(var e=0;e<s.sessionAttendees.length;e++)s.sessionAttendees[e].isReadable!=s.readToggle&&(s.sessionAttendees[e].isReadable=s.readToggle);s.readToggle||(s.writeToggle=!1,s.setWrite())},s.writeChanged=function(e){s.sessionAttendees[e].isWriteable&&!s.sessionAttendees[e].isReadable&&(s.sessionAttendees[e].isReadable=!0,s.checkReadToggleValid(s.sessionAttendees[e].isReadable)),s.checkWriteToggleValid(s.sessionAttendees[e].isWriteable)},s.readChanged=function(e){!s.sessionAttendees[e].isReadable&&s.sessionAttendees[e].isWriteable&&(s.sessionAttendees[e].isWriteable=!1,s.checkWriteToggleValid(s.sessionAttendees[e].isWriteable)),s.checkReadToggleValid(s.sessionAttendees[e].isReadable)},s.checkWriteToggleValid=function(e){if(e!=s.writeToggle){for(var o=0;o<s.sessionAttendees.length;o++)if(s.sessionAttendees[o].isWriteable==s.writeToggle)return;s.writeToggle=e}},s.checkReadToggleValid=function(e){if(e!=s.readToggle){for(var o=0;o<s.sessionAttendees.length;o++)if(s.sessionAttendees[o].isReadable==s.readToggle)return;s.readToggle=e}},s.share=function(){for(var e=0;e<s.sessionAttendees.length;e++)if(s.sessionAttendees[e].isReadable){p.shareFileUpload({classSessionId:s.classSessionId},{FileIds:s.fileIds,SessionAttendees:s.sessionAttendees},function(e){toastr.clear(),toastr.success((1<s.fileIds.length?"The files were":"This file was")+" shared successfully.")},function(e){toastr.clear(),toastr.error((1<s.fileIds.length?"The files were":"This file was")+" not shared successfully.")});break}t(s.result,100)},s.init()}]),angular.module("standingOut.controllers").controller("EndClassModalController",["$scope","$log","$sce","close","ModalService",function(e,o,s,t,n){e.name="",e.cancel=function(){t(!1,100)},e.init=function(){},e.save=function(e){t(!0,100)},e.init()}]),angular.module("standingOut.controllers").controller("FileController",["$scope","$rootScope","$sce","SessionDocumentsService","ModalService","ClassroomSessionsService","DeleteService",function(n,a,o,i,s,e,t){n.classSessionId=classSessionId,n.files=[],n.depth=[],n.depthNames=["Class Folder"],n.selectedDocument=void 0,n.parentFolder=void 0,n.navigationRunning=!0,n.isTutor=isTutor,n.pageNumber=1,n.nextPage=void 0,n.previousPages=[],n.disallowUploadIn=[],n.masterFolderId=void 0,n.init=function(e,o,s,t){$(".loading").show(),n.paneId=e,n.toolBar=o,n.depthNames=["Class Folder"],n.selectedDocument=void 0,n.parentFolder=void 0,n.navigationRunning=!0,n.pageNumber=1,n.nextPage=void 0,n.previousPages=[],i.getForClassroom({classSessionId:n.classSessionId},function(e){n.files=e.files,n.disallowUploadIn=e.disallowUploadIn,n.masterFolderId=e.masterFolderId,void 0!==e.rootFolderId&&null!=e.rootFolderId?n.depth=[e.rootFolderId]:void 0!==e.files[0]&&null!=e.files[0].parents&&void 0!==e.files[0].parents[0]&&(n.depth=[e.files[0].parents[0]]),n.resetPagination(e.nextPageToken),n.navigationRunning=!1,$(".loading").hide(),a.$broadcast("folderPaneLoaded"),null!=s&&s()},function(e){n.navigationRunning=!1,$(".loading").hide(),null!=t&&t()})},n.isChrome=function(){return"chrome"in window},n.$on("toggleToolbar",function(e,o){n.paneId==o.paneId&&(n.toolBar=o.toolBar)}),n.$on("openMainFolder",function(e,o){n.init({paneId:n.paneId,toolBar:n.toolBar})}),n.inMaster=function(){return n.depth[n.depth.length-1]==n.masterFolderId},n.uploadDisabled=function(){if(1==n.depth.length)return!0;for(var e=0;e<n.disallowUploadIn.length;e++)if(n.disallowUploadIn[e]==n.depth[n.depth.length-1])return!0;return!1},n.upload=function(){s.showModal({templateUrl:"/app/classroom/documentUploadModal.html",controller:"DocumentUploadModalController",inputs:{classSessionId:n.classSessionId,names:"",folderId:n.depth[n.depth.length-1],isMaster:n.inMaster(),chooseFileActive:!0,fileIds:[],toggleStart:!0}}).then(function(e){e.close.then(function(e){1==e&&n.navigateSame()})})},n.getDownloadUrl=function(e){var o="";return"application/vnd.google-apps.spreadsheet"!=e.mimeType&&"application/vnd.google-apps.document"!=e.mimeType&&"application/vnd.google-apps.presentation"!=e.mimeType&&"application/vnd.google-apps.folder"!=e.mimeType&&"application/vnd.openxmlformats-officedocument.wordprocessingml.document"!=e.mimeType&&"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"!=e.mimeType&&"application/vnd.openxmlformats-officedocument.presentationml.presentation"!=e.mimeType&&(o=e.webContentLink),o},n.isFolder=function(e){return"application/vnd.google-apps.folder"==e},n.trust=function(e){return o.trustAsResourceUrl(e)},n.downloadAvailable=function(e){return"application/vnd.google-apps.folder"!=e&&"application/vnd.google-apps.spreadsheet"!=e&&"application/vnd.google-apps.document"!=e&&"application/vnd.google-apps.presentation"!=e},n.openAvailable=function(e){return"application/vnd.google-apps.spreadsheet"==e||"application/vnd.google-apps.document"==e||"application/vnd.google-apps.presentation"==e||"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"==e||"application/vnd.openxmlformats-officedocument.wordprocessingml.document"==e||"application/vnd.openxmlformats-officedocument.presentationml.presentation"==e},n.open=function(e){var o="";return"application/vnd.google-apps.folder"==e.mimeType?n.navigateDown(e.id,e.name):(o="application/vnd.google-apps.spreadsheet"==e.mimeType||"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"==e.mimeType?"https://docs.google.com/spreadsheets/d/"+e.id+"/edit":"application/vnd.google-apps.document"==e.mimeType||"application/vnd.openxmlformats-officedocument.wordprocessingml.document"==e.mimeType?"https://docs.google.com/document/d/"+e.id+"/edit":"application/vnd.google-apps.presentation"==e.mimeType||"application/vnd.openxmlformats-officedocument.presentationml.presentation"==e.mimeType?"https://docs.google.com/presentation/d/"+e.id+"/edit":e.webContentLink,n.selectedDocument=o),n.isChrome()&&toastr.info("It looks like you're on Chrome. If you can't access a file you may be logged into the browser as another user!"),o},n.openPopUp=function(e){var o="";"application/vnd.google-apps.spreadsheet"==e.mimeType||"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"==e.mimeType?o="https://docs.google.com/spreadsheets/d/"+e.id+"/edit":"application/vnd.google-apps.document"==e.mimeType||"application/vnd.openxmlformats-officedocument.wordprocessingml.document"==e.mimeType?o="https://docs.google.com/document/d/"+e.id+"/edit":"application/vnd.google-apps.presentation"!=e.mimeType&&"application/vnd.openxmlformats-officedocument.presentationml.presentation"!=e.mimeType||(o="https://docs.google.com/presentation/d/"+e.id+"/edit"),""!=o&&s.showModal({templateUrl:"/app/classroom/documentModal.html",controller:"DocumentModalController",inputs:{documentUrl:o}}).then(function(e){e.close.then(function(e){})})},n.permissionsSingle=function(e){s.showModal({templateUrl:"/app/classroom/documentUploadModal.html",controller:"DocumentUploadModalController",inputs:{classSessionId:n.classSessionId,names:e.name,folderId:n.depth[n.depth.length-1],isMaster:n.inMaster(),chooseFileActive:!1,fileIds:[e.id],toggleStart:!1}}).then(function(e){e.close.then(function(e){})})},n.$on("screenshotTaken",function(){1==n.depth.length&&n.navigateSame()}),n.resetPagination=function(e){n.previousPages=[],n.partResetPagination(e)},n.partResetPagination=function(e){n.pageNumber=1,n.nextPage=void 0!==e&&null!=e?e:void 0},n.refresh=function(){n.navigateSame(function(){toastr.clear(),toastr.success("Page refreshed")},function(){toastr.clear(),toastr.error("Refresh failed")})},n.navigateSame=function(o,s){n.navigationRunning||(1==n.depth.length?n.init(n.paneId,n.toolBar,o,s):(n.navigationRunning=!0,$(".loading").show(),i.getForClassroomByFolderSame({classSessionId:n.classSessionId,folderId:n.depth[n.depth.length-1]},function(e){n.files=e.files,e.resetToRoot?(n.depth=[e.resetToFolder],n.depthNames=["Class Folder"],n.parentFolder=void 0,n.resetPagination(e.nextPageToken)):n.partResetPagination(e.nextPageToken),n.navigationRunning=!1,$(".loading").hide(),null!=o&&o()},function(e){n.navigationRunning=!1,$(".loading").hide(),null!=o&&s()})))},n.navigateDown=function(e,o){n.navigationRunning||void 0===n.depth[0]||n.depth[n.depth.length-1]==e||(n.navigationRunning=!0,$(".loading").show(),n.depth.push(e),n.depthNames.push(o),1<n.depth.length&&(n.parentFolder=n.depth[n.depth.length-2]),i.getForClassroomByFolderDown({classSessionId:n.classSessionId,folderId:e},function(e){n.files=e.files,n.resetPagination(e.nextPageToken),n.navigationRunning=!1,$(".loading").hide()},function(e){n.navigationRunning=!1,$(".loading").hide()}))},n.navigateUp=function(){n.navigationRunning||void 0===n.depth[0]||(n.depth.length<=2?n.init(n.paneId,n.toolBar):(n.navigationRunning=!0,$(".loading").show(),i.getForClassroomByFolderUp({classSessionId:n.classSessionId,folderId:n.parentFolder},function(e){n.files=e.files,e.resetToRoot?(n.depth=[e.resetToFolder],n.depthNames=["Class Folder"],n.parentFolder=void 0):n.depth.length<2?n.parentFolder=void 0:n.depth[n.depth.length-1]!=n.parentFolder&&(n.depth.pop(),n.depthNames.pop(),n.parentFolder=n.depth[n.depth.length-2]),n.resetPagination(e.nextPageToken),n.navigationRunning=!1,$(".loading").hide()},function(e){n.navigationRunning=!1,$(".loading").hide()})))},n.getNextPage=function(){if(!n.navigationRunning){n.navigationRunning=!0,$(".loading").show();var e={pageToken:n.nextPage};i.postForClassroomByFolderPage({classSessionId:n.classSessionId,folderId:n.depth[n.depth.length-1]},e,function(e){n.files=e.files,e.resetToRoot?(n.depth=[e.resetToFolder],n.depthNames=["Class Folder"],n.parentFolder=void 0,n.resetPagination(e.nextPageToken)):n.nextPagination(e.nextPageToken),n.navigationRunning=!1,$(".loading").hide()},function(e){n.navigationRunning=!1,$(".loading").hide()})}},n.nextPagination=function(e){n.previousPages.push(n.nextPage),n.pageNumber=n.pageNumber+1,n.nextPage=void 0!==e&&null!=e?e:void 0},n.getPreviousPage=function(){if(!n.navigationRunning)if(2==n.pageNumber&&1==n.depth.length)n.init(n.paneId,n.toolBar);else{n.navigationRunning=!0,$(".loading").show();var e={pageToken:1<n.previousPages.length?n.previousPages[n.previousPages.length-2]:""};i.postForClassroomByFolderPage({classSessionId:n.classSessionId,folderId:n.depth[n.depth.length-1]},e,function(e){n.files=e.files,e.resetToRoot?(n.depth=[e.resetToFolder],n.depthNames=["Class Folder"],n.parentFolder=void 0,n.resetPagination(e.nextPageToken)):n.previousPagination(e.nextPageToken),n.navigationRunning=!1,$(".loading").hide()},function(e){n.navigationRunning=!1,$(".loading").hide()})}},n.previousPagination=function(e){0<n.previousPages.length?(n.nextPage=n.previousPages[n.previousPages.length-1],n.previousPages.pop(),n.pageNumber=n.pageNumber-1):n.resetPagination(e)},n.deleteDocument=function(o){t.confirm(function(e){1==e&&(n.navigationRunning=!0,$(".loading").show(),i.deleteFromClassroom({classSessionId:n.classSessionId,id:o.id},function(e){n.resetPagination(void 0),n.navigationRunning=!1,n.navigateSame(),$(".loading").hide(),toastr.clear(),toastr.success("Delete successsful.")},function(e){$(".loading").hide(),toastr.clear(),toastr.error("Delete unsuccesssful."),n.navigationRunning=!1}))},function(e){})},n.close=function(){n.selectedDocument=void 0}}]),angular.module("standingOut.controllers").controller("HeaderController",["$scope","$rootScope","$timeout","ModalService","DeleteService","ClassroomSessionsService",function(i,o,n,a,e,s){i.classSessionId=classSessionId,i.firstLoad=!0,i.counter="00:00:00",i.showBlink=!1,i.sessionEnd=!1,o.sessionStarted=!1,i.isTutor="True"==isTutor,i.askedForHelp=!1,i.init=function(){s.get({id:i.classSessionId},function(e){i.classSession=e,o.sessionStarted=e.started,o.sessionEnded=e.ended,i.startTimer(),i.isChrome()&&toastr.info("It looks like you're on Chrome. If you can't access a file you may be logged into the browser as another user!")},function(e){})},o.checkSessionStart=function(){return!(!o.sessionStarted&&0==i.isTutor&&(toastr.clear(),toastr.info("Only chat is available until the session has begun"),1))},i.startTimer=function(){if(0==o.sessionStarted||null==i.classSession.dueEndDate)i.setCounterFromTimes(new Date(i.classSession.startDate).getTime(),new Date(i.classSession.endDate).getTime());else var e=setInterval(function(){i.sessionEnd&&!o.sessionEnded?(console.log((new Date(i.classSession.dueEndDate).getTime()-(new Date).getTime())/6e4),(new Date(i.classSession.dueEndDate).getTime()-(new Date).getTime())/6e4<-5&&(clearInterval(e),i.isTutor?i.endSessionLogic():(o.sessionEnded=!0,$(".loading").show(),window.location="/Classroom/Sessions/Complete/"+i.classSessionId))):i.setCounterFromTimes((new Date).getTime(),new Date(i.classSession.dueEndDate).getTime())&&(i.setCounter("00:00:00"),i.setBlink(!0),i.setEnd(!0),setTimeout(function(){i.setBlink(!1)},5e3))},1e3);1==i.firstLoad&&(i.firstLoad=!1,$("#countdown").show())},i.$on("startTimer",function(e,o){null!=o&&null!=o&&(i.classSession.dueEndDate=o),i.startTimer()}),i.setCounterFromTimes=function(e,o){var s=o-e,t=(Math.floor(s/864e5),Math.floor(s%864e5/36e5)),n=Math.floor(s%36e5/6e4),a=Math.floor(s%6e4/1e3);return i.setCounter(("0"+t).slice(-2)+":"+("0"+n).slice(-2)+":"+("0"+a).slice(-2)),t<1&&n<5&&(document.getElementById("countdown").style.color="#ff0000"),s<0},i.setCounter=function(e){n(function(){i.$apply(function(){i.counter=e})})},i.setBlink=function(e){i.$apply(function(){i.showBlink=e})},i.setEnd=function(e){i.$apply(function(){i.sessionEnd=!0})},i.endSession=function(){a.showModal({templateUrl:"/app/classroom/endClassModal.html",controller:"EndClassModalController"}).then(function(e){e.close.then(function(e){e&&i.endSessionLogic()})})},i.endSessionLogic=function(){s.endSession({classSessionId:classSessionId},function(e){toastr.clear(),toastr.success("Session complete!"),s.broadcastSessionEnd()},function(e){toastr.clear(),toastr.error("Error ending session")})},i.startSession=function(){s.startSession({classSessionId:classSessionId},function(e){s.broadcastSessionStart(),n(function(){i.$apply(function(){i.classSession.dueEndDate=e.dueEndDate,o.sessionStarted=!0,i.startTimer()})}),toastr.clear(),toastr.success("Session started!")},function(e){toastr.clear(),toastr.error("Couldn't start session")})},i.isChrome=function(){return"chrome"in window},i.isFirefox=function(){return-1<navigator.userAgent.toLowerCase().indexOf("firefox")},i.canScreenShare=function(){return i.isChrome()||i.isFirefox()},i.getUserScreen=function(){return i.canScreenShare()?i.isChrome()?new Promise(function(o,s){chrome.runtime.sendMessage("bomnhpeeelhikfijdbgnfmcicjehajdh",{sources:["screen"]},function(e){e?"success"===e.type?o({streamId:e.streamId}):s():(alert("Our extension is required for screenshot in Chrome. Hit okay and we'll show you where to get it!"),window.open("https://chrome.google.com/webstore/detail/standing-out-screen-share/bomnhpeeelhikfijdbgnfmcicjehajdh","_blank"),s(new Error("Could not get stream")))})}).then(function(e){return navigator.mediaDevices.getUserMedia({video:{mandatory:{chromeMediaSource:"desktop",chromeMediaSourceId:e.streamId}}})}):i.isFirefox()?navigator.mediaDevices.getUserMedia({video:{mediaSource:"screen"}}):(toastr.clear(),void toastr.error("Screenshot is only available in Firefox and Chrome")):(toastr.clear(),void toastr.error("Screenshot is only available in Firefox and Chrome"))},i.takeScreenshot=function(){if(o.checkSessionStart()){var t=document.createElement("video"),e=document.createElement("canvas");i.getUserScreen().then(function(s){null!=s?(t.srcObject=s,t.width=$(document.body)[0].clientWidth,t.height=$(document.body)[0].clientHeight,t.play().then(function(){n(function(){return e.width=t.videoWidth,e.height=t.videoHeight,e.getContext("2d").drawImage(t,0,0),e},500).then(function(e){var o=e.toDataURL("image/png");a.showModal({templateUrl:"/app/classroom/screenshotModal.html",controller:"ScreenshotModalController",inputs:{img:o}}).then(function(e){e.close.then(function(e){e.success&&i.screenshotTaken()})}),s.getTracks().forEach(function(e){e.stop()}),t.remove(),e.remove()})},function(){s.getTracks().forEach(function(e){e.stop()}),t.remove(),e.remove()})):(t.remove(),e.remove())},function(){t.remove(),e.remove()})}},i.screenshotTaken=function(){s.broadcastScreenshotTaken()},i.changePane=function(e){o.checkSessionStart()&&s.updateChangePaneListeners(e)},i.toggleReportAbuse=function(){a.showModal({templateUrl:"/app/safeguardReport/safeguardReportModal.html",controller:"SafeguardReportModalController",inputs:{safeguardReport:{safeguardReportId:void 0,classSessionId:i.classSessionId}}}).then(function(e){e.close.then(function(e){$(".loading").show()})})},i.toggleAskForHelp=function(){o.sessionEnded?(toastr.clear(),toastr.error("Ask for Help is not available to use out of class")):o.checkSessionStart()&&o.$broadcast("toggleAskForHelp")},o.$on("askForHelp",function(e){i.askedForHelp=!0,toastr.clear(),toastr.success("Your help request has been sent!")}),o.$on("helpComing",function(e){i.askedForHelp=!1,toastr.clear(),toastr.info("Help is on the way!")}),i.toggleCalculator=function(){o.checkSessionStart()&&o.$broadcast("toggleCalculator")},i.leaveSession=function(){window.location.href="/My"},i.init()}]),angular.module("standingOut.controllers").controller("ClassroomHelpController",["$scope","ModalService","DeleteService",function(e,o,s){e.classSessionId=classSessionId,e.isOpen=!1,e.init=function(){console.log("help")},e.toggle=function(){e.isOpen=!e.isOpen},e.init()}]),angular.module("standingOut.controllers").controller("ClassroomMainController",["$scope","$rootScope","$timeout","ModalService","ClassroomSessionsService","SystemToolsService",function(h,c,e,n,o,s){h.classSessionId=classSessionId,h.fullScreenForced=!1,h.maximumPanes=4,h.currentPages=[{type:"none",show:!0,ngInclude:"",fullScreen:!1,toolBar:!0,id:1},{type:"none",show:!1,ngInclude:"",fullScreen:!1,toolBar:!0,id:2},{type:"none",show:!1,ngInclude:"",fullScreen:!1,toolBar:!0,id:3},{type:"none",show:!1,ngInclude:"",fullScreen:!1,toolBar:!0,id:4}],h.paneClassList=["full","half","thirds","quad"],h.selectedPane="full",h.tools=[],h.fullScreenOn=!1,h.awaitingWhiteboard=null,h.awaitingFolder=null,h.$on("change_pane",function(e,o){h.changeView(o)}),h.toggleToolbar=function(e,o){h.currentPages[e].toolBar=!h.currentPages[e].toolBar,c.$broadcast("toggleToolbar",{paneId:o,toolBar:h.currentPages[e].toolBar})},h.changeView=function(s,e,o){if(h.fullScreenOn&&!h.fullScreenForced){for(var t=0;t<h.currentPages.length;t++)if(h.currentPages[t].fullScreen){h.currentPages[t].fullScreen=!1;break}h.fullScreenOn=!1}if(null==e||o){for(var n=_.findIndex(h.paneClassList,function(e,o){return e==s})+1,a=0,i=0;i<h.currentPages.length;i++)h.currentPages[i].show&&a++;if(n<a)for(;n<a;){for(var r=void 0,c=0;c<h.currentPages.length;c++)if("none"==h.currentPages[c].type&&h.currentPages[c].show){r=c;break}if(null==r)for(var d=h.currentPages.length-1;0<=d;d--)if(h.currentPages[d].show&&"webcam"!=h.currentPages[d].type){r=d;break}r==a-1?h.currentPages[r].show=!1:(h.currentPages.push(h.currentPages.splice(r,1)[0]),h.currentPages[h.currentPages.length-1].show=!1),a--}else for(;a<n;){var l=void 0;if(null==e){for(var u=0;u<h.currentPages.length;u++)if("none"!=h.currentPages[u].type&&!h.currentPages[u].show){l=u;break}}else l=e;if(null==l)for(var p=0;p<h.currentPages.length;p++)if(!h.currentPages[p].show){l=p;break}l==a-1?h.currentPages[l].show=!0:(h.currentPages.splice(a,0,h.currentPages.splice(l,1)[0]),h.currentPages[a].show=!0),a++}}else h.currentPages.push(h.currentPages.splice(e,1)[0]),h.currentPages[h.currentPages.length-1].show=!1;h.selectedPane=s},h.setFullscreen=function(e){c.checkSessionStart()&&(h.currentPages[e].fullScreen=!h.currentPages[e].fullScreen),h.fullScreenOn=h.currentPages[e].fullScreen},h.fullScreenActive=function(){for(var e=0;e<h.currentPages.length;e++)if(h.currentPages[e].fullScreen)return!0;return!1},h.selectTool=function(e,o){h.inUse(o)||c.checkSessionStart()&&(h.currentPages[e].type=o.name,h.currentPages[e].ngInclude=o.ngInclude)},h.deselectTool=function(o,e){if("none"==e)"quad"==h.selectedPane?h.changeView("thirds",o):"thirds"==h.selectedPane?h.changeView("half",o):"half"==h.selectedPane&&h.changeView("full",o);else if("webcam"==e)c.$broadcast("webcamPaneClosed",{});else{for(var s=!1,t=0;t<h.tools.length;t++)if(h.tools[t].name==e){h.tools[t].exitWarning&&(s=!0);break}s?n.showModal({templateUrl:"/app/classroom/panelExitModal.html",controller:"PanelExitModalController"}).then(function(e){e.close.then(function(e){e&&(h.currentPages[o].type="none",h.currentPages[o].ngInclude="")})}):(h.currentPages[o].type="none",h.currentPages[o].ngInclude="")}},h.inUse=function(s){return-1<_.findIndex(h.currentPages,function(e,o){return e.type==s.name})&&!1===s.allowMultiple},h.init=function(){2==performance.navigation.type&&location.reload(!0),s.query(null,function(e){h.tools=e},function(e){})},h.$on("forceFullScreen",function(e,o){h.fullScreenForced=o.forceMode,h.currentPages[o.index].fullScreen=o.forceMode}),h.$on("callInPane",function(e,o){h.currentPages[o.paneIndex].type="webcam"}),h.$on("callOutPane",function(e,o){h.currentPages[o.paneIndex].type="none"}),h.$on("openTutorCommandWhiteboard",function(e,o){for(var s=!1,t=!0,n=-1,a=0;a<h.currentPages.length;a++)if("Whiteboard"==h.currentPages[a].type){s=!0,h.currentPages[a].show||(t=!1,n=a);break}if(s)t||h.changeView(h.paneClassList[h.paneClassList.indexOf(h.selectedPane)+1],n,!0),c.$broadcast("openMainWhiteboard",o);else{for(var i=0;i<h.currentPages.length;i++)if("none"==h.currentPages[i].type||!h.currentPages[i].show){for(var r=0;r<h.tools.length;r++)if("Whiteboard"==h.tools[r].name){s=!0,h.currentPages[i].show||(n=i,t=!1),h.currentPages[i].type="Whiteboard",h.currentPages[i].ngInclude=h.tools[r].ngInclude;break}break}s?(t||(h.paneClassList.indexOf(h.selectedPane),h.changeView(h.paneClassList[h.paneClassList.indexOf(h.selectedPane)+1],n,!0)),h.awaitingWhiteboard=o):(toastr.clear(),toastr.error("Please close a pane to use this tool"))}}),h.$on("whiteboardPaneLoaded",function(){null!=h.awaitingWhiteboard&&(c.$broadcast("openMainWhiteboard",h.awaitingWhiteboard),h.awaitingWhiteboard=null)}),h.$on("openTutorCommandFolder",function(e,o){for(var s=!1,t=!0,n=-1,a=0;a<h.currentPages.length;a++)if("File"==h.currentPages[a].type){s=!0,h.currentPages[a].show||(t=!1,n=a);break}if(s)t||h.changeView(h.paneClassList[h.paneClassList.indexOf(h.selectedPane)+1],n,!0),c.$broadcast("openMainFolder",{data:o,paneIndex:n});else{for(var i=0;i<h.currentPages.length;i++)if("none"==h.currentPages[i].type||!h.currentPages[i].show){for(var r=0;r<h.tools.length;r++)if("File"==h.tools[r].name){s=!0,h.currentPages[i].show||(n=i,t=!1),h.currentPages[i].type="File",h.currentPages[i].ngInclude=h.tools[r].ngInclude;break}break}s?t||(h.paneClassList.indexOf(h.selectedPane),h.changeView(h.paneClassList[h.paneClassList.indexOf(h.selectedPane)+1],n,!0)):(toastr.clear(),toastr.error("Please close a pane to use this tool"))}}),h.init()}]),angular.module("standingOut.controllers").controller("MediaController",["$scope","$rootScope","SessionMediasService","$sce","ModalService",function(s,e,t,o,n){s.classSessionId=classSessionId,e.mediaItems=[],s.init=function(e,o){console.log("media"),s.paneId=e,s.toolBar=o,t.getForClassroom({classSessionId:s.classSessionId},function(e){s.mediaItems=e},function(e){})},s.$on("toggleToolbar",function(e,o){console.log(o),s.paneId==o.paneId&&(s.toolBar=o.toolBar)}),s.trust=function(e){return o.trustAsResourceUrl(e.content)},s.pop=function(e){console.log(e),n.showModal({templateUrl:"/app/classroom/mediaViewModal.html",controller:"MediaViewModalController",inputs:{media:e}}).then(function(e){e.close.then(function(e){$(".loading").show(),s.init(s.paneId,s.toolBar)})})},s.fullPaneView=function(e){for(var o=0;o<s.mediaItems.length;o++)o==e?s.mediaItems[o].fullScreen=!0:s.mediaItems[o].display=!1},s.standardView=function(e){for(var o=0;o<s.mediaItems.length;o++)s.mediaItems[o].fullScreen=!1,s.mediaItems[o].display=!0}}]),angular.module("standingOut.controllers").controller("MediaViewModalController",["$scope","$log","close","ModalService","media","$sce",function(e,o,s,t,n,a){e.media=n,e.trustedUrl=function(){return a.trustAsResourceUrl(e.media.content)},e.cancel=function(){s(e.result,100)}}]),angular.module("standingOut.controllers").controller("PanelExitModalController",["$scope","close",function(e,o){e.cancel=function(){o(!1,100)},e.init=function(){},e.continue=function(e){o(!0,100)},e.back=function(e){o(!1,100)},e.init()}]),angular.module("standingOut.controllers").controller("ClassroomScreenRecordingController",["$scope","$rootScope","ModalService","DeleteService",function(e,o,s,t){e.classSessionId=classSessionId,e.isOpen=!1,e.init=function(){console.log("screenRecording")},e.toggle=function(){o.checkSessionStart()&&(e.isOpen=!e.isOpen)},e.init()}]),angular.module("standingOut.controllers").controller("ScreenshotModalController",["$scope","$filter","close","ModalService","img","SessionDocumentsService",function(s,e,t,o,n,a){s.result={success:!1},s.media={},s.classSessionId=classSessionId,s.uploadToDrive=!1,s.placeHolder="Screenshot "+e("date")(Date.now(),"HH-mm-ss dd-MM-yyyy"),s.img=n,s.cancel=function(){s.result.success=!1,t(s.result,100)},s.init=function(){s.uploadToDrive=!1,setTimeout(function(){$("#replaceable-img").attr("src",n)},500)},s.save=function(){if(s.mediaForm.submitted=!0,s.mediaForm.$valid&&0<n.length)if(s.uploadToDrive){$("#screenshot-submit").attr("disabled",!0);var e={imageData:n,name:null==s.media.name||""==s.media.name?s.placeHolder:s.media.name};a.uploadScreenshot({classSessionId:s.classSessionId},e,function(e){s.result.success=!0,t(s.result,100),toastr.clear(),toastr.success('Saved "'+(null==s.media.name||""==s.media.name?s.placeHolder:s.media.name)+'" to Drive classroom folder')},function(e){toastr.clear(),toastr.error('Error saving "'+(null==s.media.name||""==s.media.name?s.placeHolder:s.media.name)+'"'),$("#screenshot-submit").attr("disabled",!1)})}else{var o=document.createElement("a");o.download=null==s.media.name||""==s.media.name?s.placeHolder:s.media.name,o.href=n,o.dataset.downloadurl=["image/png",o.download,o.href].join(":"),document.body.appendChild(o),o.click(),document.body.removeChild(o),s.result.success=!0,t(s.result,100)}},s.init()}]),angular.module("standingOut.controllers").controller("StudentCommandController",["$scope","$rootScope","$timeout","ModalService",function(s,t,o,e){s.classSessionId=classSessionId,s.groupId="null"==groupId?null:groupId,s.isOpen=!0,s.studentConnection=null,s.userId=userId,s.lastPing=null,s.pingSpacing=6e5,s.pingBuffer=s.pingSpacing+2e4,s.signalRDisconnect=!1,s.studentConnection=(new signalR.HubConnectionBuilder).withUrl("/hubs/tutorcommand").build(),s.studentConnection.onclose(function(){s.signalRReconnect()}),s.$on("signalRDisconnect",function(e,o){s.signalRReconnect()}),s.signalRReconnect=function(){s.signalRDisconnect||(s.signalRDisconnect=!0,alert("Oops, it looks like you've got disconnected! Hit okay and we'll refresh the browser (don't worry, we've safely stored your whiteboards and files)"),window.location.reload())},s.init=function(){s.studentConnection.start().then(function(){s.studentConnection.invoke("connect",s.classSessionId,s.groupId),s.extendPing(),s.setupPing(s.pingSpacing)}).catch(function(e){return console.error(e.toString())}),s.studentConnection.on("SessionEnded",function(e){t.sessionEnded=!0,$(".loading").show(),window.location="/Classroom/Sessions/Complete/"+s.classSessionId})},s.extendPing=function(){s.lastPing=new Date},s.setupPing=function(e){o(function(){(new Date).getTime()-s.pingBuffer<s.lastPing.getTime()?(s.studentConnection.invoke("ping"),s.lastPing=new Date,s.setupPing(s.pingSpacing)):s.setupPing(s.pingSpacing-((new Date).getTime()-s.lastPing.getTime()))},e)},s.studentConnection.on("pingTutorCommand",function(){console.log("pingTutorCommand")}),s.toggle=function(){s.isOpen=!s.isOpen},s.studentConnection.on("SessionStarted",function(e){o(function(){s.$apply(function(){t.sessionStarted=!0,t.$broadcast("startTimer",e)})})}),s.studentConnection.on("checkOnline",function(e){s.studentConnection.invoke("studentOnlineRequest",s.classSessionId),s.extendPing()}),s.studentConnection.on("studentPermissionChange",function(e){null!=e.friendlyPermissionChanged&&s.permissionsChangeToastr(e.friendlyPermissionChanged,e.permissionChangedTo),t.$broadcast("studentPermissionChange",e)}),s.permissionsChangeToastr=function(e,o){o?(toastr.clear(),toastr.info("You have been given access to "+e)):(toastr.clear(),toastr.info("Your access has been removed for "+e))},s.studentConnection.on("allPermissionChangeChat",function(e){s.permissionsChangeToastr("Classroom Chat",e),t.$broadcast("allPermissionChangeChat",e)}),s.studentConnection.on("groupPermissionChangeChat",function(e){s.permissionsChangeToastr("Group Chat",e),t.$broadcast("groupPermissionChangeChat",e)}),s.studentConnection.on("individualPermissionChangeChat",function(e){s.permissionsChangeToastr("Individual Chat",e),t.$broadcast("individualPermissionChangeChat",e)}),t.$on("askForHelp",function(e){s.studentConnection.invoke("askForHelp",s.classSessionId),s.extendPing()}),s.studentConnection.on("helpComing",function(){t.$broadcast("helpComing")}),s.$on("startCallFromStudent",function(e,o){s.studentConnection.invoke("callUser",o.classSessionId,o.userId),s.extendPing()}),s.$on("startGroupCallFromStudent",function(e,o){s.studentConnection.invoke("callGroup",o.classSessionId,o.groupId),s.extendPing()}),s.$on("startAllCallFromStudent",function(e,o){s.studentConnection.invoke("callAll",o.classSessionId),s.extendPing()}),s.studentConnection.on("startCall",function(e,o){t.$broadcast("startCall",{roomId:e,users:o})}),s.studentConnection.on("receiveCall",function(e,o){t.$broadcast("receiveCall",e,o)}),s.studentConnection.on("cancelledCall",function(e){t.$broadcast("cancelledCall",e)}),s.$on("callDeclinedBy",function(e,o){s.studentConnection.invoke("callDeclined",s.classSessionId,o.roomId),s.extendPing()}),s.studentConnection.on("toggleForceMode",function(e,o){t.$broadcast("receiveToggleForceMode",{forceMode:e,roomId:o})}),s.studentConnection.on("groupMoved",function(e,o){null!=s.groupId&&s.studentConnection.invoke("disconnectFromGroup",s.groupId),s.studentConnection.invoke("connectToGroup",e),s.extendPing(),s.groupId=e,t.$broadcast("groupMoved",e),toastr.clear(),toastr.info('You were added to the group "'+o+'"')}),s.studentConnection.on("groupRemoved",function(e){s.studentConnection.invoke("disconnectFromGroup",s.groupId),s.extendPing(),s.groupId=null,t.$broadcast("groupRemoved"),toastr.clear(),toastr.info('You were removed from the group "'+e+'"')}),s.init()}]),function(){angular.module("standingOut.controllers").controller("TutorCommandController",["$scope","$rootScope","$timeout","ModalService","ClassroomSessionsService","SessionGroupsService",function($scope,$rootScope,$timeout,ModalService,ClassroomSessionsService,SessionGroupsService){$scope.classSessionId=classSessionId,$scope.isOpen=!1,$scope.groups=[],$scope.allAttendees=[],$scope.helpRequested=!1,$scope.chatActive=!1,$scope.selectedCount=0,$scope.allAttendeesToggle=[],$scope.lastPing=null,$scope.pingSpacing=6e5,$scope.pingBuffer=$scope.pingSpacing+2e4,$scope.signalRDisconnect=!1,$scope.tutorConnection=(new signalR.HubConnectionBuilder).withUrl("/hubs/tutorcommand").build(),$scope.tutorConnection.onclose(function(){$scope.signalRReconnect()}),$scope.$on("signalRDisconnect",function(e,o){$scope.signalRReconnect()}),$scope.signalRReconnect=function(){$scope.signalRDisconnect||($scope.signalRDisconnect=!0,alert("Oops, it looks like you've got disconnected! Hit okay and we'll refresh the browser (don't worry, we've safely stored your whiteboards and files)"),window.location.reload())},$scope.init=function(){SessionGroupsService.getTutorCommandGroups({classSessionId:$scope.classSessionId},function(e){$scope.groups=e,setTimeout(function(){$(document).foundation()},50),$scope.tutorConnection.start().then(function(){$scope.tutorConnection.invoke("connect",$scope.classSessionId,null);for(var e=0;e<$scope.groups.length;e++){for(var o=0;o<$scope.groups[e].sessionAttendees.length;o++)$scope.allAttendees.push($scope.groups[e].sessionAttendees[o]),1==$scope.groups[e].sessionAttendees[o].helpRequested&&($scope.helpRequested=!0),null!=$scope.groups[e].sessionAttendees[o].userId&&void 0!==$scope.groups[e].sessionAttendees[o].userId&&$scope.tutorConnection.invoke("connectToStudent",$scope.groups[e].sessionAttendees[o].userId);$scope.groups[e].selectedCount=0}$scope.extendPing(),$scope.setupPing($scope.pingSpacing)}).catch(function(e){return console.error(e.toString())})},function(e){}),ClassroomSessionsService.getAllChatPermission({classSessionId:$scope.classSessionId},function(e){$scope.chatActive=e.chatAll},function(e){})},$scope.extendPing=function(){$scope.lastPing=new Date},$scope.setupPing=function(e){$timeout(function(){(new Date).getTime()-$scope.pingBuffer<$scope.lastPing.getTime()?($scope.tutorConnection.invoke("ping"),$scope.lastPing=new Date,$scope.setupPing($scope.pingSpacing)):$scope.setupPing($scope.pingSpacing-((new Date).getTime()-$scope.lastPing.getTime()))},e)},$scope.tutorConnection.on("pingTutorCommand",function(){console.log("pingTutorCommand")}),$scope.toggle=function(){$rootScope.sessionEnded?(toastr.clear(),toastr.error("Tutor Command is not available to use out of class")):$scope.isOpen=!$scope.isOpen},$scope.tutorConnection.on("studentOnlineResponse",function(e){for(var o=0;o<$scope.groups.length;o++)for(var s=0;s<$scope.groups[o].sessionAttendees.length;s++)$scope.groups[o].sessionAttendees[s].userId==e&&($scope.groups[o].sessionAttendees[s].online=!0);for(var t=0;t<$scope.allAttendees.length;t++)$scope.allAttendees[t].userId==e&&($scope.allAttendees[t].online=!0)}),$scope.tutorConnection.on("userConnected",function(e){if(0<$scope.groups.length)for(var o=0;o<$scope.groups.length;o++)for(var s=0;s<$scope.groups[o].sessionAttendees.length;s++)$scope.groups[o].sessionAttendees[s].userId==e&&$scope.$apply(function(){$scope.groups[o].sessionAttendees[s].online=!0});for(var t=0;t<$scope.allAttendees.length;t++)$scope.allAttendees[t].userId==e&&$scope.$apply(function(){$scope.allAttendees[t].online=!0})}),$scope.tutorConnection.on("userDisconnected",function(e){if(0<$scope.groups.length)for(var o=0;o<$scope.groups.length;o++)for(var s=0;s<$scope.groups[o].sessionAttendees.length;s++)$scope.groups[o].sessionAttendees[s].userId==e&&$scope.$apply(function(){$scope.groups[o].sessionAttendees[s].online=!1});for(var t=0;t<$scope.allAttendees.length;t++)$scope.allAttendees[t].userId==e&&$scope.$apply(function(){$scope.allAttendees[t].online=!1})}),$scope.$on("session_start",function(e,o){$scope.tutorConnection.invoke("sessionStarted",$scope.classSessionId),$scope.extendPing()}),$scope.$on("session_end",function(e,o){$(".loading").show(),$scope.tutorConnection.invoke("sessionEnded",$scope.classSessionId),$scope.extendPing(),window.location="/Classroom/Sessions/Complete/"+$scope.classSessionId}),$scope.individualToggleChat=function(e){var o=$scope.allAttendees[e].chatActive;$scope.allAttendees[e].chatActive=!o,$scope.tutorConnection.invoke("individualPermissionChangeChat",$scope.classSessionId,$scope.allAttendees[e].sessionAttendeeId,$scope.allAttendees[e].userId,!o),$scope.extendPing()},$scope.groupToggleChat=function(e){var o=$scope.groups[e].chatActive;$scope.groups[e].chatActive=!o,$scope.tutorConnection.invoke("groupPermissionChangeChat",$scope.classSessionId,$scope.groups[e].sessionGroupId,!o),$scope.extendPing()},$scope.allToggleChat=function(){var e=$scope.chatActive;$scope.chatActive=!e,$scope.tutorConnection.invoke("allPermissionChangeChat",$scope.classSessionId,!e),$scope.extendPing()},$scope.individualGenericToggle=function(index,prop){var value=eval("$scope.allAttendees["+index+"]."+prop);$scope.allAttendees[index][prop]=!value,$scope.tutorConnection.invoke("studentPermissionChange",$scope.classSessionId,$scope.allAttendees[index].sessionAttendeeId,$scope.allAttendees[index].userId,prop,$scope.allAttendees[index]),$scope.extendPing()},$scope.toggleCallIndividuals=function(e){e.callIndividualsEnabled=!e.callIndividualsEnabled,$scope.tutorConnection.invoke("studentPermissionChange",$scope.classSessionId,e.sessionAttendeeId,e.userId,prop,e),$scope.extendPing()},$scope.groupGenericToggle=function(groupIndex,index,prop){var value=eval("$scope.groups["+groupIndex+"].sessionAttendees["+index+"]."+prop);$scope.groups[groupIndex].sessionAttendees[index][prop]=!value,$scope.tutorConnection.invoke("studentPermissionChange",$scope.classSessionId,$scope.groups[groupIndex].sessionAttendees[index].sessionAttendeeId,$scope.groups[groupIndex].sessionAttendees[index].userId,prop,$scope.groups[groupIndex].sessionAttendees[index]),$scope.extendPing()},$scope.wholeClassGenericToggle=function(prop){var value=eval("$scope.allAttendeesToggle."+prop);$scope.allAttendeesToggle[prop]=null==value||!value;for(var i=0;i<$scope.allAttendees.length;i++)$scope.allAttendees[i][prop]!=$scope.allAttendeesToggle[prop]&&($scope.allAttendees[i][prop]=$scope.allAttendeesToggle[prop],$scope.tutorConnection.invoke("studentPermissionChange",$scope.classSessionId,$scope.allAttendees[i].sessionAttendeeId,$scope.allAttendees[i].userId,prop,$scope.allAttendees[i]),$scope.extendPing())},$scope.wholeGroupGenericToggle=function(groupIndex,prop){var value=eval("$scope.groups["+groupIndex+"]."+prop);$scope.groups[groupIndex][prop]=!value;for(var i=0;i<$scope.groups[groupIndex].sessionAttendees.length;i++)$scope.groups[groupIndex].sessionAttendees[i][prop]!=$scope.groups[groupIndex][prop]&&($scope.groups[groupIndex].sessionAttendees[i][prop]=$scope.groups[groupIndex][prop],$scope.tutorConnection.invoke("studentPermissionChange",$scope.classSessionId,$scope.groups[groupIndex].sessionAttendees[i].sessionAttendeeId,$scope.groups[groupIndex].sessionAttendees[i].userId,prop,$scope.groups[groupIndex].sessionAttendees[i]),$scope.extendPing())},$rootScope.$on("callUser",function(e,o){for(var s=0;s<$scope.allAttendees.length;s++)$scope.allAttendees[s].userId==o.userId&&($scope.allAttendees[s].online?$scope.callUser($scope.allAttendees[s]):(toastr.clear(),toastr.error("Student is not online")))}),$scope.callUser=function(e){$scope.tutorConnection.invoke("callUser",$scope.classSessionId,e.userId),$scope.extendPing(),1==e.helpRequested&&$rootScope.$broadcast("helpDelivered",e.userId)},$rootScope.$on("joinGroupCallFromChat",function(e,o){$scope.callGroup(o.groupId)}),$scope.callGroup=function(e){$scope.tutorConnection.invoke("callGroup",$scope.classSessionId,e),$scope.extendPing()},$rootScope.$on("joinAllCallFromChat",function(e,o){$scope.callAll()}),$scope.callAll=function(){$scope.tutorConnection.invoke("callAll",$scope.classSessionId),$scope.extendPing()},$scope.tutorConnection.on("startCall",function(e,o){$rootScope.$broadcast("startCall",{roomId:e,users:o})}),$scope.tutorConnection.on("receiveCall",function(e,o){$rootScope.$broadcast("receiveCall",e,o)}),$rootScope.$on("cancelledByCall",function(e,o){$scope.tutorConnection.invoke("cancelledByCall",$scope.classSessionId,o),$scope.extendPing()}),$scope.tutorConnection.on("callDeclined",function(e,o,s){toastr.clear(),toastr.info("The call was declined by "+s),$rootScope.$broadcast("callDeclined",o)}),$scope.$on("toggleForceMode",function(e,o){$scope.tutorConnection.invoke("toggleForceMode",$scope.classSessionId,o.forceMode,o.room),$scope.extendPing()}),$scope.openAllChat=function(){$rootScope.$broadcast("openAllChat")},$scope.openGroupChat=function(e){$rootScope.$broadcast("openGroupChat",e)},$scope.openSingleChat=function(e){$rootScope.$broadcast("openSingleChat",e)},$scope.openRootFolder=function(){$rootScope.$broadcast("openTutorCommandFolder",{userId:null})},$scope.openStudentFolder=function(e){$rootScope.$broadcast("openTutorCommandFolder",{userId:e})},$scope.openAllWhiteboard=function(){$rootScope.$broadcast("openTutorCommandWhiteboard",{groupId:null,userId:null})},$scope.openGroupWhiteboard=function(e){$rootScope.$broadcast("openTutorCommandWhiteboard",{groupId:e,userId:null})},$scope.openSingleWhiteboard=function(e){$rootScope.$broadcast("openTutorCommandWhiteboard",{groupId:null,userId:e})},$scope.tutorConnection.on("helpRequested",function(e){for(var o=0;o<$scope.allAttendees.length;o++)if($scope.allAttendees[o].userId==e){$timeout(function(){$scope.$apply(function(){$scope.allAttendees[o].helpRequested=!0})});break}$timeout(function(){$scope.$apply(function(){$scope.helpRequested=!0})}),$rootScope.$broadcast("helpRequested",e)}),$rootScope.$on("helpDelivered",function(e,o){var s=!1;$timeout(function(){$scope.$apply(function(){for(var e=0;e<$scope.allAttendees.length;e++)$scope.allAttendees[e].userId==o?$scope.allAttendees[e].helpRequested=!1:1==$scope.allAttendees[e].helpRequested&&(s=!0)})}),0==s&&$timeout(function(){$scope.$apply(function(){$scope.helpRequested=!1})}),$scope.tutorConnection.invoke("helpDelivered",$scope.classSessionId,o),$scope.extendPing()}),$scope.selectUser=function(e){for(var o=!1,s=!1,t=0;t<$scope.groups.length;t++){for(var n=0;n<$scope.groups[t].sessionAttendees.length;n++)if($scope.groups[t].sessionAttendees[n].userId==e){o=null!=$scope.groups[t].sessionAttendees[n].selected&&$scope.groups[t].sessionAttendees[n].selected,$scope.groups[t].sessionAttendees[n].selected=!o,$scope.selectedCount=1!=o?($scope.groups[t].selectedCount=$scope.groups[t].selectedCount+1,$scope.selectedCount+1):($scope.groups[t].selectedCount=$scope.groups[t].selectedCount-1,$scope.selectedCount-1),s=!0;break}if(1==s)break}},$scope.addToGroup=function(e){for(var o=[],s=0;s<$scope.groups.length;s++)for(var t=0;t<$scope.groups[s].sessionAttendees.length;t++)if(1==$scope.groups[s].sessionAttendees[t].selected){$scope.groups[s].sessionAttendees[t].selected=!1;var n=$scope.groups[s].sessionAttendees.splice(t,1)[0];n.sessionGroupId=$scope.groups[e].sessionGroupId,$scope.groups[e].sessionAttendees.push(n),$scope.groups[s].selectedCount=$scope.groups[s].selectedCount-1,$scope.selectedCount=$scope.selectedCount-1,o.push(n.userId)}$scope.tutorConnection.invoke("groupMove",$scope.classSessionId,$scope.groups[e].sessionGroupId,o,$scope.groups[e].name),$scope.extendPing()},$scope.removeFromGroup=function(e){for(var o=[],s=0;s<$scope.groups.length;s++)if(null==$scope.groups[s].sessionGroupId)for(var t=0;t<$scope.groups[e].sessionAttendees.length;t++)if(1==$scope.groups[e].sessionAttendees[t].selected){$scope.groups[e].sessionAttendees[t].selected=!1;var n=$scope.groups[e].sessionAttendees.splice(t,1)[0];n.sessionGroupId=null,$scope.groups[e].selectedCount=$scope.groups[e].selectedCount-1,$scope.selectedCount=$scope.selectedCount-1,o.push(n.userId),$scope.groups[s].sessionAttendees.push(n)}$scope.tutorConnection.invoke("groupRemove",$scope.classSessionId,o,$scope.groups[e].name),$scope.extendPing()},$scope.init()}])}(),function(){angular.module("standingOut.controllers").controller("ClassroomWebcamController",["$scope","$rootScope","$timeout","ModalService","DeleteService","ClassroomSessionsService","ClassSessionVideoRoomsService","SessionAttendeesService",function($scope,$rootScope,$timeout,ModalService,DeleteService,ClassroomSessionsService,ClassSessionVideoRoomsService,SessionAttendeesService){$scope.classSessionId=classSessionId,$scope.sessionAttendeeId=sessionAttendeeId,$scope.sessionAttendee=void 0,$scope.isTutor="True"==isTutor,$scope.isOpen=!1,$scope.sessionInProgress=!1,$scope.tutorSetForceMode=!1,$scope.forceMode=!1,$scope.callStartedOnForceAudio=!1,$scope.callStartedOnForceVideo=!1,$scope.callMade=!1,$scope._Video=Twilio.Video,$scope.roomToJoin=void 0,$scope.dominantSpeaker=null,$scope.videoLockUserId=null,$scope.videoLock=!1,$scope.activeRoom=void 0,$scope.previewTracks=null,$scope.screenTrack=void 0,$scope.identity=void 0,$scope.token=void 0,$scope.deviceOptions={videodevice:void 0,audiodevice:void 0,popupEnabled:!0,roomJoinEnabled:!0,showaudio:!0,showvideo:!0,screenShareEnabled:!0,callIndividuals:!1,localaudiomuted:!1,localvideomuted:!1,audioVolume:1,screenShareMode:!1,paneMode:!1,paneNumber:void 0},$scope.videodeviceOptions=[],$scope.audiodeviceOptions=[],$scope.paneNumberOptions=[{value:0,text:"1"}],$scope.externalParticipants=[],$scope.audioAnalyzers=[],$scope.awaitingUsers=[],$scope.getPreviewContainer=function(){return document.getElementById("local-media")},$scope.getRemoteContainer=function(){return document.getElementById("remote-media")},$scope.getPaneContainer=function(){return document.getElementsByClassName("webcam-pane")[$scope.deviceOptions.paneNumber]},$scope.getPaneSettingsContainer=function(){return document.getElementsByClassName("pane-settings")[$scope.deviceOptions.paneNumber]},$scope.getRoomControlsContainer=function(){return document.getElementById("room-controls")},$rootScope.$on("joinGroupCallFromChat",function(e,o){$scope.isTutor?$scope.joinRoomFromChat(o.groupId):$scope.deviceOptions.popupEnabled?$scope.joinRoomFromChat(o.groupId):(toastr.clear(),toastr.error("Video is not been enabled"))}),$scope.joinRoomFromChat=function(e){if(null==e){for(var o=0;o<$scope.groupsToJoin.length;o++)if("All"==$scope.groupsToJoin[o].permissionType){$scope.roomToJoin=$scope.groupsToJoin[o],document.getElementById("button-join").click();break}}else for(var s=0;s<$scope.groupsToJoin.length;s++)if($scope.groupsToJoin[s].value.endsWith(e)){$scope.roomToJoin=$scope.groupsToJoin[s],document.getElementById("button-join").click();break}},$scope.joinLogic=function(e){if(null!=$scope.roomToJoin&&void 0!==$scope.roomToJoin){$scope.sessionInProgress=!0;var o={name:$scope.roomToJoin.value,logLevel:"off",dominantSpeaker:!0,video:!1,audio:!e&&0!=$scope.deviceOptions.showaudio&&{deviceId:$scope.deviceOptions.audiodevice}};$scope.callStartedOnForceVideo=!0,$scope.deviceOptions.localvideomuted=!0,$scope.previewTracks?o.tracks=$scope.previewTracks:1==$scope.deviceOptions.screenShareMode&&$timeout(function(){$scope.$apply(function(){$scope.deviceOptions.screenShareMode=!1,$scope.getPreviewContainer().innerHTML="",$scope.screenTrack=null})}),$scope._Video.connect($scope.token,o).then(function(o){toastr.clear(),toastr.info("Your webcam and microphone are being recorded for safeguarding purposes"),ClassSessionVideoRoomsService.save({},{classSessionId:$scope.classSessionId,roomSid:o.sid,participantSid:o.localParticipant.sid},function(e){$scope.roomJoined(o)},function(e){})},function(e){alert("An error has occured. Please refresh your browser")})}else alert("Please select a group.")},$scope.init=function(){$scope.sessionInProgress=!1,ClassroomSessionsService.getAvailableGroups({classSessionId:$scope.classSessionId},function(e){$scope.groupsToJoin=e,$scope.roomToJoin=$scope.groupsToJoin[0],null!=$scope.sessionAttendeeId&&void 0!==$scope.sessionAttendeeId&&""!=$scope.sessionAttendeeId&&SessionAttendeesService.my({classSessionId:$scope.classSessionId},function(e){$scope.sessionAttendee=e,$scope.setPermissions()},function(e){})},function(e){}),ClassroomSessionsService.getTwilioKey({},function(e){$scope.identity=e.identity,$scope.token=e.token,document.getElementById("room-controls-inner").style.display="flex"},function(e){console.log(e)}),$scope.setMediaDevices()},$scope.setMediaDevices=function(){navigator.mediaDevices.enumerateDevices().then(function(e){e.forEach(function(e){if("videoinput"===e.kind){var o=e.label||"Camera";$scope.videodeviceOptions.push({value:e.deviceId,label:o})}else if("audioinput"===e.kind){var s=e.label||"Audio";$scope.audiodeviceOptions.push({value:e.deviceId,label:s})}}),$scope.deviceOptions.videodevice=$scope.videodeviceOptions[0].value,$scope.deviceOptions.audiodevice=$scope.audiodeviceOptions[0].value,angular.element("#videodevices").focus(),angular.element("#audiodevices").focus()},function(e){console.log("mic not accepted")})},$scope.toggle=function(){$rootScope.sessionEnded?(toastr.clear(),toastr.error("Camera and Microphone are not available to use out of class")):$rootScope.checkSessionStart()&&($scope.deviceOptions.paneMode||(0==$scope.deviceOptions.popupEnabled?$scope.isOpen=!1:$scope.isOpen=!$scope.isOpen))},$scope.setupMediaTrackDiv=function(e){var o=document.createElement("Div"),s=document.createTextNode(e);return o.appendChild(s),o},$scope.roomJoined=function(e){window.room=$scope.activeRoom=e,$scope.sessionInProgress=!0,null==$scope.previewTracks&&$scope.attachParticipantTracks(e.localParticipant,$scope.getPreviewContainer()),$scope.isTutor&&1==$scope.roomToJoin.helpRequested&&0<e.participants.size&&$rootScope.$broadcast("helpDelivered",$scope.roomToJoin.userId),e.participants.forEach(function(t){$timeout(function(){$scope.$apply(function(){if(0<$scope.awaitingUsers.length)for(var e=0;e<$scope.awaitingUsers.length;e++)if($scope.awaitingUsers[e].userId==t.identity){$scope.awaitingUsers.splice(e,1);break}$scope.externalParticipants.push({userId:t.identity}),$scope.embelishUser(t.identity)})}),t.tracks.forEach(function(s){s.isSubscribed&&setTimeout(function(){var e=s.track,o=e.attach();o.id=e.name,document.getElementById(t.identity+"_media").appendChild(o),$scope.setVolume()},200)}),t.on("trackSubscribed",function(e){var o=e.attach();o.id=e.name,document.getElementById(t.identity+"_media").appendChild(o),$scope.setVolume()})}),0<e.participants.length&&($scope.dominantSpeaker=e.participants[0].identity),e.on("participantConnected",function(t){$timeout(function(){$scope.$apply(function(){if($scope.isTutor&&1==$scope.roomToJoin.helpRequested&&$rootScope.$broadcast("helpDelivered",$scope.roomToJoin.userId),0<$scope.awaitingUsers.length)for(var e=0;e<$scope.awaitingUsers.length;e++)if($scope.awaitingUsers[e].userId==t.identity){$scope.awaitingUsers.splice(e,1);break}$scope.externalParticipants.push({userId:t.identity}),$scope.embelishUser(t.identity)})}),t.tracks.forEach(function(e){if(e.isSubscribed){var o=e.track,s=o.attach();s.id=o.name,document.getElementById(t.identity+"_media").appendChild(s),$scope.setVolume()}}),t.on("trackSubscribed",function(e){var o=e.attach();o.id=e.name,document.getElementById(t.identity+"_media").appendChild(o),e.kind,$scope.setVolume()}),1==e.participants.length&&($scope.dominantSpeaker=e.participants[0].identity)}),e.on("trackUnsubscribed",function(e){e.detach().forEach(function(e){e.remove()})}),e.on("trackDisabled",function(e){if(null!=e.track){var o=document.getElementById(e.trackName);o.muted=!0,o.hidden=!0}}),e.on("trackEnabled",function(e){if(null!=e.track){var o=document.getElementById(e.trackName);o.muted=!1,o.hidden=!1}}),e.on("participantDisconnected",function(o){$timeout(function(){$scope.$apply(function(){for(var e=0;e<$scope.externalParticipants.length;e++)$scope.externalParticipants[e].userId==o.identity&&(1==$scope.videoLock&&$scope.videoLockUserId==$scope.externalParticipants[index].userId&&($scope.videoLock=!1,$scope.videoLockUserId=null),$scope.forceMode&&$scope.externalParticipants[e].isTutor&&($scope.forceMode=!1),$scope.externalParticipants.splice(e,1))})})}),e.on("disconnected",function(){$scope.previewTracks&&($scope.previewTracks.forEach(function(e){e.stop()}),$scope.previewTracks=null),$scope.detachParticipantTracks(e.localParticipant),e.participants.forEach($scope.detachParticipantTracks),$scope.awaitingUsers=[],$scope.activeRoom=null,$scope.getPreviewContainer().innerHTML="",$timeout(function(){$scope.$apply(function(){$scope.externalParticipants=[]})}),$scope.sessionInProgress=!1,$scope.callStartedOnForceAudio=!1,$scope.callStartedOnForceVideo=!1}),e.on("dominantSpeakerChanged",function(e){null!=e&&($scope.dominantSpeaker=e.identity)})},$scope.lockVideo=function(e){1==$scope.videoLock?null==e?null==$scope.videoLockUserId?$scope.videoLock=!1:$scope.videoLockUserId=null:$scope.externalParticipants[e].userId==$scope.videoLockUserId?$scope.videoLock=!1:$scope.videoLockUserId=$scope.externalParticipants[e].userId:($scope.videoLockUserId=null==e?null:$scope.externalParticipants[e].userId,$scope.videoLock=!0)},$scope.preview=function(){null!=$scope.previewTracks?$timeout(function(){$scope.$apply(function(){$scope.detachTracks($scope.previewTracks),$scope.previewTracks=null})}):($scope.previewTracks?Promise.resolve($scope.previewTracks):$scope._Video.createLocalTracks({audio:{deviceId:$scope.deviceOptions.audiodevice},video:{deviceId:$scope.deviceOptions.videodevice}})).then(function(e){if($timeout(function(){$scope.$apply(function(){window.previewTracks=$scope.previewTracks=e})}),!$scope.getPreviewContainer().querySelector("video")){e.forEach(function(e){$scope.getPreviewContainer().appendChild(e.attach())})}},function(e){$scope.log("Unable to access Camera and Microphone")})},$scope.leaveRoomIfJoined=function(){$scope.activeRoom&&$scope.activeRoom.disconnect()},$scope.updateVideoDevice=function(){1==$scope.sessionInProgress?($scope.disconnectTracks("video"),$scope.connectTracks("video")):$scope.getPreviewContainer().querySelector("video")&&$scope._Video.createLocalVideoTrack({deviceId:{exact:$scope.deviceOptions.videodevice}}).then(function(e){for(var o=0;o<$scope.previewTracks.length;o++)"video"==previewTracks[o].kind&&($scope.detachTracks([previewTracks[o]]),$scope.attachTracks([e],$scope.getPreviewContainer()),previewTracks[o]=e)})},$scope.updateAudioDevice=function(){1==$scope.sessionInProgress?($scope.disconnectTracks("audio"),$scope.connectTracks("audio")):$scope.getPreviewContainer().querySelector("audio")&&$scope._Video.createLocalAudioTrack({deviceId:{exact:$scope.deviceOptions.audiodevice}}).then(function(e){for(var o=0;o<$scope.previewTracks.length;o++)"audio"==$scope.previewTracks[o].kind&&($scope.detachTracks([$scope.previewTracks[o]]),$scope.attachTracks([e],$scope.getPreviewContainer()),$scope.previewTracks[o]=e)})},$scope.setPermissions=function(){$scope.sessionAttendee&&$timeout(function(){$scope.$apply(function(){0==$scope.sessionAttendee.roomJoinEnabled&&0==$scope.sessionAttendee.groupRoomJoinEnabled?$scope.deviceOptions.popupEnabled=!1:$scope.deviceOptions.popupEnabled=!0,null==$scope.roomToJoin||void 0===$scope.roomToJoin?($scope.deviceOptions.showaudio=!0,$scope.deviceOptions.showvideo=!0,$scope.deviceOptions.roomJoinEnabled=!0):(1==$scope.sessionAttendee.roomJoinEnabled&&"All"==$scope.roomToJoin.permissionType||1==$scope.sessionAttendee.groupRoomJoinEnabled&&"Group"==$scope.roomToJoin.permissionType?$scope.deviceOptions.roomJoinEnabled=!0:$scope.deviceOptions.roomJoinEnabled=!1,1==$scope.sessionAttendee.audioEnabled&&"All"==$scope.roomToJoin.permissionType||1==$scope.sessionAttendee.groupAudioEnabled&&"Group"==$scope.roomToJoin.permissionType?$scope.deviceOptions.showaudio=!0:$scope.deviceOptions.showaudio=!1,1==$scope.sessionAttendee.videoEnabled&&"All"==$scope.roomToJoin.permissionType||1==$scope.sessionAttendee.groupVideoEnabled&&"Group"==$scope.roomToJoin.permissionType?$scope.deviceOptions.showvideo=!0:$scope.deviceOptions.showvideo=!1,1==$scope.sessionAttendee.screenShareEnabled&&"All"==$scope.roomToJoin.permissionType||1==$scope.sessionAttendee.groupScreenShareEnabled&&"Group"==$scope.roomToJoin.permissionType?$scope.deviceOptions.screenShareEnabled=!0:$scope.deviceOptions.screenShareEnabled=!1),1==$scope.sessionAttendee.callIndividualsEnabled?$scope.deviceOptions.callIndividuals=!0:$scope.deviceOptions.callIndividuals=!1})})},$scope.$on("studentPermissionChange",function(e,o){var s=angular.copy($scope.deviceOptions);$timeout(function(){$scope.$apply(function(){$scope.sessionAttendee=o})}),$scope.setPermissions(),$timeout(function(){$scope.$apply(function(){1==$scope.sessionInProgress&&($scope.deviceOptions.roomJoinEnabled!=s.roomJoinEnabled&&0==$scope.deviceOptions.roomJoinEnabled&&$scope.leaveRoom(),$scope.deviceOptions.showaudio!=s.showaudio&&(0==$scope.deviceOptions.showaudio?$scope.disconnectTracks("audio"):1==$scope.deviceOptions.showaudio&&($scope.callStartedOnForceAudio||($scope.callStartedOnForceAudio=!0,$scope.deviceOptions.localaudiomuted=!0))),$scope.deviceOptions.showvideo!=s.showvideo&&(0==$scope.deviceOptions.showvideo?$scope.disconnectTracks("video"):1==$scope.deviceOptions.showvideo&&($scope.callStartedOnForceVideo||($scope.callStartedOnForceVideo=!0,$scope.deviceOptions.localvideomuted=!0))),$scope.deviceOptions.screenShareEnabled!=s.screenShareEnabled&&(0==$scope.deviceOptions.screenShareEnabled?1==$scope.deviceOptions.screenShareMode&&$scope.stopShareScreen():$scope.deviceOptions.screenShareEnabled)),0==$scope.deviceOptions.popupEnabled&&($scope.isOpen=!1),$scope.deviceOptions.callIndividuals!=s.callIndividuals&&ClassroomSessionsService.getAvailableGroups({classSessionId:$scope.classSessionId},function(e){$scope.groupsToJoin=e;var o=$scope.roomToJoin;$scope.roomToJoin=null;for(var s=0;s<$scope.groupsToJoin.length;s++)o.value==$scope.groupsToJoin[s].value&&($scope.roomToJoin=$scope.groupsToJoin[s]);null==$scope.roomToJoin&&($scope.sessionInProgress&&$scope.leaveRoom(),$scope.roomToJoin=$scope.groupsToJoin[0])},function(e){})})})}),$scope.genericMute=function(type){var mutedVariable=eval("$scope.deviceOptions.local"+type+"muted");1==$scope.sessionInProgress&&null!=$scope.activeRoom&&("audio"==type?(1==mutedVariable?1==$scope.callStartedOnForceAudio?($scope.connectTracks("audio"),$scope.callStartedOnForceAudio=!1):$scope.activeRoom.localParticipant.tracks.forEach(function(e){e.kind==type&&e.track.enable()}):$scope.activeRoom.localParticipant.tracks.forEach(function(e){e.kind==type&&e.track.disable()}),$scope.deviceOptions.localaudiomuted=!$scope.deviceOptions.localaudiomuted):"video"==type&&(1==mutedVariable?1==$scope.callStartedOnForceVideo?($scope.connectTracks("video"),$scope.callStartedOnForceVideo=!1):$scope.activeRoom.localParticipant.tracks.forEach(function(e){e.kind==type&&e.track.enable()}):$scope.activeRoom.localParticipant.tracks.forEach(function(e){e.kind==type&&e.track.disable()}),$scope.deviceOptions.localvideomuted=!$scope.deviceOptions.localvideomuted))},$scope.setVolume=function(){for(var e=$scope.getRemoteContainer().getElementsByTagName("audio"),o=0;o<e.length;o++)e[o].volume=$scope.deviceOptions.audioVolume},$scope.toggleForceMode=function(){$scope.tutorSetForceMode=!$scope.tutorSetForceMode,$rootScope.$broadcast("toggleForceMode",{forceMode:$scope.tutorSetForceMode,room:$scope.roomToJoin.value})},$scope.$on("receiveToggleForceMode",function(e,o){if(1==o.forceMode){if(1==$scope.sessionInProgress){if($scope.roomToJoin.value==o.roomId)$timeout(function(){$scope.$apply(function(){$scope.forceMode=o.forceMode,$scope.isOpen||($scope.isOpen=!0)})});else for(var s=0;s<$scope.groupsToJoin.length;s++)if($scope.groupsToJoin[s].value==o.roomId){$scope.leaveRoom(),$scope.roomToJoin=$scope.groupsToJoin[s],$scope.forceMode=o.forceMode,$scope.callStartedOnForceVideo=!0,$scope.callStartedOnForceAudio=!0,$scope.deviceOptions.localvideomuted=!0,$scope.deviceOptions.localaudiomuted=!0,$scope.joinLogic(!0),$scope.isOpen||($scope.isOpen=!0);break}}else for(var t=0;t<$scope.groupsToJoin.length;t++)if($scope.groupsToJoin[t].value==o.roomId){null!=$scope.previewTracks?($scope.detachTracks($scope.previewTracks),$scope.previewTracks=null):null!=$scope.screenTrack&&($scope.deviceOptions.screenShareMode=!1,$scope.getPreviewContainer().innerHTML="",$scope.screenTrack=null),$scope.deviceOptions.localvideomuted=!0,$scope.deviceOptions.localaudiomuted=!0,$scope.roomToJoin=$scope.groupsToJoin[t],$scope.forceMode=o.forceMode,$scope.callStartedOnForceVideo=!0,$scope.callStartedOnForceAudio=!0,$scope.joinLogic(!0),$scope.isOpen||($scope.isOpen=!0);break}}else $timeout(function(){$scope.$apply(function(){$scope.forceMode=o.forceMode})})}),$scope.leaveRoom=function(e){$scope.sessionInProgress=!1,1==$scope.deviceOptions.screenShareMode&&$scope.stopShareScreen(),$scope.activeRoom&&$scope.activeRoom.disconnect(),1==$scope.callMade&&($scope.callMade=!1,$rootScope.$broadcast("cancelledByCall",$scope.roomToJoin.value)),e||($scope.deviceOptions.localaudiomuted=!1,$scope.deviceOptions.localvideomuted=!1),$scope.isTutor&&($scope.tutorSetForceMode=!1)},$scope.attachTracks=function(e,s){e.forEach(function(e){var o=e.attach();o.id=e.trackName,s.appendChild(o)})},$scope.attachParticipantTracks=function(e,o){var s=$scope.getTracks(e);$scope.attachTracks(s,o)},$scope.detachTracks=function(e){e.forEach(function(e){e.detach().forEach(function(e){e.remove()})})},$scope.detachParticipantTracks=function(e){var o=$scope.getTracks(e);$scope.detachTracks(o)},$scope.getTracks=function(e){return Array.from(e.tracks.values()).filter(function(e){e.track;return e.track}).map(function(e){return e.track})},$scope.disconnectTracks=function(o){$scope.activeRoom.localParticipant.tracks.forEach(function(e){e.kind==o&&($scope.activeRoom.localParticipant.unpublishTracks([e.track]),$scope.detachTracks([e.track]))})},$scope.connectTracks=function(e){"video"==e?$scope._Video.createLocalVideoTrack({deviceId:{exact:$scope.deviceOptions.videodevice}}).then(function(e){$scope.activeRoom.localParticipant.publishTrack(e),$scope.attachTracks([e],$scope.getPreviewContainer())}):"audio"==e&&$scope._Video.createLocalAudioTrack({deviceId:{exact:$scope.deviceOptions.audiodevice}}).then(function(e){$scope.activeRoom.localParticipant.publishTrack(e),$scope.attachTracks([e],$scope.getPreviewContainer())})},$scope.$on("change_pane",function(e,o){var s=0;"full"==o?s=1:"half"==o?s=2:"thirds"==o?s=3:"quad"==o&&(s=4),$scope.paneNumberOptions=[];for(var t=0;t<s;t++)$scope.paneNumberOptions.push({text:(t+1).toString(),value:t});1==$scope.deviceOptions.paneMode?$scope.deviceOptions.paneNumber>$scope.paneNumberOptions[$scope.paneNumberOptions.length-1].value&&($scope.deviceOptions.paneNumber=$scope.paneNumberOptions[$scope.paneNumberOptions.length-1].value):$scope.deviceOptions.paneNumber>$scope.paneNumberOptions[$scope.paneNumberOptions.length-1].value&&($scope.deviceOptions.paneNumber=$scope.paneNumberOptions[0].value)}),$scope.$on("webcamPaneClosed",function(e,o){1==$scope.deviceOptions.paneMode&&$scope.triggerPane()}),$scope.triggerPane=function(){$scope.deviceOptions.paneMode=!$scope.deviceOptions.paneMode,$timeout(function(){if(1==$scope.deviceOptions.paneMode)$scope.isOpen&&($scope.isOpen=!1),$timeout(function(){var e=document.getElementById("webcam-area");$scope.getPaneContainer().appendChild(e);var o=document.getElementById("room-controls-inner");$scope.getPaneSettingsContainer().appendChild(o),$rootScope.$broadcast("callInPane",{paneIndex:$scope.deviceOptions.paneNumber})},400);else{var e=document.getElementById("room-controls-inner");document.getElementById("room-controls-outer").appendChild(e);var o=document.getElementById("webcam-area");document.getElementById("webcam-area-outer").appendChild(o),$rootScope.$broadcast("callOutPane",{paneIndex:$scope.deviceOptions.paneNumber}),$scope.isOpen||($scope.isOpen=!0)}},200)},$scope.embelishUser=function(s){ClassroomSessionsService.getUserDetails({id:s},function(e){for(var o=0;o<$scope.externalParticipants.length;o++)$scope.externalParticipants[o].userId==s&&($scope.externalParticipants[o].username=e.username,$scope.externalParticipants[o].fullName=e.fullName,$scope.externalParticipants[o].isTutor=e.isTutor)},function(e){})},$rootScope.$on("callFromStudentFromChat",function(e,o){$scope.deviceOptions.popupEnabled?$rootScope.$broadcast("startCallFromStudent",o):(toastr.clear(),toastr.error("Video is not been enabled"))}),$rootScope.$on("callGroupFromStudentFromChat",function(e,o){$scope.deviceOptions.popupEnabled?$rootScope.$broadcast("startGroupCallFromStudent",o):(toastr.clear(),toastr.error("Video is not been enabled"))}),$rootScope.$on("callAllFromStudentFromChat",function(e,o){$scope.deviceOptions.popupEnabled?$rootScope.$broadcast("startAllCallFromStudent",o):(toastr.clear(),toastr.error("Video is not been enabled"))}),$scope.callUser=function(){$rootScope.$broadcast("startCallFromStudent",{classSessionId:$scope.classSessionId,userId:$scope.roomToJoin.userId}),$scope.callMade=!0,1==$scope.roomToJoin.helpRequested&&$rootScope.$broadcast("helpDelivered",$scope.roomToJoin.userId)},$scope.$on("receiveCall",function(e,s,t){ModalService.showModal({templateUrl:"/app/classroom/webcamCallIncomingModal.html",controller:"WebcamCallIncomingModalController",inputs:{incomingUserId:t,roomId:s}}).then(function(e){e.close.then(function(e){if(1==e){for(var o=0;o<$scope.groupsToJoin.length;o++)if($scope.groupsToJoin[o].userId==t){$scope.groupsToJoin[o].helpRequested&&$rootScope.$broadcast("helpDelivered",t);break}$scope.startIncomingCall(s)}else $rootScope.$broadcast("callDeclinedBy",{roomId:s})})})}),$scope.$on("callDeclined",function(e,o){for(var s=$scope.awaitingUsers.length-1;0<=s;s--)if($scope.awaitingUsers[s].userId==o){$scope.awaitingUsers.splice(s,1);break}}),$scope.$on("startCall",function(e,o){o.roomId!=$scope.roomToJoin.value||0==$scope.sessionInProgress?(1==$scope.sessionInProgress&&$scope.leaveRoom(),$scope.callMade=!0,$scope.startIncomingCall(o.roomId,o.users)):$scope.awaitingUsers=o.users}),$scope.startIncomingCall=function(o,s){$timeout(function(){$scope.$apply(function(){1==$scope.sessionInProgress&&$scope.leaveRoom(),$scope.isOpen=!0;for(var e=0;e<$scope.groupsToJoin.length;e++)$scope.groupsToJoin[e].value==o&&($scope.roomToJoin=$scope.groupsToJoin[e]);null!=s&&($scope.awaitingUsers=s),$("#button-join").click()})})},$rootScope.$on("helpRequested",function(e,o){for(var s=0;s<$scope.groupsToJoin.length;s++)if($scope.groupsToJoin[s].userId==o){$scope.groupsToJoin[s].helpRequested=!0;break}}),$rootScope.$on("helpDelivered",function(e,o){for(var s=0;s<$scope.groupsToJoin.length;s++)if($scope.groupsToJoin[s].userId==o){$scope.groupsToJoin[s].helpRequested=!1;break}}),$rootScope.$on("groupMoved",function(e,o){ClassroomSessionsService.getWebcamGroup({classSessionId:$scope.classSessionId,groupId:o},function(e){for(var o=!1,s=0;s<$scope.groupsToJoin.length;s++)if("Group"==$scope.groupsToJoin.permissionType){var t=$scope.groupsToJoin.splice(s,1,e);$scope.roomToJoin.value==t.value&&(1==$scope.sessionInProgress&&$scope.leaveRoom(),0<$scope.groupsToJoin.length&&($scope.roomToJoin=$scope.groupsToJoin[0])),o=!0;break}0==o&&(1<$scope.groupsToJoin.length?$scope.groupsToJoin.splice(2,0,e):$scope.groupsToJoin.push(e))},function(e){})}),$rootScope.$on("groupRemoved",function(e){for(var o=0;o<$scope.groupsToJoin.length;o++)if("Group"==$scope.groupsToJoin[o].permissionType){var s=$scope.groupsToJoin.splice(o,1)[0];$scope.roomToJoin.value==s.value&&(1==$scope.sessionInProgress&&$scope.leaveRoom(),0<$scope.groupsToJoin.length&&($scope.roomToJoin=$scope.groupsToJoin[0]));break}}),$scope.isChrome=function(){return"chrome"in window},$scope.isFirefox=function(){return-1<navigator.userAgent.toLowerCase().indexOf("firefox")},$scope.canScreenShare=function(){return $scope.isChrome()||$scope.isFirefox()},$scope.getUserScreen=function(){return $scope.canScreenShare()?$scope.isChrome()?new Promise(function(o,s){chrome.runtime.sendMessage("bomnhpeeelhikfijdbgnfmcicjehajdh",{sources:["screen"]},function(e){e?"success"===e.type?o({streamId:e.streamId}):s():(alert("Our extension is required for screenshare in Chrome. Hit okay and we'll show you where to get it!"),window.open("https://chrome.google.com/webstore/detail/standing-out-screen-share/bomnhpeeelhikfijdbgnfmcicjehajdh","_blank"),s(new Error("Could not get stream")))})}).then(function(e){return navigator.mediaDevices.getUserMedia({video:{mandatory:{chromeMediaSource:"desktop",chromeMediaSourceId:e.streamId}}})}):$scope.isFirefox()?navigator.mediaDevices.getUserMedia({video:{mediaSource:"screen"}}):(toastr.clear(),void toastr.error("Screenshare is only available in Firefox and Chrome")):(toastr.clear(),void toastr.error("Screenshare is only available in Firefox and Chrome"))},$scope.previewScreenshare=function(){1==$scope.deviceOptions.screenShareMode?$timeout(function(){$scope.$apply(function(){$scope.deviceOptions.screenShareMode=!1,$scope.getPreviewContainer().innerHTML="",$scope.screenTrack=null})}):$scope.getUserScreen().then(function(o){$timeout(function(){$scope.$apply(function(){$scope.deviceOptions.screenShareMode=!0,$scope.screenTrack=o.getVideoTracks()[0];var e=Twilio.Video.LocalVideoTrack($scope.screenTrack);$scope.attachTracks([e],$scope.getPreviewContainer())})})})},$scope.startShareScreen=function(){$scope.getUserScreen().then(function(o){$timeout(function(){$scope.$apply(function(){$scope.deviceOptions.screenShareMode=!0,$scope.screenTrack=o.getVideoTracks()[0],$scope.disconnectTracks("video"),$scope.activeRoom.localParticipant.publishTrack($scope.screenTrack);var e=Twilio.Video.LocalVideoTrack($scope.screenTrack);$scope.attachTracks([e],$scope.getPreviewContainer())})})})},$scope.stopShareScreen=function(e){$scope.deviceOptions.screenShareMode=!1,$scope.disconnectTracks("video"),$scope.getPreviewContainer().innerHTML="",$scope.screenTrack=null,$scope.deviceOptions.showvideo&&0==e&&$scope.connectTracks("video")},$scope.init()}])}(),angular.module("standingOut.controllers").controller("WebcamCallIncomingModalController",["$scope","$rootScope","$timeout","close","ClassroomSessionsService","incomingUserId","roomId",function(s,e,o,t,n,a,i){s.decision=!1,s.incomingUserId=a,s.roomId=i,s.cancelledCall=!1,s.init=function(){n.getUserDetails({id:s.incomingUserId},function(e){s.incomingUser=e},function(e){}),setTimeout(function(){var e=document.getElementById("tempphonering");void 0!==e&&null!=e&&(e.load(),e.play().catch(function(e){}))},1e3)},s.confirm=function(e){s.decision=e,s.close()},s.close=function(){var e=document.getElementById("tempphonering");if(void 0!==e&&null!=e&&e.pause(),!s.closed)return s.closed=!0,void t(s.decision,500)},s.$on("cancelledCall",function(e,o){s.roomId==o&&(toastr.clear(),toastr.info("The call was cancelled"),s.close())}),s.init()}]),angular.module("standingOut.controllers").controller("WhiteboardController",["$scope","$timeout","$rootScope","$filter","ModalService","DeleteService","SessionGroupsService","SessionWhiteBoardsService",function(M,n,i,t,a,e,o,c){M.classSessionId=classSessionId,M.userId=userId,M.globalWidth=0,M.globalHeight=0,M.individualTabs=0,M.isTutor="True"==isTutor,M.whiteboardConnection=(new signalR.HubConnectionBuilder).withUrl("/hubs/whiteboard").build(),M.whiteboardConnection.onclose(function(){i.$broadcast("signalRDisconnect")}),M.savedWhiteBoards=[],M.tabIndex=0,M.zoomSet=[.25,.5,.75,1,1.5,2,3],M.marginOffset=0,M.uuIdLookUp=[];for(var s=0;s<256;s++)M.uuIdLookUp[s]=(s<16?"0":"")+s.toString(16);M.allWhiteboardActive=!0,M.groupWhiteboardActive=!0,M.lastPing=null,M.pingSpacing=6e5,M.pingBuffer=M.pingSpacing+2e4,M.init=function(e,o){M.paneId=e,M.toolBar=o;var s=$("#pane-controls");c.getMyWhiteBoards({classSessionId:M.classSessionId,sizeX:s[0].offsetWidth-(56+M.marginOffset),sizeY:s[0].offsetHeight-(177+M.marginOffset)},function(e){M.whiteboardTabs=e,n(function(){$(document).ioTabs(),M.createColourPickers();for(var e=0;e<M.whiteboardTabs.length;e++)null!=M.whiteboardTabs[e]&&M.embelishWhiteboardTab(e);i.$broadcast("whiteboardPaneLoaded")},50)},function(e){}),M.whiteboardConnection.start().then(function(){M.whiteboardConnection.invoke("connect",M.classSessionId),M.extendPing(),M.setupPing(M.pingSpacing)}).catch(function(e){return console.error(e.toString())})},M.extendPing=function(){M.lastPing=new Date},M.setupPing=function(e){n(function(){(new Date).getTime()-M.pingBuffer<M.lastPing.getTime()?(M.whiteboardConnection.invoke("ping"),M.lastPing=new Date,M.setupPing(M.pingSpacing)):M.setupPing(M.pingSpacing-((new Date).getTime()-M.lastPing.getTime()))},e)},M.whiteboardConnection.on("pingWhiteboard",function(){console.log("pingWhiteboard")}),M.$on("toggleToolbar",function(e,o){M.paneId==o.paneId&&(M.toolBar=o.toolBar)}),M.$on("openMainWhiteboard",function(e,o){if(null!=o.userId){for(var s=!1,t=0;t<M.whiteboardTabs.length;t++)if(null!=M.whiteboardTabs[t]&&M.whiteboardTabs[t].userId==o.userId){s=!0,$("#qtntab-title-"+t).click();break}s||c.getWhiteBoardForCollaboration({classSessionId:M.classSessionId,userId:o.userId},function(e){$(".loading").hide(),M.newTab(e),toastr.clear(),toastr.success("Collaboration started")},function(e){$(".loading").hide(),toastr.clear(),toastr.error("User does not have any active whiteboards")})}else if(null!=o.groupId){for(var n=!1,a=0;a<M.whiteboardTabs.length;a++)if(null!=M.whiteboardTabs[a]&&M.whiteboardTabs[a].sessionGroupId==o.groupId){n=!0,$("#qtntab-title-"+a).click();break}n||c.getWhiteBoardForCollaboration({classSessionId:M.classSessionId,groupId:o.groupId},function(e){$(".loading").hide(),M.newTab(e),toastr.clear(),toastr.success("Collaboration started")},function(e){$(".loading").hide(),toastr.clear(),toastr.error("Group does not have a active whiteboard")})}else for(var i=0;i<M.whiteboardTabs.length;i++)if(null!=M.whiteboardTabs[i]&&null==M.whiteboardTabs[i].userId&&null==M.whiteboardTabs[i].sessionGroupId){$("#qtntab-title-"+i).click();break}}),M.whiteBoardTabName=function(e){return null==M.whiteboardTabs[e].userId||M.whiteboardTabs[e].userId==M.userId?M.whiteboardTabs[e].name:null==M.whiteboardTabs[e].appendName?"Tutor - "+M.whiteboardTabs[e].name:M.whiteboardTabs[e].appendName+" - "+M.whiteboardTabs[e].name},M.uuIdGeneration=function(){for(var e=["x","x","x","x","-","x","x","-","4","x","-","y","x","-","x","x","x","x","x","x"],o="",s=0,t=4294967295*Math.random()|0;s++<20;){var n=e[s-1],a=255&t,i="x"==n?a:"y"==n?63&a|128:15&a|64;o+="-"==n?n:M.uuIdLookUp[i],t=s%4==0?4294967295*Math.random()|0:t>>8}return o},M.setTabActive=function(e){M.tabIndex=e,setTimeout(function(){$("#whiteTabName_"+e).focus()},100)},M.embelishWhiteboardTab=function(t){n(function(){var e=document.getElementById("canvas_"+t);document.getElementById("canvasContainer"),e.setAttribute("width",M.whiteboardTabs[t].sizeX),e.setAttribute("height",M.whiteboardTabs[t].sizeY),M.whiteboardTabs[t].canvas=e,M.whiteboardTabs[t].ctx=e.getContext("2d"),M.whiteboardTabs[t].ctx.fillStyle="#FFFFFF",M.whiteboardTabs[t].ctx.fillRect(0,0,e.width,e.height),M.whiteboardTabs[t].currentLine={type:"",x:0,y:0,src:null,cords:[]},M.whiteboardTabs[t].redoInProgress=!1,M.whiteboardTabs[t].color="#000000",M.whiteboardTabs[t].tooltype="draw",M.whiteboardTabs[t].width=3,M.whiteboardTabs[t].fillOn=!1,M.whiteboardTabs[t].fillColor="#FFFFFF",M.whiteboardTabs[t].font="arial",M.whiteboardTabs[t].fontSize="20",M.whiteboardTabs[t].textColor="#000000",M.whiteboardTabs[t].text="",M.whiteboardTabs[t].textOn=!1,M.whiteboardTabs[t].equation="",M.whiteboardTabs[t].equationOn=!1,M.whiteboardTabs[t].selectionOn=!1,M.whiteboardTabs[t].selectionMoveOn=!1,M.whiteboardTabs[t].shapeSelect=!1,M.whiteboardTabs[t].shapeSelected=!1,M.whiteboardTabs[t].shapeSelectIcon="rectangle",M.whiteboardTabs[t].toolSelected="Pencil Size",M.whiteboardTabs[t].loadSet=[],M.whiteboardTabs[t].tutorCollaborating=!1,M.whiteboardTabs[t].zoomSelected=!1,M.whiteboardTabs[t].zoomIndex=3,M.whiteboardTabs[t].undoHolder=[],M.whiteboardTabs[t].holdOn=!1,M.whiteboardTabs[t].holdMoveOn=!1,M.whiteboardTabs[t].imageHold=!1,M.whiteboardTabs[t].heldImage="",M.whiteboardTabs[t].holdCords={start_x:0,start_y:0},M.whiteboardTabs[t].userId==M.userId&&"Individual"==M.whiteboardTabs[t].name&&(M.individualTabs=M.individualTabs+1,M.whiteboardTabs[t].name=M.whiteboardTabs[t].name+" - "+M.individualTabs);var o=document.getElementById("canvas_temp_"+t);M.whiteboardTabs[t].tempCanvas=o,M.whiteboardTabs[t].tempCtx=o.getContext("2d"),o.setAttribute("width",M.whiteboardTabs[t].sizeX),o.setAttribute("height",M.whiteboardTabs[t].sizeY),M.whiteboardTabs[t].intermediateStore=[];var s=document.getElementById("canvas_intermediate_"+t);M.whiteboardTabs[t].intermediateCanvas=s,M.whiteboardTabs[t].intermediateCtx=s.getContext("2d"),s.setAttribute("width",M.whiteboardTabs[t].sizeX),s.setAttribute("height",M.whiteboardTabs[t].sizeY),M.drawCanvas(t,0,M.whiteboardTabs[t].canvasData,M.whiteboardTabs[t].ctx,!0,!0)},200)},M.numbersOnlyX=function(e){null!=M.whiteboardTabs[e].sizeX&&null!=M.whiteboardTabs[e].sizeX&&(M.whiteboardTabs[e].sizeX=Math.round(M.whiteboardTabs[e].sizeX),2e3<M.whiteboardTabs[e].sizeX&&(M.whiteboardTabs[e].sizeX<1e4||2e4<M.whiteboardTabs[e].sizeX?M.whiteboardTabs[e].sizeX=parseInt(M.whiteboardTabs[e].sizeX.toString().substring(0,3)):M.whiteboardTabs[e].sizeX=parseInt(M.whiteboardTabs[e].sizeX.toString().substring(0,4))))},M.numbersOnlyY=function(e){null!=M.whiteboardTabs[e].sizeY&&null!=M.whiteboardTabs[e].sizeY&&(M.whiteboardTabs[e].sizeY=Math.round(M.whiteboardTabs[e].sizeY),2e3<M.whiteboardTabs[e].sizeY&&(M.whiteboardTabs[e].sizeY<1e4||2e4<M.whiteboardTabs[e].sizeY?M.whiteboardTabs[e].sizeY=parseInt(M.whiteboardTabs[e].sizeY.toString().substring(0,3)):M.whiteboardTabs[e].sizeY=parseInt(M.whiteboardTabs[e].sizeY.toString().substring(0,4))))},M.createColourPickers=function(){$(".fill-colour-picker").spectrum({color:"#FFFFFF",preferredFormat:"hex",allowEmpty:!0}),$(".colour-picker").spectrum({color:"#000000",preferredFormat:"hex",allowEmpty:!0}),$(".font-colour-picker").spectrum({color:"#000000",preferredFormat:"hex",allowEmpty:!0})},M.noWritePermissionsMessage=function(){toastr.clear(),toastr.error("You haven't been given write permission for this")},M.whiteboardLockedMessage=function(){i.sessionEnded?(toastr.clear(),toastr.error("Shared whiteboards are not available after session end (you can save and open it individually)")):(toastr.clear(),toastr.error("The tutor has locked this whiteboard"))},M.export=function(o){a.showModal({templateUrl:"/app/classroom/whiteboardExportModal.html",controller:"WhiteboardExportModalController"}).then(function(e){e.close.then(function(e){null!=e&&("pc"==e?M.exportToPc(o):"drive"==e&&M.exportToDrive(o))})})},M.exportToPc=function(e){var o=document.getElementById("canvas_"+e).toDataURL("image/png"),s=document.createElement("a");s.download=M.whiteboardTabs[e].name+" "+t("date")(Date.now(),"HH-mm-ss dd-MM-yyyy"),s.href=o,s.dataset.downloadurl=["image/png",s.download,s.href].join(":"),document.body.appendChild(s),s.click(),document.body.removeChild(s)},M.exportToDrive=function(e){var o=document.getElementById("canvas_"+e).toDataURL("image/png").replace("data:image/png;base64,","");c.exportToDrive(o,M.whiteboardTabs[e].name,M.classSessionId,M.userId,function(e){toastr.clear(),toastr.success("Whiteboard saved to drive")},function(e){toastr.clear(),toastr.error("Error saving whiteboard")})},M.import=function(e){a.showModal({templateUrl:"/app/classroom/whiteboardImportModal.html",controller:"WhiteboardImportModalController",inputs:{classSessionId:M.classSessionId,sessionWhiteBoardId:M.whiteboardTabs[e].sessionWhiteBoardId,userId:M.userId,sizeX:M.whiteboardTabs[e].sizeX,sizeY:M.whiteboardTabs[e].sizeY}}).then(function(e){e.close.then(function(e){null==e&&(toastr.clear(),toastr.error("Error importing file"))})})},M.addWhiteBoardTab=function(){var e=$("#canvasContainer_"+M.tabIndex),o={sessionWhiteBoardId:void 0,classSessionId:M.classSessionId,sessionGroupId:null,userId:M.userId,sizeX:e[0].offsetWidth-M.marginOffset,sizeY:e[0].offsetHeight-M.marginOffset,name:"Individual"};c.createIndividualBoard({classSessionId:M.classSessionId},o,function(e){M.newTab(e)},function(e){})},M.collaborateWhiteBoardTab=function(){a.showModal({templateUrl:"/app/classroom/whiteboardCollaborateModal.html",controller:"WhiteboardCollaborateModalController",inputs:{classSessionId:M.classSessionId,userId:M.userId}}).then(function(e){e.close.then(function(e){if(null!=e){for(var o=!1,s=0;s<M.whiteboardTabs.length;s++)if(null!=M.whiteboardTabs[s]&&M.whiteboardTabs[s].sessionWhiteBoardId==e){$("#qtntab-title-"+s).click(),o=!0;break}o||($(".loading").show(),c.getWhiteBoardForCollaboration({classSessionId:M.classSessionId,sessionWhiteBoardId:e},function(e){$(".loading").hide(),M.newTab(e),toastr.clear(),toastr.success("Collaboration started")},function(e){$(".loading").hide(),toastr.clear(),toastr.error("Error setting up collaboration")}))}})})},M.openWhiteBoardTab=function(){M.loadModal(null,function(e,o,s,t,n){if(t){for(var a=!1,i=0;i<M.whiteboardTabs.length;i++)null!=M.whiteboardTabs[i]&&M.whiteboardTabs[i].sessionWhiteBoardId==o&&(a=!0,$("#qtntab-title-"+i).click());a||c.getSharedBoard({classSessionId:M.classSessionId,sessionWhiteBoardId:o,userId:M.userId},function(e){M.newTab(e)},function(e){})}else{var r={sessionWhiteBoardId:void 0,classSessionId:M.classSessionId,sessionGroupId:null,userId:M.userId,name:n,loadFromWhiteBoardId:o,loadFromDate:s};c.openIndividualBoard({classSessionId:M.classSessionId},r,function(e){M.newTab(e)},function(e){})}})},M.changeToolType=function(e,o){M.whiteboardTabs[e].tooltype=o,M.whiteboardTabs[e].shapeSelect=!1,M.whiteboardTabs[e].shapeSelected=!1,document.body.style.cursor="default","draw"==o?M.whiteboardTabs[e].toolSelected="Pencil Size":"erase"==o?M.whiteboardTabs[e].toolSelected="Eraser Size":"text"!=o&&"equation"!=o||(document.body.style.cursor="text")},M.changeToolTypeShape=function(e,o){M.whiteboardTabs[e].tooltype=o,M.whiteboardTabs[e].shapeSelect=!1,M.whiteboardTabs[e].shapeSelected=!0,"line"!=(M.whiteboardTabs[e].shapeSelectIcon=o)&&"rectangle"!=o&&"circle"!=o&&"ellipse"!=o&&"triangle"!=o&&"triangleR"!=o&&"pentagon"!=o&&"hexagon"!=o&&"octagon"!=o&&"rhombus"!=o&&"cubiod"!=o||(M.whiteboardTabs[e].toolSelected="Border Width",document.body.style.cursor="crosshair")},M.openToolPanel=function(e){M.whiteboardTabs[e].shapeSelect=!M.whiteboardTabs[e].shapeSelect},M.openZoomPanel=function(e){M.whiteboardTabs[e].zoomSelected=!M.whiteboardTabs[e].zoomSelected},M.newTab=function(e){M.whiteboardTabs.push(e),setTimeout(function(){$(document).ioTabs(),M.createColourPickers(),M.embelishWhiteboardTab(M.whiteboardTabs.length-1),$("#qtntab-title-"+(M.whiteboardTabs.length-1)).click()},50)},M.loadIntoWhiteBoard=function(e){M.whiteboardTabs[e].writeDisabled?M.noWritePermissionsMessage():M.whiteboardTabs[e].locked&&!M.isTutor||i.sessionEnded&&M.whiteboardTabs[e].userId!=M.userId?M.whiteboardLockedMessage():M.loadModal(e,M.load)},M.loadModal=function(s,t){a.showModal({templateUrl:"/app/classroom/whiteboardLoadModal.html",controller:"WhiteboardLoadModalController",inputs:{classSessionId:M.classSessionId,userId:M.userId,showShares:null==s}}).then(function(e){e.close.then(function(e){if(null!=e){var o=e.name.indexOf("-");-1!=o&&o+2<e.name.length&&(e.name=e.name.substr(o+1)),t(s,e.sessionWhiteBoardId,e.createdAt,e.isShared,e.name,e.sizeX,e.sizeY)}})})},M.shareModal=function(o){M.whiteboardTabs[o].writeDisabled?M.noWritePermissionsMessage():M.whiteboardTabs[o].locked&&!M.isTutor||i.sessionEnded&&M.whiteboardTabs[o].userId!=M.userId?M.whiteboardLockedMessage():a.showModal({templateUrl:"/app/classroom/whiteboardShareModal.html",controller:"WhiteboardShareModalController",inputs:{classSessionId:M.classSessionId,sessionWhiteBoardId:M.whiteboardTabs[o].sessionWhiteBoardId,whiteBoardUserId:M.whiteboardTabs[o].userId,userId:M.userId,showRead:null!=M.whiteboardTabs[o].userId}}).then(function(e){e.close.then(function(e){null!=e&&M.share(o,e.users,e.individual,e.whiteBoardUserId)})})},M.share=function(e,o,s,t){c.share({classSessionId:M.classSessionId,sessionWhiteBoardId:M.whiteboardTabs[e].sessionWhiteBoardId,individual:s,whiteBoardUserId:t},o,function(e){toastr.clear(),toastr.success("Whiteboard permissions updated")},function(e){toastr.clear(),toastr.error("Error updating whiteboard permissions")})},M.lockBoard=function(e){c.toggleLock({classSessionId:M.classSessionId,sessionWhiteBoardId:M.whiteboardTabs[e].sessionWhiteBoardId},{locked:!M.whiteboardTabs[e].locked},function(e){},function(e){toastr.clear(),toastr.error("Could not lock the board")})},M.whiteboardConnection.on("boardLockToggled",function(e,o){for(var s=0;s<M.whiteboardTabs.length;s++)if(null!=M.whiteboardTabs[s]&&M.whiteboardTabs[s].sessionWhiteBoardId==e){M.whiteboardTabs[s].locked!=o&&(M.isTutor?o?(toastr.clear(),toastr.success('You have locked the "'+M.whiteboardTabs[s].name+'" whiteboard for other users')):(toastr.clear(),toastr.success('You have unlocked the "'+M.whiteboardTabs[s].name+'" whiteboard for other users')):o?(toastr.clear(),toastr.info('Your Tutor has locked the "'+M.whiteboardTabs[s].name+'" whiteboard')):(toastr.clear(),toastr.info('Your Tutor has unlocked the "'+M.whiteboardTabs[s].name+'" whiteboard')),M.whiteboardTabs[s].locked=o);break}}),M.closeTab=function(e){M.userId==M.whiteboardTabs[e].userId&&c.setInactive({classSessionId:M.classSessionId,sessionWhiteBoardId:M.whiteboardTabs[e].sessionWhiteBoardId},function(e){},function(e){}),!M.isTutor||M.whiteboardTabs[e].userId==M.userId&&null!=M.whiteboardTabs[e].userId||M.tutorStoppedCollaborating(M.whiteboardTabs[e].sessionWhiteBoardId,M.whiteboardTabs[e].name),M.whiteboardTabs[e]=null;for(var o=!1,s=e+1;s<M.whiteboardTabs.length;s++)if(null!=M.whiteboardTabs[s]&&null!=M.whiteboardTabs[s]){$("#qtntab-title-"+s).click(),o=!0;break}if(!o)for(var t=e-1;0<=t;t--)if(null!=M.whiteboardTabs[t]&&null!=M.whiteboardTabs[t]){$("#qtntab-title-"+t).click();break}},M.alterText=function(e,o){if(M.whiteboardTabs[o].textOn){M.whiteboardTabs[o].tempCtx.clearRect(0,0,M.whiteboardTabs[o].canvas.width,M.whiteboardTabs[o].canvas.height);var s=M.drawTempText(o,M.whiteboardTabs[o].currentLine.cords[0].last_mousex,M.whiteboardTabs[o].currentLine.cords[0].last_mousey);M.whiteboardTabs[o].currentLine.cords[0].mousex=M.whiteboardTabs[o].currentLine.cords[0].last_mousex+s.width,M.whiteboardTabs[o].currentLine.cords[0].mousey=M.whiteboardTabs[o].currentLine.cords[0].last_mousey-s.height,M.drawTempHoldMove(o,M.whiteboardTabs[o].currentLine.cords[0].last_mousex,M.whiteboardTabs[o].currentLine.cords[0].last_mousey,M.whiteboardTabs[o].currentLine.cords[0].mousex,M.whiteboardTabs[o].currentLine.cords[0].mousey,0)}},M.alterEquation=function(e,o){if(M.whiteboardTabs[o].equationOn){M.whiteboardTabs[o].tempCtx.clearRect(0,0,M.whiteboardTabs[o].canvas.width,M.whiteboardTabs[o].canvas.height);var s=M.drawTempEquation(o,M.whiteboardTabs[o].currentLine.cords[0].last_mousex,M.whiteboardTabs[o].currentLine.cords[0].last_mousey);M.whiteboardTabs[o].currentLine.cords[0].mousex=M.whiteboardTabs[o].currentLine.cords[0].last_mousex+s.width,M.whiteboardTabs[o].currentLine.cords[0].mousey=M.whiteboardTabs[o].currentLine.cords[0].last_mousey-s.height,M.drawTempHoldMove(o,M.whiteboardTabs[o].currentLine.cords[0].last_mousex,M.whiteboardTabs[o].currentLine.cords[0].last_mousey,M.whiteboardTabs[o].currentLine.cords[0].mousex,M.whiteboardTabs[o].currentLine.cords[0].mousey,0)}},M.mouseLeave=function(e,o){M.whiteboardTabs[o].last_mousex=0,M.whiteboardTabs[o].last_mousey=0},M.mouseDown=function(e,o){if(M.whiteboardTabs[o].writeDisabled)M.noWritePermissionsMessage();else if(M.whiteboardTabs[o].locked&&!M.isTutor||i.sessionEnded&&M.whiteboardTabs[o].userId!=M.userId)M.whiteboardLockedMessage();else if(M.whiteboardTabs[o].last_mousex=M.whiteboardTabs[o].mousex=parseInt(e.offsetX/M.zoomSet[M.whiteboardTabs[o].zoomIndex]),M.whiteboardTabs[o].last_mousey=M.whiteboardTabs[o].mousey=parseInt(e.offsetY/M.zoomSet[M.whiteboardTabs[o].zoomIndex]),M.whiteboardTabs[o].mousedown=!0,M.whiteboardTabs[o].selectionOn){if("selection"==M.whiteboardTabs[o].tooltype&&null!=M.whiteboardTabs[o].currentLine.cords)if(1<M.whiteboardTabs[o].currentLine.cords.length){var s=M.whiteboardTabs[o].currentLine.cords[1].mousex-M.whiteboardTabs[o].currentLine.cords[1].last_mousex,t=M.whiteboardTabs[o].currentLine.cords[1].mousey-M.whiteboardTabs[o].currentLine.cords[1].last_mousey;if((M.whiteboardTabs[o].currentLine.cords[0].last_mousex+s>=M.whiteboardTabs[o].last_mousex&&M.whiteboardTabs[o].currentLine.cords[0].mousex+s<=M.whiteboardTabs[o].last_mousex||M.whiteboardTabs[o].currentLine.cords[0].mousex+s>=M.whiteboardTabs[o].last_mousex&&M.whiteboardTabs[o].currentLine.cords[0].last_mousex+s<=M.whiteboardTabs[o].last_mousex)&&(M.whiteboardTabs[o].currentLine.cords[0].last_mousey+t>=M.whiteboardTabs[o].last_mousey&&M.whiteboardTabs[o].currentLine.cords[0].mousey+t<=M.whiteboardTabs[o].last_mousey||M.whiteboardTabs[o].currentLine.cords[0].mousey+t>=M.whiteboardTabs[o].last_mousey&&M.whiteboardTabs[o].currentLine.cords[0].last_mousey+t<=M.whiteboardTabs[o].last_mousey)){M.whiteboardTabs[o].selectionMoveOn=!0;var n=M.whiteboardTabs[o].last_mousex-M.whiteboardTabs[o].currentLine.cords[1].mousex;M.whiteboardTabs[o].currentLine.cords[1].mousex=M.whiteboardTabs[o].currentLine.cords[1].mousex+n,M.whiteboardTabs[o].currentLine.cords[1].last_mousex=M.whiteboardTabs[o].currentLine.cords[1].last_mousex+n;var a=M.whiteboardTabs[o].last_mousey-M.whiteboardTabs[o].currentLine.cords[1].mousey;M.whiteboardTabs[o].currentLine.cords[1].mousey=M.whiteboardTabs[o].currentLine.cords[1].mousey+a,M.whiteboardTabs[o].currentLine.cords[1].last_mousey=M.whiteboardTabs[o].currentLine.cords[1].last_mousey+a}}else 0<M.whiteboardTabs[o].currentLine.cords.length&&(M.whiteboardTabs[o].currentLine.cords[0].last_mousex>=M.whiteboardTabs[o].last_mousex&&M.whiteboardTabs[o].currentLine.cords[0].mousex<=M.whiteboardTabs[o].last_mousex||M.whiteboardTabs[o].currentLine.cords[0].mousex>=M.whiteboardTabs[o].last_mousex&&M.whiteboardTabs[o].currentLine.cords[0].last_mousex<=M.whiteboardTabs[o].last_mousex)&&(M.whiteboardTabs[o].currentLine.cords[0].last_mousey>=M.whiteboardTabs[o].last_mousey&&M.whiteboardTabs[o].currentLine.cords[0].mousey<=M.whiteboardTabs[o].last_mousey||M.whiteboardTabs[o].currentLine.cords[0].mousey>=M.whiteboardTabs[o].last_mousey&&M.whiteboardTabs[o].currentLine.cords[0].last_mousey<=M.whiteboardTabs[o].last_mousey)?M.whiteboardTabs[o].selectionMoveOn=!0:M.whiteboardTabs[o].selectionOn=!1;M.whiteboardTabs[o].selectionMoveOn||("move"==M.whiteboardTabs[o].currentLine.type&&null!=M.whiteboardTabs[o].currentLine.cords&&1<M.whiteboardTabs[o].currentLine.cords.length&&M.addCommand_WithIntermediate(o,M.whiteboardTabs[o].currentLine),M.whiteboardTabs[o].tempCtx.clearRect(0,0,M.whiteboardTabs[o].canvas.width,M.whiteboardTabs[o].canvas.height),M.whiteboardTabs[o].currentLine={type:"customline",cords:[]},M.whiteboardTabs[o].selectionOn=!1)}else M.whiteboardTabs[o].textOn?""!=M.whiteboardTabs[o].text?(M.whiteboardTabs[o].currentLine.cords[0].last_mousex>=M.whiteboardTabs[o].last_mousex&&M.whiteboardTabs[o].currentLine.cords[0].mousex<=M.whiteboardTabs[o].last_mousex||M.whiteboardTabs[o].currentLine.cords[0].mousex>=M.whiteboardTabs[o].last_mousex&&M.whiteboardTabs[o].currentLine.cords[0].last_mousex<=M.whiteboardTabs[o].last_mousex)&&(M.whiteboardTabs[o].currentLine.cords[0].last_mousey>=M.whiteboardTabs[o].last_mousey&&M.whiteboardTabs[o].currentLine.cords[0].mousey<=M.whiteboardTabs[o].last_mousey||M.whiteboardTabs[o].currentLine.cords[0].mousey>=M.whiteboardTabs[o].last_mousey&&M.whiteboardTabs[o].currentLine.cords[0].last_mousey<=M.whiteboardTabs[o].last_mousey)?(M.whiteboardTabs[o].holdMoveOn=!0,M.whiteboardTabs[o].holdCords.start_x=M.whiteboardTabs[o].last_mousex,M.whiteboardTabs[o].holdCords.start_y=M.whiteboardTabs[o].last_mousey):(M.whiteboardTabs[o].currentLine.text=M.whiteboardTabs[o].text,M.whiteboardTabs[o].currentLine.textStyle=M.whiteboardTabs[o].fontSize+"px "+M.whiteboardTabs[o].font,M.whiteboardTabs[o].currentLine.textColor=M.whiteboardTabs[o].textColor,M.addCommand_WithIntermediate(o,M.whiteboardTabs[o].currentLine),M.whiteboardTabs[o].tempCtx.clearRect(0,0,M.whiteboardTabs[o].canvas.width,M.whiteboardTabs[o].canvas.height),M.whiteboardTabs[o].text="",M.whiteboardTabs[o].textOn=!1,M.whiteboardTabs[o].holdOn=!1,M.whiteboardTabs[o].currentLine={type:"customline",cords:[]}):(M.whiteboardTabs[o].textOn=!1,M.whiteboardTabs[o].holdOn=!1,M.whiteboardTabs[o].currentLine={type:"customline",cords:[]}):M.whiteboardTabs[o].equationOn?""!=M.whiteboardTabs[o].equation?(M.whiteboardTabs[o].currentLine.cords[0].last_mousex>=M.whiteboardTabs[o].last_mousex&&M.whiteboardTabs[o].currentLine.cords[0].mousex<=M.whiteboardTabs[o].last_mousex||M.whiteboardTabs[o].currentLine.cords[0].mousex>=M.whiteboardTabs[o].last_mousex&&M.whiteboardTabs[o].currentLine.cords[0].last_mousex<=M.whiteboardTabs[o].last_mousex)&&(M.whiteboardTabs[o].currentLine.cords[0].last_mousey>=M.whiteboardTabs[o].last_mousey&&M.whiteboardTabs[o].currentLine.cords[0].mousey<=M.whiteboardTabs[o].last_mousey||M.whiteboardTabs[o].currentLine.cords[0].mousey>=M.whiteboardTabs[o].last_mousey&&M.whiteboardTabs[o].currentLine.cords[0].last_mousey<=M.whiteboardTabs[o].last_mousey)?(M.whiteboardTabs[o].holdMoveOn=!0,M.whiteboardTabs[o].holdCords.start_x=M.whiteboardTabs[o].last_mousex,M.whiteboardTabs[o].holdCords.start_y=M.whiteboardTabs[o].last_mousey):(M.whiteboardTabs[o].currentLine.text=M.whiteboardTabs[o].equation,M.whiteboardTabs[o].currentLine.textStyle=M.whiteboardTabs[o].fontSize+"px "+M.whiteboardTabs[o].font,M.whiteboardTabs[o].currentLine.textColor=M.whiteboardTabs[o].textColor,M.addCommand_WithIntermediate(o,M.whiteboardTabs[o].currentLine),M.whiteboardTabs[o].tempCtx.clearRect(0,0,M.whiteboardTabs[o].canvas.width,M.whiteboardTabs[o].canvas.height),M.whiteboardTabs[o].equation="",M.whiteboardTabs[o].equationOn=!1,M.whiteboardTabs[o].holdOn=!1,M.whiteboardTabs[o].currentLine={type:"customline",cords:[]}):(M.whiteboardTabs[o].equationOn=!1,M.whiteboardTabs[o].holdOn=!1,M.whiteboardTabs[o].currentLine={type:"customline",cords:[]}):M.whiteboardTabs[o].holdOn&&M.mouseDown_HoldOn(o)},M.mouseDown_HoldOn=function(e){if(0<M.whiteboardTabs[e].currentLine.cords.length)if("circle"!=M.whiteboardTabs[e].currentLine.type)M.mouseDown_HoldOn_Step2(e,M.whiteboardTabs[e].currentLine.cords[0].width,M.whiteboardTabs[e].currentLine.cords[0].last_mousex,M.whiteboardTabs[e].currentLine.cords[0].last_mousey,M.whiteboardTabs[e].currentLine.cords[0].mousex,M.whiteboardTabs[e].currentLine.cords[0].mousey);else{var o=M.recalculateCircleBox(M.whiteboardTabs[e].currentLine.cords[0].last_mousex,M.whiteboardTabs[e].currentLine.cords[0].last_mousey,M.whiteboardTabs[e].currentLine.cords[0].mousex,M.whiteboardTabs[e].currentLine.cords[0].mousey);M.mouseDown_HoldOn_Step2(e,M.whiteboardTabs[e].currentLine.cords[0].width,o.start_x,o.start_y,o.x,o.y)}else M.whiteboardTabs[e].holdOn=!1,M.addCommand_WithIntermediate(e,M.whiteboardTabs[e].currentLine),M.whiteboardTabs[e].currentLine={type:"customline",cords:[]},M.whiteboardTabs[e].tempCtx.clearRect(0,0,M.whiteboardTabs[e].canvas.width,M.whiteboardTabs[e].canvas.height)},M.mouseDown_HoldOn_Step2=function(e,o,s,t,n,a){var i=o/2+1;(s+i>=M.whiteboardTabs[e].last_mousex&&n-i<=M.whiteboardTabs[e].last_mousex||n+i>=M.whiteboardTabs[e].last_mousex&&s-i<=M.whiteboardTabs[e].last_mousex)&&(t+i>=M.whiteboardTabs[e].last_mousey&&a-i<=M.whiteboardTabs[e].last_mousey||a+i>=M.whiteboardTabs[e].last_mousey&&t-i<=M.whiteboardTabs[e].last_mousey)?(M.whiteboardTabs[e].holdMoveOn=!0,M.whiteboardTabs[e].holdCords.start_x=M.whiteboardTabs[e].last_mousex,M.whiteboardTabs[e].holdCords.start_y=M.whiteboardTabs[e].last_mousey):(M.whiteboardTabs[e].holdOn=!1,M.addCommand_WithIntermediate(e,M.whiteboardTabs[e].currentLine),M.whiteboardTabs[e].currentLine={type:"customline",cords:[]},M.whiteboardTabs[e].tempCtx.clearRect(0,0,M.whiteboardTabs[e].canvas.width,M.whiteboardTabs[e].canvas.height))},M.mouseUp=function(e,o){if(!M.whiteboardTabs[o].writeDisabled&&(!M.whiteboardTabs[o].locked||M.isTutor)&&(!i.sessionEnded||M.whiteboardTabs[o].userId==M.userId))if(M.whiteboardTabs[o].mousedown=!1,M.whiteboardTabs[o].holdMoveOn){M.whiteboardTabs[o].holdMoveOn=!1;var s=M.whiteboardTabs[o].mousex-M.whiteboardTabs[o].holdCords.start_x,t=M.whiteboardTabs[o].mousey-M.whiteboardTabs[o].holdCords.start_y;M.whiteboardTabs[o].currentLine.cords[0].mousex=M.whiteboardTabs[o].currentLine.cords[0].mousex+s,M.whiteboardTabs[o].currentLine.cords[0].last_mousex=M.whiteboardTabs[o].currentLine.cords[0].last_mousex+s,M.whiteboardTabs[o].currentLine.cords[0].mousey=M.whiteboardTabs[o].currentLine.cords[0].mousey+t,M.whiteboardTabs[o].currentLine.cords[0].last_mousey=M.whiteboardTabs[o].currentLine.cords[0].last_mousey+t,M.whiteboardTabs[o].holdCords={start_x:0,start_y:0},M.drawTempHoldMove(o,M.whiteboardTabs[o].currentLine.cords[0].last_mousex,M.whiteboardTabs[o].currentLine.cords[0].last_mousey,M.whiteboardTabs[o].currentLine.cords[0].mousex,M.whiteboardTabs[o].currentLine.cords[0].mousey,M.whiteboardTabs[o].currentLine.cords[0].width,M.whiteboardTabs[o].currentLine.type)}else"text"==M.whiteboardTabs[o].tooltype?(M.whiteboardTabs[o].textOn=!0,M.whiteboardTabs[o].holdOn=!0,M.whiteboardTabs[o].currentLine={type:"text",cords:[]},M.whiteboardTabs[o].currentLine.cords.push({mousex:M.whiteboardTabs[o].mousex,mousey:M.whiteboardTabs[o].mousey,last_mousex:M.whiteboardTabs[o].last_mousex,last_mousey:M.whiteboardTabs[o].last_mousey,width:0}),$("#whiteboardText"+M.whiteboardTabs[o].sessionWhiteBoardId).focus(),M.drawTempHoldMove(o,M.whiteboardTabs[o].currentLine.cords[0].last_mousex,M.whiteboardTabs[o].currentLine.cords[0].last_mousey,M.whiteboardTabs[o].currentLine.cords[0].mousex,M.whiteboardTabs[o].currentLine.cords[0].last_mousey-M.whiteboardTabs[o].fontSize,M.whiteboardTabs[o].currentLine.cords[0].width,M.whiteboardTabs[o].currentLine.type)):"equation"==M.whiteboardTabs[o].tooltype?(M.whiteboardTabs[o].equationOn=!0,M.whiteboardTabs[o].holdOn=!0,M.whiteboardTabs[o].currentLine={type:"equation",cords:[]},M.whiteboardTabs[o].currentLine.cords.push({mousex:M.whiteboardTabs[o].mousex,mousey:M.whiteboardTabs[o].mousey,last_mousex:M.whiteboardTabs[o].last_mousex,last_mousey:M.whiteboardTabs[o].last_mousey,width:0}),$("#whiteboardEquation"+M.whiteboardTabs[o].sessionWhiteBoardId).focus(),M.drawTempHoldMove(o,M.whiteboardTabs[o].currentLine.cords[0].last_mousex,M.whiteboardTabs[o].currentLine.cords[0].last_mousey,M.whiteboardTabs[o].currentLine.cords[0].mousex,M.whiteboardTabs[o].currentLine.cords[0].last_mousey-M.whiteboardTabs[o].fontSize,M.whiteboardTabs[o].currentLine.cords[0].width,M.whiteboardTabs[o].currentLine.type)):"fill"==M.whiteboardTabs[o].tooltype?M.addCommand(o,{type:"fill",cords:[{last_mousex:parseInt(e.offsetX/M.zoomSet[M.whiteboardTabs[o].zoomIndex]),last_mousey:parseInt(e.offsetY/M.zoomSet[M.whiteboardTabs[o].zoomIndex]),color:M.whiteboardTabs[o].fillColor}]}):0<M.whiteboardTabs[o].currentLine.cords.length&&("draw"==M.whiteboardTabs[o].tooltype||"erase"==M.whiteboardTabs[o].tooltype?(M.addCommand(o,M.whiteboardTabs[o].currentLine),M.whiteboardTabs[o].currentLine={type:"customline",cords:[]}):"selection"==M.whiteboardTabs[o].tooltype?(M.whiteboardTabs[o].selectionOn=!0,M.whiteboardTabs[o].selectionMoveOn=!1):("line"==M.whiteboardTabs[o].tooltype&&(M.whiteboardTabs[o].currentLine.cords[0].mousex=M.whiteboardTabs[o].last_mousex,M.whiteboardTabs[o].currentLine.cords[0].mousey=M.whiteboardTabs[o].last_mousey),M.whiteboardTabs[o].holdOn=!0,M.drawTempHoldMove(o,M.whiteboardTabs[o].currentLine.cords[0].last_mousex,M.whiteboardTabs[o].currentLine.cords[0].last_mousey,M.whiteboardTabs[o].mousex,M.whiteboardTabs[o].mousey,M.whiteboardTabs[o].currentLine.cords[0].width,M.whiteboardTabs[o].currentLine.type)))},M.mouseMove=function(e,o){M.whiteboardTabs[o].mousex=parseInt(e.offsetX/M.zoomSet[M.whiteboardTabs[o].zoomIndex]),M.whiteboardTabs[o].mousey=parseInt(e.offsetY/M.zoomSet[M.whiteboardTabs[o].zoomIndex]);var s=M.whiteboardTabs[o].color,t=M.whiteboardTabs[o].width,n=M.whiteboardTabs[o].fillOn,a=M.whiteboardTabs[o].fillColor;if("erase"==M.whiteboardTabs[o].tooltype&&(s="White"),("draw"==M.whiteboardTabs[o].tooltype||"erase"==M.whiteboardTabs[o].tooltype)&&0<M.whiteboardTabs[o].last_mousex&&0<M.whiteboardTabs[o].last_mousey&&M.whiteboardTabs[o].mousedown)M.whiteboardTabs[o].currentLine.type="customline",M.whiteboardTabs[o].currentLine.cords.push({mousex:M.whiteboardTabs[o].mousex,mousey:M.whiteboardTabs[o].mousey,last_mousex:M.whiteboardTabs[o].last_mousex,last_mousey:M.whiteboardTabs[o].last_mousey,color:s,width:t,fillOn:!1,fillColor:null}),M.drawCustomLine(M.whiteboardTabs[o].ctx,M.whiteboardTabs[o].last_mousex,M.whiteboardTabs[o].last_mousey,M.whiteboardTabs[o].mousex,M.whiteboardTabs[o].mousey,s,t);else if(0<M.whiteboardTabs[o].last_mousex&&0<M.whiteboardTabs[o].last_mousey&&M.whiteboardTabs[o].mousedown)if("selection"==M.whiteboardTabs[o].tooltype)M.whiteboardTabs[o].selectionMoveOn?(M.whiteboardTabs[o].tempCtx.clearRect(0,0,M.whiteboardTabs[o].canvas.width,M.whiteboardTabs[o].canvas.height),M.whiteboardTabs[o].currentLine.type="move",1<M.whiteboardTabs[o].currentLine.cords.length?(M.whiteboardTabs[o].currentLine.cords[1].mousex=M.whiteboardTabs[o].mousex,M.whiteboardTabs[o].currentLine.cords[1].mousey=M.whiteboardTabs[o].mousey):M.whiteboardTabs[o].currentLine.cords.push({mousex:M.whiteboardTabs[o].mousex,mousey:M.whiteboardTabs[o].mousey,last_mousex:M.whiteboardTabs[o].mousex,last_mousey:M.whiteboardTabs[o].mousey,color:s,width:t}),M.drawTempMove(o,M.whiteboardTabs[o].currentLine.cords[0].last_mousex,M.whiteboardTabs[o].currentLine.cords[0].last_mousey,M.whiteboardTabs[o].currentLine.cords[0].mousex,M.whiteboardTabs[o].currentLine.cords[0].mousey,M.whiteboardTabs[o].currentLine.cords[1].last_mousex,M.whiteboardTabs[o].currentLine.cords[1].last_mousey,M.whiteboardTabs[o].mousex,M.whiteboardTabs[o].mousey)):(M.commonShapeMouseMoveSetup(o,s,t),M.drawTempSelection(o,M.whiteboardTabs[o].currentLine.cords[0].last_mousex,M.whiteboardTabs[o].currentLine.cords[0].last_mousey,M.whiteboardTabs[o].mousex,M.whiteboardTabs[o].mousey));else if(M.whiteboardTabs[o].holdMoveOn){M.basicShapeMouseMoveSetup(o);var i=M.whiteboardTabs[o].mousex-M.whiteboardTabs[o].holdCords.start_x,r=M.whiteboardTabs[o].mousey-M.whiteboardTabs[o].holdCords.start_y;M.commonShapeMouseMoveDraw(o,M.whiteboardTabs[o].tooltype,M.whiteboardTabs[o].currentLine.cords[0].last_mousex+i,M.whiteboardTabs[o].currentLine.cords[0].last_mousey+r,M.whiteboardTabs[o].currentLine.cords[0].mousex+i,M.whiteboardTabs[o].currentLine.cords[0].mousey+r,s,t,n,a)}else M.whiteboardTabs[o].textOn||M.whiteboardTabs[o].equationOn||(M.commonShapeMouseMoveSetup(o,s,t),M.commonShapeMouseMoveDraw(o,M.whiteboardTabs[o].tooltype,M.whiteboardTabs[o].currentLine.cords[0].last_mousex,M.whiteboardTabs[o].currentLine.cords[0].last_mousey,M.whiteboardTabs[o].mousex,M.whiteboardTabs[o].mousey,s,t,n,a));M.whiteboardTabs[o].last_mousex=M.whiteboardTabs[o].mousex,M.whiteboardTabs[o].last_mousey=M.whiteboardTabs[o].mousey},M.basicShapeMouseMoveSetup=function(e){M.whiteboardTabs[e].tempCtx.clearRect(0,0,M.whiteboardTabs[e].canvas.width,M.whiteboardTabs[e].canvas.height),M.whiteboardTabs[e].currentLine.type=M.whiteboardTabs[e].tooltype,M.whiteboardTabs[e].currentLine.fillOn=M.whiteboardTabs[e].fillOn,M.whiteboardTabs[e].currentLine.fillColor=M.whiteboardTabs[e].fillColor},M.commonShapeMouseMoveSetup=function(e,o,s){M.basicShapeMouseMoveSetup(e),0<M.whiteboardTabs[e].currentLine.cords.length?(M.whiteboardTabs[e].currentLine.cords[0].mousex=M.whiteboardTabs[e].mousex,M.whiteboardTabs[e].currentLine.cords[0].mousey=M.whiteboardTabs[e].mousey):M.whiteboardTabs[e].currentLine.cords.push({mousex:0,mousey:0,last_mousex:M.whiteboardTabs[e].mousex,last_mousey:M.whiteboardTabs[e].mousey,color:o,width:s})},M.commonShapeMouseMoveDraw=function(e,o,s,t,n,a,i,r,c,d){"line"==o?M.drawTempLine(e,s,t,n,a,i,r,c):"rectangle"==o?M.drawTempRectangle(e,s,t,n,a,i,r,c,d):"circle"==o?M.drawTempCircle(e,s,t,n,a,i,r,c,d):"ellipse"==o?M.drawTempEllipse(e,s,t,n,a,i,r,c,d):"triangle"==o?M.drawTempTriangle(e,s,t,n,a,i,r,c,d):"triangleR"==o?M.drawTempTriangleR(e,s,t,n,a,i,r,c,d):"pentagon"==o?M.drawTempPentagon(e,s,t,n,a,i,r,c,d):"hexagon"==o?M.drawTempHexagon(e,s,t,n,a,i,r,c,d):"octagon"==o?M.drawTempOctagon(e,s,t,n,a,i,r,c,d):"rhombus"==o?M.drawTempRhombus(e,s,t,n,a,i,r,c,d):"cuboid"==o?M.drawTempCuboid(e,s,t,n,a,i,r,c,d):"text"==o&&M.drawTempText(e,s,t)},M.drawCanvas=function(e,o,s,t,n,a){for(var i=o;i<s.length;i++)if("customline"==s[i].type){a&&(!n||i+10>=s.length)&&M.replicateForUndo(e,s[i]);for(var r=0;r<s[i].cords.length;r++)M.drawCustomLine(t,s[i].cords[r].last_mousex,s[i].cords[r].last_mousey,s[i].cords[r].mousex,s[i].cords[r].mousey,s[i].cords[r].color,s[i].cords[r].width)}else if("line"==s[i].type)a&&(!n||i+10>=s.length)&&M.replicateForUndo(e,s[i]),M.drawLine(t,s[i].cords[0].last_mousex,s[i].cords[0].last_mousey,s[i].cords[0].mousex,s[i].cords[0].mousey,s[i].cords[0].color,s[i].cords[0].width);else if("rectangle"==s[i].type)a&&(!n||i+10>=s.length)&&M.replicateForUndo(e,s[i]),M.drawRectangle(t,s[i].cords[0].last_mousex,s[i].cords[0].last_mousey,s[i].cords[0].mousex,s[i].cords[0].mousey,s[i].cords[0].color,s[i].cords[0].width,s[i].fillOn,s[i].fillColor);else if("circle"==s[i].type)a&&(!n||i+10>=s.length)&&M.replicateForUndo_Circle(e,s[i]),M.drawCircle(t,s[i].cords[0].last_mousex,s[i].cords[0].last_mousey,s[i].cords[0].mousex,s[i].cords[0].mousey,s[i].cords[0].color,s[i].cords[0].width,s[i].fillOn,s[i].fillColor);else if("ellipse"==s[i].type)a&&(!n||i+10>=s.length)&&M.replicateForUndo(e,s[i]),M.drawEllipse(t,s[i].cords[0].last_mousex,s[i].cords[0].last_mousey,s[i].cords[0].mousex,s[i].cords[0].mousey,s[i].cords[0].color,s[i].cords[0].width,s[i].fillOn,s[i].fillColor);else if("triangle"==s[i].type)a&&(!n||i+10>=s.length)&&M.replicateForUndo(e,s[i]),M.drawTriangle(t,s[i].cords[0].last_mousex,s[i].cords[0].last_mousey,s[i].cords[0].mousex,s[i].cords[0].mousey,s[i].cords[0].color,s[i].cords[0].width,s[i].fillOn,s[i].fillColor);else if("triangleR"==s[i].type)a&&(!n||i+10>=s.length)&&M.replicateForUndo(e,s[i]),M.drawTriangleR(t,s[i].cords[0].last_mousex,s[i].cords[0].last_mousey,s[i].cords[0].mousex,s[i].cords[0].mousey,s[i].cords[0].color,s[i].cords[0].width,s[i].fillOn,s[i].fillColor);else if("pentagon"==s[i].type)a&&(!n||i+10>=s.length)&&M.replicateForUndo(e,s[i]),M.drawPentagon(t,s[i].cords[0].last_mousex,s[i].cords[0].last_mousey,s[i].cords[0].mousex,s[i].cords[0].mousey,s[i].cords[0].color,s[i].cords[0].width,s[i].fillOn,s[i].fillColor);else if("hexagon"==s[i].type)a&&(!n||i+10>=s.length)&&M.replicateForUndo(e,s[i]),M.drawHexagon(t,s[i].cords[0].last_mousex,s[i].cords[0].last_mousey,s[i].cords[0].mousex,s[i].cords[0].mousey,s[i].cords[0].color,s[i].cords[0].width,s[i].fillOn,s[i].fillColor);else if("octagon"==s[i].type)a&&(!n||i+10>=s.length)&&M.replicateForUndo(e,s[i]),M.drawOctagon(t,s[i].cords[0].last_mousex,s[i].cords[0].last_mousey,s[i].cords[0].mousex,s[i].cords[0].mousey,s[i].cords[0].color,s[i].cords[0].width,s[i].fillOn,s[i].fillColor);else if("rhombus"==s[i].type)a&&(!n||i+10>=s.length)&&M.replicateForUndo(e,s[i]),M.drawRhombus(t,s[i].cords[0].last_mousex,s[i].cords[0].last_mousey,s[i].cords[0].mousex,s[i].cords[0].mousey,s[i].cords[0].color,s[i].cords[0].width,s[i].fillOn,s[i].fillColor);else if("cuboid"==s[i].type)a&&(!n||i+10>=s.length)&&M.replicateForUndo(e,s[i]),M.drawCuboid(t,s[i].cords[0].last_mousex,s[i].cords[0].last_mousey,s[i].cords[0].mousex,s[i].cords[0].mousey,s[i].cords[0].color,s[i].cords[0].width,s[i].fillOn,s[i].fillColor);else if("clear"==s[i].type)a&&(!n||i+10>=s.length)&&M.replicateForUndo_Clear(e),M.drawClear(t,M.whiteboardTabs[e].canvas.width,M.whiteboardTabs[e].canvas.height);else if("move"==s[i].type)a&&(!n||i+10>=s.length)&&M.replicateForUndo_Move(e,s[i]),M.drawMove(t,s[i].cords[0].last_mousex,s[i].cords[0].last_mousey,s[i].cords[0].mousex,s[i].cords[0].mousey,s[i].cords[1].last_mousex,s[i].cords[1].last_mousey,s[i].cords[1].mousex,s[i].cords[1].mousey);else if("load"==s[i].type)a&&(!n||i+10>=s.length)&&M.replicateForUndo_Load(e),0==n?M.drawLoad(e,t,s[i].sessionWhiteBoardId,s[i].createdDate,s[i].x,s[i].y):1==n&&M.drawCanvas(e,0,M.whiteboardTabs[e].loadSet,t,void 0,a);else if("text"==s[i].type)a&&(!n||i+10>=s.length)&&M.replicateForUndo(e,s[i]),M.drawText(t,s[i].cords[0].last_mousex,s[i].cords[0].last_mousey,s[i].text,s[i].textColor,s[i].textStyle);else{if("equation"==s[i].type){a&&(!n||i+10>=s.length)&&M.replicateForUndo(e,s[i]);var c=s[i].textStyle.split(" ");M.drawEquation(e,t,s[i].cords[0].last_mousex,s[i].cords[0].last_mousey,s[i].text,s[i].textColor,c[0],c[1],i,s,n);break}if("image"==s[i].type){M.drawImage(e,t,s[i].cords[0].last_mousex,s[i].cords[0].last_mousey,s[i].src,i,s,n,a&&(!n||i+10>=s.length));break}"fill"==s[i].type?M.drawFill(t,M.whiteboardTabs[e].canvas.width,M.whiteboardTabs[e].canvas.height,s[i].cords[0].last_mousex,s[i].cords[0].last_mousey,s[i].cords[0].color,a&&(!n||i+10>=s.length)):"resize"==s[i].type?(a&&(!n||i+10>=s.length)&&M.replicateForUndo_Resize(e,s[i]),M.resize(e,s[i].cords[0].last_mousex,s[i].cords[0].last_mousey,s[i].cords[0].mousex,s[i].cords[0].mousey)):alert("element not found")}},M.replicateForUndo=function(e,o){if(console.log(o),0<o.cords.length){var s=null==o.cords[0].mousex?o.cords[0].last_mousex:o.cords[0].mousex,t=s,n=null==o.cords[0].mousey?o.cords[0].last_mousey:o.cords[0].mousey,a=n;o.cords.forEach(function(e){e.mousex<s?s=e.mousex:e.mousex>t&&(t=e.mousex),e.last_mousex<s?s=e.last_mousex:e.last_mousex>t&&(t=e.last_mousex),e.mousey<n?n=e.mousey:e.mousey>a&&(a=e.mousey),e.last_mousey<n?n=e.last_mousey:e.last_mousey>a&&(a=e.last_mousey)}),M.shiftAndPushUndoHolder(e,{imgData:M.whiteboardTabs[e].ctx.getImageData(s-o.cords[0].width,n-o.cords[0].width,t-s+2*o.cords[0].width,a-n+2*o.cords[0].width),x:s-o.cords[0].width,y:n-o.cords[0].width,type:"minMax"})}},M.replicateForUndo_Circle=function(e,o){var s=o.cords[0].mousex-o.cords[0].last_mousex,t=o.cords[0].mousey-o.cords[0].last_mousey;Math.abs(s)>Math.abs(t)?t=0<t?Math.abs(s):-1*Math.abs(s):s=0<s?Math.abs(t):-1*Math.abs(t),console.log(o),console.log(s+2*(0<s?1:-1)*o.cords[0].width),M.shiftAndPushUndoHolder(e,{imgData:M.whiteboardTabs[e].ctx.getImageData((0<s?o.cords[0].last_mousex:o.cords[0].last_mousex+s)-o.cords[0].width,(0<t?o.cords[0].last_mousey:o.cords[0].last_mousey+t)-o.cords[0].width,Math.abs(s)+2*o.cords[0].width,Math.abs(t)+2*o.cords[0].width),x:(0<s?o.cords[0].last_mousex:o.cords[0].last_mousex+s)-o.cords[0].width,y:(0<t?o.cords[0].last_mousey:o.cords[0].last_mousey+t)-o.cords[0].width,type:"minMax"})},M.replicateForUndo_Resize=function(e,o){var s=null;o.cords[0].last_mousex>o.cords[0].mousex&&(s=M.whiteboardTabs[e].ctx.getImageData(o.cords[0].mousex-o.cords[0].last_mousex,0,o.cords[0].last_mousex,o.cords[0].last_mousey)),o.cords[0].last_mousey>o.cords[0].mousey&&(s=M.whiteboardTabs[e].ctx.getImageData(0,o.cords[0].mousey-o.cords[0].last_mousey,o.cords[0].last_mousex,o.cords[0].last_mousey)),M.shiftAndPushUndoHolder(e,{dataX:s,prevX:o.cords[0].last_mousex,nextX:o.cords[0].mousex,dataY:null,prevY:o.cords[0].last_mousey,nextY:o.cords[0].mousey,type:"resize"})},M.replicateForUndo_Clear=function(e){M.shiftAndPushUndoHolder(e,{imgData:M.whiteboardTabs[e].ctx.getImageData(0,0,M.whiteboardTabs[e].sizeX,M.whiteboardTabs[e].sizeY),x:0,y:0,type:"minMax"})},M.replicateForUndo_Load=function(e){M.whiteboardTabs[e].undoHolder=[]},M.replicateForUndo_Move=function(e,o){M.shiftAndPushUndoHolder(e,{imgData1:M.whiteboardTabs[e].ctx.getImageData(o.cords[0].last_mousex,o.cords[0].last_mousey,o.cords[0].mousex-o.cords[0].last_mousex,o.cords[0].mousey-o.cords[0].last_mousey),x1:o.cords[0].last_mousex,y1:o.cords[0].last_mousey,imgData2:M.whiteboardTabs[e].ctx.getImageData(o.cords[0].mousex-o.cords[0].last_mousex<0?o.cords[0].last_mousex+(o.cords[1].mousex-o.cords[1].last_mousex)+(o.cords[0].mousex-o.cords[0].last_mousex):o.cords[0].last_mousex+(o.cords[1].mousex-o.cords[1].last_mousex),o.cords[0].mousey-o.cords[0].last_mousey<0?o.cords[0].last_mousey+(o.cords[1].mousey-o.cords[1].last_mousey)+(o.cords[0].mousey-o.cords[0].last_mousey):o.cords[0].last_mousey+(o.cords[1].mousey-o.cords[1].last_mousey),o.cords[0].mousex-o.cords[0].last_mousex,o.cords[0].mousey-o.cords[0].last_mousey),x2:o.cords[1].last_mousex,y2:o.cords[1].last_mousey,type:"move"})},M.replicateForUndo_Image=function(e,o,s,t){M.shiftAndPushUndoHolder(e,{imgData:M.whiteboardTabs[e].getImageData(o.cords[0].last_mousex,o.cords[0].last_mousey,s,t),x:o.cords[0].last_mousex,y:o.cords[0].last_mousey,type:"minMax"})},M.replicateForUndo_Fill=function(e,o,s,t,n){M.shiftAndPushUndoHolder(e,{imgData:M.whiteboardTabs[e].getImageData(o,s,t,n),x:o,y:s,type:"minMax"})},M.shiftAndPushUndoHolder=function(e,o){10<=M.whiteboardTabs[e].undoHolder.length&&M.whiteboardTabs[e].undoHolder.shift(),M.whiteboardTabs[e].undoHolder.push(o),console.log(M.whiteboardTabs[e].undoHolder)},M.applyUndo=function(e){if(0<M.whiteboardTabs[e].undoHolder.length){var o=M.whiteboardTabs[e].undoHolder.pop();"minMax"==o.type?M.whiteboardTabs[e].ctx.putImageData(o.imgData,o.x,o.y):"resize"==o.type?(M.resize(e,o.nextX,o.nextY,o.prevX,o.prevY),null!=o.dataX&&M.whiteboardTabs[e].ctx.putImageData(o.dataX,o.prevX,0),null!=o.dataY&&M.whiteboardTabs[e].ctx.putImageData(o.dataY,0,o.prevY)):"move"==o.type&&(M.whiteboardTabs[e].ctx.putImageData(o.imgData2,o.x2,o.y2),M.whiteboardTabs[e].ctx.putImageData(o.imgData1,o.x1,o.y1))}},M.removeIntermediate=function(e,o){if(null!=o&&null!=o)for(var s=0;s<M.whiteboardTabs[e].intermediateStore.length;s++)if(M.whiteboardTabs[e].intermediateStore[s].intermediateId==o){M.whiteboardTabs[e].intermediateStore.splice(s,1),M.whiteboardTabs[e].intermediateCtx.clearRect(0,0,M.whiteboardTabs[e].canvas.width,M.whiteboardTabs[e].canvas.height),M.drawCanvas(e,0,M.whiteboardTabs[e].intermediateStore,M.whiteboardTabs[e].intermediateCtx,!1,!1);break}},M.whiteboardConnection.on("draw",function(e,o){for(var s=0;s<M.whiteboardTabs.length;s++)null!=M.whiteboardTabs[s]&&M.whiteboardTabs[s].sessionWhiteBoardId==e&&(0<M.whiteboardTabs[s].undoStore.length&&(M.whiteboardTabs[s].undoStore=[]),M.whiteboardTabs[s].canvasData.push(o.canvasData),M.drawCanvas(s,M.whiteboardTabs[s].canvasData.length-1,M.whiteboardTabs[s].canvasData,M.whiteboardTabs[s].ctx,!1,!0),M.removeIntermediate(s,o.intermediateId),M.break)}),M.whiteboardConnection.on("undo",function(e,o){for(var s=0;s<M.whiteboardTabs.length;s++)if(null!=M.whiteboardTabs[s]&&M.whiteboardTabs[s].sessionWhiteBoardId==e)for(var t=M.whiteboardTabs[s].canvasData.length-1;0<=t;t--)if(M.whiteboardTabs[s].canvasData[t].sessionWhiteBoardHistoryId==o){M.whiteboardTabs[s].undoStore.push(o),M.whiteboardTabs[s].canvasData.splice(t,1),M.applyUndo(s);break}}),M.whiteboardConnection.on("redo",function(e,o,s){for(var t=0;t<M.whiteboardTabs.length;t++)if(null!=M.whiteboardTabs[t]&&M.whiteboardTabs[t].sessionWhiteBoardId==e){for(var n=M.whiteboardTabs[t].undoStore.length-1;0<=n;n--)if(o==M.whiteboardTabs[t].undoStore[n]){M.whiteboardTabs[t].undoStore.splice(n,1),M.whiteboardTabs[t].canvasData.push(s.canvasData),M.drawCanvas(t,M.whiteboardTabs[t].canvasData.length-1,M.whiteboardTabs[t].canvasData,M.whiteboardTabs[t].ctx,!1,!0);break}M.whiteboardTabs[t].redoInProgress&&(M.whiteboardTabs[t].redoInProgress=!1);break}}),M.whiteboardConnection.on("clear",function(e,o){for(var s=0;s<M.whiteboardTabs.length;s++)null!=M.whiteboardTabs[s]&&M.whiteboardTabs[s].sessionWhiteBoardId==e&&(M.drawClear(M.whiteboardTabs[s].ctx,M.whiteboardTabs[s].canvas.width,M.whiteboardTabs[s].canvas.height),M.whiteboardTabs[s].canvasData.push(o.canvasData))}),M.whiteboardConnection.on("share",function(e,o){for(var s=0;s<o.length;s++)if(M.userId==o[s].userId){if(o[s].read){if(!o[s].previousRead&&o[s].read)c.getSharedBoard({classSessionId:M.classSessionId,sessionWhiteBoardId:e,userId:M.userId},function(e){M.whiteboardTabs.push(e),M.embelishWhiteboardTab(M.whiteboardTabs.length-1),setTimeout(function(){$(document).ioTabs(),M.createColourPickers()},200),toastr.clear(),toastr.info("A whiteboard was shared with you")},function(e){});else if(o[s].previousWrite!=o[s].write){for(var t=0;t<M.whiteboardTabs.length;t++)if(null!=M.whiteboardTabs[t]&&M.whiteboardTabs[t].sessionWhiteBoardId==e){M.whiteboardTabs[t].writeDisabled=!o[s].write;break}toastr.clear(),toastr.info("A whiteboard write permission was updated")}}else{for(var n=0;n<M.whiteboardTabs.length;n++)if(null!=M.whiteboardTabs[n]&&M.whiteboardTabs[n].sessionWhiteBoardId==e){M.closeTab(n);break}toastr.clear(),toastr.info("A whiteboard stopped being shared")}break}}),M.whiteboardConnection.on("closed",function(e){for(var o=0;o<M.whiteboardTabs.length;o++)if(null!=M.whiteboardTabs[o]&&M.whiteboardTabs[o].sessionWhiteBoardId==e){$("#qtntab-title-"+o).hasClass("active")&&$("#qtntab-title-0").click(),M.whiteboardTabs[o]=null,toastr.clear(),toastr.info("A whiteboard stopped being shared");break}}),M.whiteboardConnection.on("named",function(e,o){for(var s=0;s<M.whiteboardTabs.length;s++)if(null!=M.whiteboardTabs[s]&&M.whiteboardTabs[s].sessionWhiteBoardId==e){M.whiteboardTabs[s].name!=o&&(toastr.clear(),toastr.info("'"+M.whiteboardTabs[s].name+"' was renamed to '"+o+"'"),M.whiteboardTabs[s].name=o);break}}),M.whiteboardConnection.on("collaborate",function(e,o){for(var s=0;s<M.whiteboardTabs.length;s++)if(null!=M.whiteboardTabs[s]&&M.whiteboardTabs[s].sessionWhiteBoardId==e){M.whiteboardTabs[s].tutorCollaborating=!0,toastr.clear(),toastr.info("The tutor is now viewing '"+o+"'");break}}),M.whiteboardConnection.on("stopCollaborate",function(e,o){for(var s=0;s<M.whiteboardTabs.length;s++)if(null!=M.whiteboardTabs[s]&&M.whiteboardTabs[s].sessionWhiteBoardId==e){M.whiteboardTabs[s].tutorCollaborating=!1,toastr.clear(),toastr.info("The tutor has stopped viewing '"+o+"'");break}}),M.addCommand_WithIntermediate=function(e,o){if(M.whiteboardTabs[e].writeDisabled)M.noWritePermissionsMessage();else if(M.whiteboardTabs[e].locked&&!M.isTutor||i.sessionEnded&&M.whiteboardTabs[e].userId!=M.userId)M.whiteboardLockedMessage();else{o.intermediateId=M.uuIdGeneration(),M.whiteboardTabs[e].intermediateStore.push(o),M.drawCanvas(e,M.whiteboardTabs[e].intermediateStore.length-1,M.whiteboardTabs[e].intermediateStore,M.whiteboardTabs[e].intermediateCtx,!1,!1);var s={sessionWhiteBoardId:M.whiteboardTabs[e].sessionWhiteBoardId,jsonData:JSON.stringify(o),intermediateId:o.intermediateId};c.addCommand({classSessionId:M.classSessionId},s,function(e){},function(e){})}},M.addCommand=function(e,o){if(M.whiteboardTabs[e].writeDisabled)M.noWritePermissionsMessage();else if(M.whiteboardTabs[e].locked&&!M.isTutor||i.sessionEnded&&M.whiteboardTabs[e].userId!=M.userId)M.whiteboardLockedMessage();else{var s={sessionWhiteBoardId:M.whiteboardTabs[e].sessionWhiteBoardId,jsonData:JSON.stringify(o)};c.addCommand({classSessionId:M.classSessionId},s,function(e){},function(e){})}},M.addLoadCommand=function(e,o){if(M.whiteboardTabs[e].writeDisabled)M.noWritePermissionsMessage();else if(M.whiteboardTabs[e].locked&&!M.isTutor||i.sessionEnded&&M.whiteboardTabs[e].userId!=M.userId)M.whiteboardLockedMessage();else{var s={sessionWhiteBoardId:M.whiteboardTabs[e].sessionWhiteBoardId,jsonData:JSON.stringify(o)};c.addLoadCommand({classSessionId:M.classSessionId},s,function(e){},function(e){})}},M.undo=function(e){M.whiteboardTabs[e].writeDisabled?M.noWritePermissionsMessage():M.whiteboardTabs[e].locked&&!M.isTutor||i.sessionEnded&&M.whiteboardTabs[e].userId!=M.userId?M.whiteboardLockedMessage():M.whiteboardTabs[e].holdOn||M.whiteboardTabs[e].selectionOn?(M.whiteboardTabs[e].equationOn=!1,M.whiteboardTabs[e].textOn=!1,M.whiteboardTabs[e].holdOn=!1,M.whiteboardTabs[e].selectionOn=!1,M.whiteboardTabs[e].currentLine={type:"customline",cords:[]},M.whiteboardTabs[e].tempCtx.clearRect(0,0,M.whiteboardTabs[e].canvas.width,M.whiteboardTabs[e].canvas.height)):null!=M.whiteboardTabs[e].canvasData[M.whiteboardTabs[e].canvasData.length-1]&&"load"!=M.whiteboardTabs[e].canvasData[M.whiteboardTabs[e].canvasData.length-1].type&&c.undo({classSessionId:M.classSessionId,sessionWhiteBoardId:M.whiteboardTabs[e].sessionWhiteBoardId,sessionWhiteBoardHistoryId:M.whiteboardTabs[e].canvasData[M.whiteboardTabs[e].canvasData.length-1].sessionWhiteBoardHistoryId},function(e){},function(e){})},M.redo=function(e){M.whiteboardTabs[e].writeDisabled?M.noWritePermissionsMessage():M.whiteboardTabs[e].locked&&!M.isTutor||i.sessionEnded&&M.whiteboardTabs[e].userId!=M.userId?M.whiteboardLockedMessage():0<M.whiteboardTabs[e].undoStore.length&&!M.whiteboardTabs[e].redoInProgress&&(M.whiteboardTabs[e].redoInProgress=!0,c.redo({classSessionId:M.classSessionId,sessionWhiteBoardId:M.whiteboardTabs[e].sessionWhiteBoardId,sessionWhiteBoardHistoryId:M.whiteboardTabs[e].undoStore[M.whiteboardTabs[e].undoStore.length-1]},function(e){},function(e){}))},M.clear=function(e){M.whiteboardTabs[e].writeDisabled?M.noWritePermissionsMessage():M.whiteboardTabs[e].locked&&!M.isTutor||i.sessionEnded&&M.whiteboardTabs[e].userId!=M.userId?M.whiteboardLockedMessage():c.clear({classSessionId:M.classSessionId,sessionWhiteBoardId:M.whiteboardTabs[e].sessionWhiteBoardId},function(e){},function(e){})},M.duplicate=function(e){var o={sessionWhiteBoardId:void 0,classSessionId:M.classSessionId,sessionGroupId:null,userId:M.userId,name:"Individual",loadFromWhiteBoardId:M.whiteboardTabs[e].sessionWhiteBoardId,loadFromDate:null};c.openIndividualBoard({classSessionId:M.classSessionId},o,function(e){M.newTab(e)},function(e){})},M.save=function(o,s){s?0<M.whiteboardTabs[o].canvasData.length&&"load"!=M.whiteboardTabs[o].canvasData[M.whiteboardTabs[o].canvasData.length-1].type&&M.performSave(o,s,M.whiteboardTabs[o].name):0<M.whiteboardTabs[o].canvasData.length?a.showModal({templateUrl:"/app/classroom/whiteboardSaveModal.html",controller:"WhiteboardSaveModalController",inputs:{classSessionId:M.classSessionId,name:M.whiteboardTabs[o].name}}).then(function(e){e.close.then(function(e){null!=e&&M.performSave(o,s,e)})}):(toastr.clear(),toastr.info("Nothing to save"))},M.performSave=function(e,o,s){c.save({classSessionId:M.classSessionId},{classSessionId:M.classSessionId,sessionWhiteBoardId:M.whiteboardTabs[e].sessionWhiteBoardId,sessionWhiteBoardHistoryId:M.whiteboardTabs[e].canvasData[M.whiteboardTabs[e].canvasData.length-1].sessionWhiteBoardHistoryId,name:s},function(e){o?(toastr.clear(),toastr.success("State auto-saved")):(toastr.clear(),toastr.success("State saved"))},function(e){})},M.load=function(e,o,s,t,n,a,i){var r={sessionWhiteBoardId:M.whiteboardTabs[e].sessionWhiteBoardId,jsonData:JSON.stringify({type:"load",sessionWhiteBoardId:o,createdDate:s,x:a,y:i})};c.addLoadCommand({classSessionId:M.classSessionId,sizeX:a,sizeY:i},r,function(e){},function(e){})},M.tutorStoppedCollaborating=function(e,o){c.tutorStoppedCollaborating({classSessionId:M.classSessionId,sessionWhiteBoardId:e},{name:o},function(e){},function(e){})},M.alterSize=function(e){var o=document.getElementById("canvas_"+e),s=o.height,t=o.width;if(M.whiteboardTabs[e].sizeX!=o.width||M.whiteboardTabs[e].sizeY!=o.height){M.whiteboardTabs[e].sizeX<=0&&(M.whiteboardTabs[e].sizeX=300),M.whiteboardTabs[e].sizeY<=0&&(M.whiteboardTabs[e].sizeY=300);var n={sessionWhiteBoardId:M.whiteboardTabs[e].sessionWhiteBoardId,userId:M.userId,jsonData:JSON.stringify({type:"resize",cords:[{last_mousex:t,last_mousey:s,mousex:M.whiteboardTabs[e].sizeX,mousey:M.whiteboardTabs[e].sizeY}]})};c.alterSize({classSessionId:M.classSessionId,sizeX:M.whiteboardTabs[e].sizeX,sizeY:M.whiteboardTabs[e].sizeY},n,function(e){},function(e){})}},M.drawCustomLine=function(e,o,s,t,n,a,i){e.beginPath(),M.assignBasicDrawParams(e,a,i),e.moveTo(o,s),e.lineTo(t,n),e.stroke(),e.closePath()},M.drawLine=function(e,o,s,t,n,a,i){e.beginPath(),M.assignBasicDrawParams(e,a,i),e.moveTo(o,s),e.lineTo(t,n),e.closePath(),e.stroke()},M.drawRectangle=function(e,o,s,t,n,a,i,r,c){e.beginPath(),M.assignBasicDrawParams(e,a,i),e.rect(o,s,t-o,n-s),e.closePath(),e.stroke(),M.assignFillDrawParams(e,r,c)},M.drawMove=function(e,o,s,t,n,a,i,r,c){var d=e.getImageData(o,s,t-o,n-s);e.beginPath(),M.assignBasicDrawParams(e,"#FFFFFF",1),e.rect(o,s,t-o,n-s),e.closePath(),e.stroke(),M.assignFillDrawParams(e,!0,"#FFFFFF"),e.putImageData(d,t-o<0?o+(r-a)+(t-o):o+(r-a),n-s<0?s+(c-i)+(n-s):s+(c-i))},M.drawCircle=function(e,o,s,t,n,a,i,r,c){var d=0,l=0,u=0,p=t-o,h=n-s;u=Math.abs(p)>Math.abs(h)?(p=Math.abs(p),d=(t+o)/2,l=s+(0<h?p:-1*p)/2,p/2):(h=Math.abs(h),l=(n+s)/2,d=o+(0<p?h:-1*h)/2,h/2),e.beginPath(),M.assignBasicDrawParams(e,a,i),e.arc(d,l,u,0,2*Math.PI),e.closePath(),e.stroke(),M.assignFillDrawParams(e,r,c)},M.drawEllipse=function(e,o,s,t,n,a,i,r,c){var d=(s+n)/2;e.beginPath(),M.assignBasicDrawParams(e,a,i),e.moveTo(o,d),e.bezierCurveTo(o,n,t,n,t,d),e.bezierCurveTo(t,s,o,s,o,d),e.closePath(),e.stroke(),M.assignFillDrawParams(e,r,c)},M.drawTriangle=function(e,o,s,t,n,a,i,r,c){e.beginPath(),M.assignBasicDrawParams(e,a,i),e.moveTo(o,s),e.lineTo(t,s),e.lineTo((t+o)/2,n),e.closePath(),e.stroke(),M.assignFillDrawParams(e,r,c)},M.drawTriangleR=function(e,o,s,t,n,a,i,r,c){e.beginPath(),M.assignBasicDrawParams(e,a,i),e.moveTo(o,s),e.lineTo(t,s),e.lineTo(t,n),e.closePath(),e.stroke(),M.assignFillDrawParams(e,r,c)},M.drawPentagon=function(e,o,s,t,n,a,i,r,c){var d=(o+t)/2,l=(t-o)/2*(1/2.902113),u=.618034*(n-s)/1.618034;e.beginPath(),M.assignBasicDrawParams(e,a,i),e.moveTo(d,s),e.lineTo(t,s+u),e.lineTo(t-l,n),e.lineTo(o+l,n),e.lineTo(o,s+u),e.closePath(),e.stroke(),M.assignFillDrawParams(e,r,c)},M.drawHexagon=function(e,o,s,t,n,a,i,r,c){var d=(s+n)/2,l=.707107*(t-o)/(1+1.414214);e.beginPath(),M.assignBasicDrawParams(e,a,i),e.moveTo(o+l,s),e.lineTo(t-l,s),e.lineTo(t,d),e.lineTo(t-l,n),e.lineTo(o+l,n),e.lineTo(o,d),e.closePath(),e.stroke(),M.assignFillDrawParams(e,r,c)},M.drawOctagon=function(e,o,s,t,n,a,i,r,c){var d=.707107*(t-o)/(1+1.414214),l=.707107*(n-s)/(1+1.414214);e.beginPath(),M.assignBasicDrawParams(e,a,i),e.moveTo(o+d,s),e.lineTo(t-d,s),e.lineTo(t,s+l),e.lineTo(t,n-l),e.lineTo(t-d,n),e.lineTo(o+d,n),e.lineTo(o,n-l),e.lineTo(o,s+l),e.closePath(),e.stroke(),M.assignFillDrawParams(e,r,c)},M.drawRhombus=function(e,o,s,t,n,a,i,r,c){var d=(o+t)/2,l=(s+n)/2;e.beginPath(),M.assignBasicDrawParams(e,a,i),e.moveTo(d,s),e.lineTo(t,l),e.lineTo(d,n),e.lineTo(o,l),e.closePath(),e.stroke(),M.assignFillDrawParams(e,r,c)},M.drawCuboid=function(e,o,s,t,n,a,i,r,c){var d=5*(t-o)/7,l=5*(n-s)/7;e.beginPath(),M.assignBasicDrawParams(e,a,i),e.moveTo(o,s),e.lineTo(o+d,s),e.lineTo(o+d,s+l),e.lineTo(o,s+l),e.closePath(),e.stroke(),M.assignFillDrawParams(e,r,c),e.beginPath(),M.assignBasicDrawParams(e,a,i),e.moveTo(o+d,s),e.lineTo(t,n-l),e.lineTo(t,n),e.lineTo(o+d,s+l),e.closePath(),e.stroke(),M.assignFillDrawParams(e,r,c),e.beginPath(),M.assignBasicDrawParams(e,a,i),e.moveTo(o,s+l),e.lineTo(o+d,s+l),e.lineTo(t,n),e.lineTo(t-d,n),e.closePath(),e.stroke(),M.assignFillDrawParams(e,r,c)},M.drawClear=function(e,o,s){e.fillStyle="#FFFFFF",e.fillRect(0,0,o,s)},M.drawLoad=function(o,e,s,t,n,a){M.drawClear(e,M.whiteboardTabs[o].canvas.width,M.whiteboardTabs[o].canvas.height),M.resize(o,M.whiteboardTabs[o].canvas.width,M.whiteboardTabs[o].canvas.height,n,a),M.whiteboardTabs[o].canvasData=[M.whiteboardTabs[o].canvasData[M.whiteboardTabs[o].canvasData.length-1]],M.whiteboardTabs[o].undoStore=[],c.getLoadData({classSessionId:M.classSessionId},{sessionWhiteBoardId:s,createdAt:t},function(e){M.whiteboardTabs[o].loadSet=e,M.drawCanvas(o,0,M.whiteboardTabs[o].loadSet,M.whiteboardTabs[o].ctx,void 0,!0)},function(e){})},M.drawText=function(e,o,s,t,n,a){e.font=a,e.textBassline="Bottom",e.textAlign="left",e.fillStyle=n,e.fillText(t,o,s)},M.drawEquation=function(t,n,a,i,e,o,s,r,c,d,l){M.applyMathJax(t,e,o,s,r,function(e,o,s){base_image=new Image,base_image.src=e,base_image.onload=function(){n.drawImage(base_image,a,i-base_image.height),M.drawCanvas(t,++c,d,n,l)}})},M.drawImage=function(e,o,s,t,n,a,i,r,c){var d=new Image;d.src="../../../api/classroom/"+M.classSessionId+"/SessionWhiteBoards/getImage/"+M.whiteboardTabs[e].sessionWhiteBoardId+"/"+n,d.onload=function(){M.replicateForUndo(e,i[a],d.width,d.height),c&&o.drawImage(d,s,t),M.drawCanvas(e,++a,i,o,r)}},M.drawFill=function(o,e,s,t,n,a,i){var r=t,c=n,d=t,l=n,u=4*e,p=o.getImageData(0,0,e,s),h=4*(t+n*e),m=p.data[h]-10,b=p.data[h+1]-10,g=p.data[h+2]-10,f=p.data[h+3]-10,T=p.data[h]+10,w=p.data[h+1]+10,v=p.data[h+2]+10,$=p.data[h+3]+10,S=Array(p.data.length/4);(S=Array.apply(!1))[h]=!0;var I=[h],y=0,C=[];do{for(var x=I[y],P=0,k=x-4;k<=x+4;k+=8)S[P=k/4]||Math.floor(k/u)!=Math.floor(x/u)||(p.data[k]>=m&&p.data[k]<=T&&p.data[k+1]>=b&&p.data[k+1]<=w&&p.data[k+2]>=g&&p.data[k+2]<=v&&p.data[k+3]>=f&&p.data[k+3]<=$&&I.push(k),S[P]=!0);for(var D=x-u;D<=x+u;D+=2*u)!S[P=D/4]&&0<=x&&x<p.data.length&&(p.data[D]>=m&&p.data[D]<=T&&p.data[D+1]>=b&&p.data[D+1]<=w&&p.data[D+2]>=g&&p.data[D+2]<=v&&p.data[D+3]>=f&&p.data[D+3]<=$&&I.push(D),S[P]=!0);C.push({x:x/4%e,y:Math.floor(x/u)}),y++}while(y<I.length);i&&(C.forEach(function(e){e.x<r?r=e.x:e.x>d&&(d=e.x),e.y<c?c=e.y:e.y>l&&(l=e.y)}),M.replicateForUndo_Fill(index,r,c,d,l)),M.assignBasicDrawParams(o,a,1),C.forEach(function(e){o.beginPath(),o.moveTo(e.x,e.y),o.lineTo(e.x+1,e.y+1),o.stroke(),o.closePath()})},M.resize=function(e,o,s,t,n){M.whiteboardTabs[e].sizeX=t,M.whiteboardTabs[e].sizeY=n;var a=document.getElementById("canvas_"+e),i=M.whiteboardTabs[e].ctx.getImageData(0,0,o,s);a.setAttribute("width",t),a.setAttribute("height",n),M.whiteboardTabs[e].ctx.putImageData(i,0,0),s<n&&M.drawRectangle(M.whiteboardTabs[e].ctx,0,s,t,n,"#FFFFFF",0,!0,"#FFFFFF"),o<t&&M.drawRectangle(M.whiteboardTabs[e].ctx,o,0,t,n,"#FFFFFF",0,!0,"#FFFFFF");var r=document.getElementById("canvas_temp_"+e),c=M.whiteboardTabs[e].tempCtx.getImageData(0,0,o,s);r.setAttribute("width",t),r.setAttribute("height",n),M.whiteboardTabs[e].tempCtx.putImageData(c,0,0);var d=document.getElementById("canvas_intermediate_"+e),l=M.whiteboardTabs[e].intermediateCtx.getImageData(0,0,o,s);d.setAttribute("width",t),d.setAttribute("height",n),M.whiteboardTabs[e].intermediateCtx.putImageData(l,0,0)},M.drawTempLine=function(e,o,s,t,n,a,i){M.whiteboardTabs[e].tempCtx.beginPath(),M.assignBasicTempDrawParams(e,a,i),M.whiteboardTabs[e].tempCtx.moveTo(o,s),M.whiteboardTabs[e].tempCtx.lineTo(t,n),M.whiteboardTabs[e].tempCtx.closePath(),M.whiteboardTabs[e].tempCtx.stroke()},M.drawTempRectangle=function(e,o,s,t,n,a,i,r,c){M.whiteboardTabs[e].tempCtx.beginPath(),M.assignBasicTempDrawParams(e,a,i),M.whiteboardTabs[e].tempCtx.rect(o,s,t-o,n-s),M.whiteboardTabs[e].tempCtx.closePath(),M.whiteboardTabs[e].tempCtx.stroke(),M.assignFillDrawParams(M.whiteboardTabs[e].tempCtx,r,c)},M.drawTempHoldMove=function(e,o,s,t,n,a,i){if("circle"==i){var r=M.recalculateCircleBox(o,s,t,n);M.drawTempHoldMove_Step2(e,r.start_x,r.start_y,r.x,r.y,a)}else M.drawTempHoldMove_Step2(e,o,s,t,n,a)},M.recalculateCircleBox=function(e,o,s,t){var n=s-e,a=t-o;return Math.abs(n)>Math.abs(a)?t=0<a?o+Math.abs(n):o-Math.abs(n):s=0<n?e+Math.abs(a):e-Math.abs(a),{start_x:e,start_y:o,x:s,y:t}},M.drawTempHoldMove_Step2=function(e,o,s,t,n,a){a=a/2+1,o<t?(o-=a,t+=a):(o+=a,t-=a),s<n?(s-=a,n+=a):(s+=a,n-=a),M.drawTempSelection(e,o,s,t,n)},M.drawTempSelection=function(e,o,s,t,n){M.whiteboardTabs[e].tempCtx.beginPath(),M.assignBasicTempDrawParams(e,"#000000",1),M.whiteboardTabs[e].tempCtx.setLineDash([5,5]),M.whiteboardTabs[e].tempCtx.rect(o,s,t-o,n-s),M.whiteboardTabs[e].tempCtx.closePath(),M.whiteboardTabs[e].tempCtx.stroke()},M.drawTempMove=function(e,o,s,t,n,a,i,r,c){M.whiteboardTabs[e].tempCtx.beginPath(),M.assignBasicTempDrawParams(e,"#FFFFFF",1),M.whiteboardTabs[e].tempCtx.rect(o,s,t-o,n-s),M.whiteboardTabs[e].tempCtx.closePath(),M.whiteboardTabs[e].tempCtx.stroke(),M.assignFillDrawParams(M.whiteboardTabs[e].tempCtx,!0,"#FFFFFF"),M.whiteboardTabs[e].tempCtx.beginPath(),M.assignBasicTempDrawParams(e,"#000000",1),M.whiteboardTabs[e].tempCtx.setLineDash([5,5]),M.whiteboardTabs[e].tempCtx.rect(o+(r-a),s+(c-i),t-o,n-s),M.whiteboardTabs[e].tempCtx.closePath(),M.whiteboardTabs[e].tempCtx.stroke();var d=M.whiteboardTabs[e].ctx.getImageData(o,s,t-o,n-s);M.whiteboardTabs[e].tempCtx.putImageData(d,t-o<0?o+(r-a)+(t-o):o+(r-a),n-s<0?s+(c-i)+(n-s):s+(c-i))},M.drawTempCircle=function(e,o,s,t,n,a,i,r,c){var d=0,l=0,u=0,p=t-o,h=n-s;u=Math.abs(p)>Math.abs(h)?(p=Math.abs(p),d=(t+o)/2,l=s+(0<h?p:-1*p)/2,p/2):(h=Math.abs(h),l=(n+s)/2,d=o+(0<p?h:-1*h)/2,h/2),M.whiteboardTabs[e].tempCtx.beginPath(),M.assignBasicTempDrawParams(e,a,i),M.whiteboardTabs[e].tempCtx.arc(d,l,u,0,2*Math.PI),M.whiteboardTabs[e].tempCtx.closePath(),M.whiteboardTabs[e].tempCtx.stroke(),M.assignFillDrawParams(M.whiteboardTabs[e].tempCtx,r,c)},M.drawTempEllipse=function(e,o,s,t,n,a,i,r,c){var d=(s+n)/2;M.whiteboardTabs[e].tempCtx.beginPath(),M.assignBasicTempDrawParams(e,a,i),M.whiteboardTabs[e].tempCtx.moveTo(o,d),M.whiteboardTabs[e].tempCtx.bezierCurveTo(o,n,t,n,t,d),M.whiteboardTabs[e].tempCtx.bezierCurveTo(t,s,o,s,o,d),M.whiteboardTabs[e].tempCtx.closePath(),M.whiteboardTabs[e].tempCtx.stroke(),M.assignFillDrawParams(M.whiteboardTabs[e].tempCtx,r,c)},M.drawTempTriangle=function(e,o,s,t,n,a,i,r,c){M.whiteboardTabs[e].tempCtx.beginPath(),M.assignBasicTempDrawParams(e,a,i),M.whiteboardTabs[e].tempCtx.moveTo(o,s),M.whiteboardTabs[e].tempCtx.lineTo(t,s),M.whiteboardTabs[e].tempCtx.lineTo((t+o)/2,n),M.whiteboardTabs[e].tempCtx.closePath(),M.whiteboardTabs[e].tempCtx.stroke(),M.assignFillDrawParams(M.whiteboardTabs[e].tempCtx,r,c)},M.drawTempTriangleR=function(e,o,s,t,n,a,i,r,c){M.whiteboardTabs[e].tempCtx.beginPath(),M.assignBasicTempDrawParams(e,a,i),M.whiteboardTabs[e].tempCtx.moveTo(o,s),M.whiteboardTabs[e].tempCtx.lineTo(t,s),M.whiteboardTabs[e].tempCtx.lineTo(t,n),M.whiteboardTabs[e].tempCtx.closePath(),M.whiteboardTabs[e].tempCtx.stroke(),M.assignFillDrawParams(M.whiteboardTabs[e].tempCtx,r,c)},M.drawTempPentagon=function(e,o,s,t,n,a,i,r,c){var d=(o+t)/2,l=(t-o)/2*(1/2.902113),u=.618034*(n-s)/1.618034;M.whiteboardTabs[e].tempCtx.beginPath(),M.assignBasicTempDrawParams(e,a,i),M.whiteboardTabs[e].tempCtx.moveTo(d,s),M.whiteboardTabs[e].tempCtx.lineTo(t,s+u),M.whiteboardTabs[e].tempCtx.lineTo(t-l,n),M.whiteboardTabs[e].tempCtx.lineTo(o+l,n),M.whiteboardTabs[e].tempCtx.lineTo(o,s+u),M.whiteboardTabs[e].tempCtx.closePath(),M.whiteboardTabs[e].tempCtx.stroke(),M.assignFillDrawParams(M.whiteboardTabs[e].tempCtx,r,c)},M.drawTempHexagon=function(e,o,s,t,n,a,i,r,c){var d=(s+n)/2,l=.707107*(t-o)/(1+1.414214);M.whiteboardTabs[e].tempCtx.beginPath(),M.assignBasicTempDrawParams(e,a,i),M.whiteboardTabs[e].tempCtx.moveTo(o+l,s),M.whiteboardTabs[e].tempCtx.lineTo(t-l,s),M.whiteboardTabs[e].tempCtx.lineTo(t,d),M.whiteboardTabs[e].tempCtx.lineTo(t-l,n),M.whiteboardTabs[e].tempCtx.lineTo(o+l,n),M.whiteboardTabs[e].tempCtx.lineTo(o,d),M.whiteboardTabs[e].tempCtx.closePath(),M.whiteboardTabs[e].tempCtx.stroke(),M.assignFillDrawParams(M.whiteboardTabs[e].tempCtx,r,c)},M.drawTempOctagon=function(e,o,s,t,n,a,i,r,c){var d=.707107*(t-o)/(1+1.414214),l=.707107*(n-s)/(1+1.414214);M.whiteboardTabs[e].tempCtx.beginPath(),M.assignBasicTempDrawParams(e,a,i),M.whiteboardTabs[e].tempCtx.moveTo(o+d,s),M.whiteboardTabs[e].tempCtx.lineTo(t-d,s),M.whiteboardTabs[e].tempCtx.lineTo(t,s+l),M.whiteboardTabs[e].tempCtx.lineTo(t,n-l),M.whiteboardTabs[e].tempCtx.lineTo(t-d,n),M.whiteboardTabs[e].tempCtx.lineTo(o+d,n),M.whiteboardTabs[e].tempCtx.lineTo(o,n-l),M.whiteboardTabs[e].tempCtx.lineTo(o,s+l),M.whiteboardTabs[e].tempCtx.closePath(),M.whiteboardTabs[e].tempCtx.stroke(),M.assignFillDrawParams(M.whiteboardTabs[e].tempCtx,r,c)},M.drawTempRhombus=function(e,o,s,t,n,a,i,r,c){var d=(o+t)/2,l=(s+n)/2;M.whiteboardTabs[e].tempCtx.beginPath(),M.assignBasicTempDrawParams(e,a,i),M.whiteboardTabs[e].tempCtx.moveTo(d,s),M.whiteboardTabs[e].tempCtx.lineTo(t,l),M.whiteboardTabs[e].tempCtx.lineTo(d,n),M.whiteboardTabs[e].tempCtx.lineTo(o,l),M.whiteboardTabs[e].tempCtx.closePath(),M.whiteboardTabs[e].tempCtx.stroke(),M.assignFillDrawParams(M.whiteboardTabs[e].tempCtx,r,c)},M.drawTempCuboid=function(e,o,s,t,n,a,i,r,c){var d=5*(t-o)/7,l=5*(n-s)/7;M.whiteboardTabs[e].tempCtx.beginPath(),M.assignBasicTempDrawParams(e,a,i),M.whiteboardTabs[e].tempCtx.moveTo(o,s),M.whiteboardTabs[e].tempCtx.lineTo(o+d,s),M.whiteboardTabs[e].tempCtx.lineTo(o+d,s+l),M.whiteboardTabs[e].tempCtx.lineTo(o,s+l),M.whiteboardTabs[e].tempCtx.closePath(),M.whiteboardTabs[e].tempCtx.stroke(),M.assignFillDrawParams(M.whiteboardTabs[e].tempCtx,r,c),M.whiteboardTabs[e].tempCtx.beginPath(),M.assignBasicTempDrawParams(e,a,i),M.whiteboardTabs[e].tempCtx.moveTo(o+d,s),M.whiteboardTabs[e].tempCtx.lineTo(t,n-l),M.whiteboardTabs[e].tempCtx.lineTo(t,n),M.whiteboardTabs[e].tempCtx.lineTo(o+d,s+l),M.whiteboardTabs[e].tempCtx.closePath(),M.whiteboardTabs[e].tempCtx.stroke(),M.assignFillDrawParams(M.whiteboardTabs[e].tempCtx,r,c),M.whiteboardTabs[e].tempCtx.beginPath(),M.assignBasicTempDrawParams(e,a,i),M.whiteboardTabs[e].tempCtx.moveTo(o,s+l),M.whiteboardTabs[e].tempCtx.lineTo(o+d,s+l),M.whiteboardTabs[e].tempCtx.lineTo(t,n),M.whiteboardTabs[e].tempCtx.lineTo(t-d,n),M.whiteboardTabs[e].tempCtx.closePath(),M.whiteboardTabs[e].tempCtx.stroke(),M.assignFillDrawParams(M.whiteboardTabs[e].tempCtx,r,c)},M.drawTempText=function(e,o,s){M.whiteboardTabs[e].tempCtx.font=M.whiteboardTabs[e].fontSize+"px "+M.whiteboardTabs[e].font,M.whiteboardTabs[e].tempCtx.textBassline="Bottom",M.whiteboardTabs[e].tempCtx.textAlign="left",M.whiteboardTabs[e].tempCtx.fillStyle=M.whiteboardTabs[e].textColor;var t={width:Math.ceil(M.whiteboardTabs[e].tempCtx.measureText(M.whiteboardTabs[e].text).width),height:M.whiteboardTabs[e].fontSize};return M.whiteboardTabs[e].tempCtx.fillText(M.whiteboardTabs[e].text,o,s),t},M.drawTempEquation=function(e,o,s){M.whiteboardTabs[e].tempCtx.font=M.whiteboardTabs[e].fontSize+"px "+M.whiteboardTabs[e].font,M.whiteboardTabs[e].tempCtx.textBassline="Bottom",M.whiteboardTabs[e].tempCtx.textAlign="left",M.whiteboardTabs[e].tempCtx.fillStyle=M.whiteboardTabs[e].textColor;var t={width:Math.ceil(M.whiteboardTabs[e].tempCtx.measureText(M.whiteboardTabs[e].equation).width),height:20};return M.whiteboardTabs[e].tempCtx.fillText(M.whiteboardTabs[e].equation,o,s),t},M.assignFillDrawParams=function(e,o,s){""!=s&&"transparent"!=s&&(e.fillStyle=s,e.fill())},M.assignBasicDrawParams=function(e,o,s){e.globalCompositeOperation="source-over",e.strokeStyle=o,e.lineWidth=s,e.lineCap="round",e.lineJoin="miter"},M.assignBasicTempDrawParams=function(e,o,s){M.whiteboardTabs[e].tempCtx.globalCompositeOperation="source-over",M.whiteboardTabs[e].tempCtx.setLineDash([]),M.whiteboardTabs[e].tempCtx.strokeStyle=o,M.whiteboardTabs[e].tempCtx.lineWidth=s,M.whiteboardTabs[e].tempCtx.lineCap="round",M.whiteboardTabs[e].tempCtx.lineJoin="miter"},M.applyMathJax=function(e,o,s,t,n,r){var c=document.getElementById("mathjax-container-"+e);c.style.fontSize=t,c.style.fontFamily=n;var d=document.createElement("script");d.setAttribute("type","math/tex"),d.innerHTML="\\definecolor{eqcol}{RGB}{"+parseInt(s[1]+s[2],16)+","+parseInt(s[3]+s[4],16)+","+parseInt(s[5]+s[6],16)+"} \\color{eqcol}    "+o,c.appendChild(d),MathJax.Hub.Process(d,function(){var e=document.getElementById(d.id+"-Frame");if(e){var o=e.getElementsByTagName("svg")[0];o.setAttribute("xmlns","http://www.w3.org/2000/svg"),o.setAttribute("version","1.1");var s=o.parentNode.offsetHeight,t=o.parentNode.offsetWidth;o.setAttribute("height",s),o.setAttribute("width",t),o.removeAttribute("style");var n=document.getElementById("MathJax_SVG_glyphs");o.appendChild(n.cloneNode(!0));var a='<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n'+o.outerHTML,i="data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(a)));c.removeChild(d),r(i,t,s)}else setTimeout(display,500)})}}]),angular.module("standingOut.controllers").controller("WhiteboardCollaborateModalController",["$scope","$log","$sce","close","ModalService","classSessionId","userId","SessionWhiteBoardsService",function(o,e,s,t,n,a,i,r){o.classSessionId=a,o.userId=i,o.usersAndGroups=[],o.cancel=function(){t(o.result,100)},o.init=function(){$(".loading").show(),o.getWhiteboardsByUser()},o.getWhiteboardsByUser=function(){r.getWhiteBoardsForCollaborate({classSessionId:o.classSessionId,userId:o.userId},function(e){o.usersAndGroups=e,$(".loading").hide()},function(e){})},o.collaborate=function(e){t(e,100)},o.init()}]),angular.module("standingOut.controllers").controller("WhiteboardExportModalController",["$scope","$log","$sce","close","ModalService",function(e,o,s,t,n){e.cancel=function(){t(e.result,100)},e.init=function(){},e.exportToPc=function(){t("pc",100)},e.exportToDrive=function(){t("drive",100)},e.init()}]),angular.module("standingOut.controllers").controller("WhiteboardImportModalController",["$scope","$log","$sce","close","ModalService","classSessionId","sessionWhiteBoardId","userId","sizeX","sizeY","SessionWhiteBoardsService",function(o,e,s,t,n,a,i,r,c,d,l){o.classSessionId=a,o.sessionWhiteBoardId=i,o.userId=r,o.sizeX=c,o.sizeY=d,o.cancel=function(){t(o.result,100)},o.init=function(){},o.setFiles=function(e){0<e.length&&($(".loading").show(),o.validateFiles({file:e[0]}))},o.validateFiles=function(e){"application/pdf"==e.file.type||"image/png"==e.file.type||"image/jpeg"==e.file.type||"image/jpg"==e.file.type||"image/bmp"==e.file.type?o.performUpload(e):(toastr.clear(),toastr.error("File type not supported (Supported - png, jpeg, bmp, pdf)"))},o.performUpload=function(e){l.uploadToWhiteBoard(e,o.classSessionId,o.sessionWhiteBoardId,o.userId,o.sizeX,o.sizeY,function(e){$(".loading").hide(),t(e,100)},function(e){t(o.result,100)})},o.init()}]),angular.module("standingOut.controllers").controller("WhiteboardLoadModalController",["$scope","$log","$sce","close","ModalService","classSessionId","userId","showShares","SessionWhiteBoardsService",function(o,e,s,t,n,a,i,r,c){o.classSessionId=a,o.showShares=r,o.userId=i,o.savedWhiteboards=[],o.sharedWhiteboards=[],o.toLoad=1,o.loaded=0,o.cancel=function(){t(o.result,100)},o.init=function(){console.log(o.showShares),$(".loading").show(),o.showShares&&(o.toLoad=2,o.getSharedWhiteboards()),o.getSavedWhiteboards()},o.getSavedWhiteboards=function(){c.getMySavedWhiteBoards({classSessionId:o.classSessionId},function(e){o.savedWhiteboards=e,o.incrementLoad()},function(e){})},o.getSharedWhiteboards=function(){c.getMySharedWhiteBoards({classSessionId:o.classSessionId,userId:o.userId},function(e){o.sharedWhiteboards=e,o.incrementLoad()},function(e){})},o.incrementLoad=function(){o.loaded=o.loaded+1,o.loaded>=o.toLoad&&$(".loading").hide()},o.load=function(e){o.savedWhiteboards[e].isShared=!1,t(o.savedWhiteboards[e],100)},o.loadShare=function(e){o.sharedWhiteboards[e].isShared=!0,t(o.sharedWhiteboards[e],100)},o.init()}]),angular.module("standingOut.controllers").controller("WhiteboardSaveModalController",["$scope","$log","$sce","close","ModalService","classSessionId","name","SessionWhiteBoardsService",function(o,e,s,t,n,a,i,r){o.classSessionId=a,o.name=i,o.cancel=function(){t(o.result,100)},o.init=function(){},o.save=function(e){t(o.name,100)},o.init()}]),angular.module("standingOut.controllers").controller("WhiteboardShareModalController",["$scope","$log","$sce","close","ModalService","classSessionId","sessionWhiteBoardId","whiteBoardUserId","userId","SessionWhiteBoardsService","showRead",function(s,e,o,t,n,a,i,r,c,d,l){s.classSessionId=a,s.sessionWhiteBoardId=i,s.userId=c,s.whiteBoardUserId=r,s.users=[],s.readToggle=!1,s.writeToggle=!1,s.showRead=l,s.cancel=function(){t(s.result,100)},s.init=function(){$(".loading").show(),s.getUsers()},s.getUsers=function(){d.getUsersForShare({classSessionId:s.classSessionId,sessionWhiteBoardId:s.sessionWhiteBoardId,userId:s.userId,individual:s.showRead,whiteBoardUserId:s.whiteBoardUserId},function(e){s.users=e,s.checkWriteToggleValid(!0),s.checkReadToggleValid(!0),$(".loading").hide()},function(e){$(".loading").hide()})},s.setWrite=function(){for(var e=0;e<s.users.length;e++)s.users[e].write!=s.writeToggle&&(s.users[e].write=s.writeToggle);s.writeToggle&&(s.readToggle=!0,s.setRead())},s.setRead=function(){for(var e=0;e<s.users.length;e++)s.users[e].read!=s.readToggle&&s.users[e].userId!=s.whiteBoardUserId&&(s.users[e].read=s.readToggle);s.readToggle||(s.writeToggle=!1,s.setWrite())},s.writeChanged=function(e){s.users[e].write&&!s.users[e].read&&(s.users[e].read=!0,s.checkReadToggleValid(s.users[e].read)),s.checkWriteToggleValid(s.users[e].write)},s.readChanged=function(e){!s.users[e].read&&s.users[e].write&&(s.users[e].write=!1,s.checkWriteToggleValid(s.users[e].write)),s.checkReadToggleValid(s.users[e].read)},s.checkWriteToggleValid=function(e){if(e!=s.writeToggle){for(var o=0;o<s.users.length;o++)if(s.users[o].write==s.writeToggle)return;s.writeToggle=e}},s.checkReadToggleValid=function(e){if(e!=s.readToggle){for(var o=0;o<s.users.length;o++)if(s.users[o].read==s.readToggle)return;s.readToggle=e}},s.share=function(){t({users:s.users,individual:s.showRead,whiteBoardUserId:s.whiteBoardUserId},100)},s.init()}]),String.prototype.formatStr||(String.prototype.formatStr=function(){var s=arguments;return this.replace(/{(\d+)}/g,function(e,o){return void 0!==s[o]?s[o]:e})}),$(document).ready(function(){$("table.datatable").dataTable(),$("table.datatablenoSortNoFilter").dataTable({bSort:!1,bFilter:!1,bPaginate:!1}),$("table.datatablenofilter").dataTable({bFilter:!1,bPaginate:!1})}),function(a){a.fn.ioTabs=function(e){a.extend({},a.fn.ioTabs.defaults,e);return a(this).find(".io-tab-container").each(function(){a(this).children("ul.io-tabs").on("click","li",function(e){var o=a(this).data("tab");a.fn.ioTabs.selected(o)})})},a.fn.ioTabs.selected=function(e){var o=a("#"+e),s=o.parents(".io-tab-container").eq(0),t=s.find('ul.io-tabs li[data-tab="'+e+'"]');s.children("ul.io-tabs").children("li").removeClass("active"),s.children(".io-tab-content").removeClass("active"),t.addClass("active"),o.addClass("active")},a.fn.ioTabs.selected_specific=function(e,o){console.log("tab",e),console.log("container",o);var s=a("#"+e),t=s.parents(o).eq(0),n=t.find("ul.io-tabs"+o+' li[data-tab="'+e+'"]');t.children("ul.io-tabs"+o).children("li").removeClass("active"),t.children(".io-tab-content"+o).removeClass("active"),n.addClass("active"),s.addClass("active")},a.fn.ioTabs.defaults={vertical:!1}}(jQuery),function(a){a.fn.ioTabs=function(e){return a.extend({},a.fn.ioTabs.defaults,e),a(this).find(".io-tab-container").each(function(){a(this).children("ul.io-tabs").on("click","li",function(e){var o=a(this).data("tab");a.fn.ioTabs.selected(o)})})},a.fn.ioTabs.selected=function(e){var o=a("#"+e),s=o.parents(".io-tab-container").eq(0),t=s.find('ul.io-tabs li[data-tab="'+e+'"]');s.children("ul.io-tabs").children("li").removeClass("active"),s.children(".io-tab-content").removeClass("active"),t.addClass("active"),o.addClass("active")},a.fn.ioTabs.selected_specific=function(e,o){console.log("tab",e),console.log("container",o);var s=a("#"+e),t=s.parents(o).eq(0),n=t.find("ul.io-tabs"+o+' li[data-tab="'+e+'"]');t.children("ul.io-tabs"+o).children("li").removeClass("active"),t.children(".io-tab-content"+o).removeClass("active"),n.addClass("active"),s.addClass("active")},a.fn.ioTabs.defaults={vertical:!1}}(jQuery),String.prototype.slug||(String.prototype.slug=function(){return this.toLowerCase().replace(/[^\w ]+/g,"").replace(/ +/g,"-")}),angular.module("standingOut.controllers").controller("CompanyController",["$scope","ModalService","DeleteService","CompanysService","CompanyTutorsService",function(t,e,o,s,n){t.companyId=companyId,t.companyTutors=[],t.tutors=[],t.init=function(){$(document).foundation(),void 0!==t.companyId?($(".loading").show(),s.get({id:t.companyId},function(e){t.company=e,$(".loading").hide()},function(e){console.log(e)}),n.company({id:t.companyId},function(e){t.companyTutors=e},function(e){console.log(e)}),n.tutors({},function(e){t.tutors=e},function(e){console.log(e)})):t.company={companyId:void 0}},t.addTutor=function(){if(null!=t.tutorId&&null!=t.tutorId){$(".loading").show();for(var e=!1,o=0;o<t.companyTutors.length;o++)t.companyTutors[o].tutorId==t.tutorId&&(e=!0);0==e?n.save({},{companyId:t.companyId,tutorId:t.tutorId},function(e){n.company({id:t.companyId},function(e){t.companyTutors=e,$(".loading").hide()},function(e){console.log(e)})},function(e){}):$(".loading").hide()}},t.removeTutor=function(s){o.confirm(function(e){1==e&&($(".loading").show(),n.delete({id:s.companyTutorId},function(e){$(".loading").hide();for(var o=0;o<t.companyTutors.length;o++)t.companyTutors[o].$$hashKey==s.$$hashKey&&t.companyTutors.splice(o,1);toastr.success("Delete successsful.")},function(e){$(".loading").hide(),toastr.error("Delete unsuccesssful.")}))},function(e){})},t.save=function(){t.companyForm.submitted=!0,t.companyForm.$valid&&($(".loading").show(),void 0!==t.companyId?s.update({id:t.companyId},t.company,function(e){t.company=e,toastr.success("Save Successful"),$(".loading").hide()},function(e){toastr.error("Save Unsuccessful"),$(".loading").hide()}):s.save({},t.company,function(e){t.company=e,window.location.href="/Admin/Companys/Edit/"+t.company.companyId,toastr.success("Save Successful"),$(".loading").hide()},function(e){toastr.error("Save Unsuccessful"),$(".loading").hide()}))},t.init()}]),angular.module("standingOut.controllers").controller("DeleteModalController",["$scope","$timeout","close",function(o,e,s){o.decision=!1,o.closed=!1,o.remove=function(e){o.decision=e,o.close()},o.close=function(){if(!o.closed)return o.closed=!0,void s(o.decision,500)}}]),function(){"use strict";angular.module("standingOut.directives").directive("datePickerDynamic",function(){return{replace:!0,scope:{date:"=",requiredparam:"=requiredparam",disabledparam:"=disabledparam",placeholder:"@"},template:'<input type="text" ng-model="selectedDate" placeholder="{{placeholder}}"  data-ng-required="requiredparam" data-ng-disabled="disabledparam"  autocomplete="off"/>',controller:["$scope","$element","$compile","$http","$rootScope",function(t,s,e,o,n){t.init=function(){t.format="dd/mm/yyyy",t.momentFormat="DD/MM/YYYY",t.showTime=!1,s.fdatepicker({format:t.format}),t.selectedDate=null,t.momentDate=moment(t.date,moment.ISO_8601),t.momentDate.isValid()?t.selectedDate=t.momentDate.format(t.momentFormat):void 0!==t.date&&null!=t.date&&""!=t.date&&(t.momentDate=moment(),t.selectedDate=t.momentDate.format(t.momentFormat),t.date=t.momentDate.format()),s.fdatepicker("update",t.selectedDate),t.$watch(function(){return t.selectedDate},function(e,o){if(10<=e.length&&e&&e!=o){var s=moment(e,t.momentFormat);s.isValid()?t.date=s.format():t.date=null}}),t.$watch(function(){return t.date},function(e,o){void 0!==e&&null!=e&&""!=e&&e!=t.momentDate.format()&&(console.log("watch2"),e||(e=moment().format()),t.momentDate=moment(e,moment.ISO_8601),t.momentDate.isValid()?(t.selectedDate=t.momentDate.format(t.momentFormat),t.date=t.momentDate.format()):t.selectedDate=null,s.fdatepicker("update",t.selectedDate))})},t.init()}]}})}(),angular.module("standingOut.controllers").controller("ManagementInfoController",["$scope","ManagementInfosService","ClassSessionsService",function(o,e,s){o.toLoad=3,o.loaded=0;var t=new Date;o.startDate=new Date(t.getFullYear(),t.getMonth(),1,0,0,0),o.endDate=new Date,o.dashboard={},o.dashboardSearch={startDate:o.startDate,endDate:o.endDate},o.sessions={},o.sessionsSearch={page:1,take:10,search:"",filter:"",sortType:"",order:"",startDate:o.startDate,endDate:o.endDate},o.courses={},o.coursesSearch={page:1,take:10,search:"",filter:"",sortType:"",order:"",startDate:o.startDate,endDate:o.endDate},o.incrementLoad=function(){o.loaded++,o.loaded>=o.toLoad&&$(".loading").hide()},o.init=function(){$(".loading").show(),o.loaded=0,o.loadSessions(),o.loadDashboard(),o.loadCourses()},o.search=function(){o.dashboardSearch.startDate=o.startDate,o.dashboardSearch.endDate=o.endDate,o.sessionsSearch.startDate=o.startDate,o.sessionsSearch.endDate=o.endDate,o.coursesSearch.startDate=o.startDate,o.coursesSearch.endDate=o.endDate,o.init()},o.loadDashboard=function(){e.dashboard({},o.dashboardSearch,function(e){o.dashboard=e,o.incrementLoad()},function(e){})},o.loadSessions=function(){s.search({},o.sessionsSearch,function(e){o.sessions=e,o.incrementLoad()},function(e){})},o.loadCourses=function(){e.courses({},o.coursesSearch,function(e){o.courses=e,o.incrementLoad()},function(e){})},o.nextSessions=function(){o.sessionsSearch.page=o.sessionsSearch.page+1,o.loadSessions()},o.prevSessions=function(){o.sessionsSearch.page=o.sessionsSearch.page-1,o.loadSessions()},o.nextCourses=function(){o.coursesSearch.page=o.coursesSearch.page+1,o.loadCourses()},o.prevCourses=function(){o.coursesSearch.page=o.coursesSearch.page-1,o.loadCourses()},o.init()}]),angular.module("standingOut.controllers").controller("FamilyLinkAddModalController",["$scope","$log","$sce","close","ModalService","currentEmails","FamilyLinksService",function(o,e,s,t,n,a,i){o.currentEmails=a,o.newEmail="",o.cancel=function(){t(o.result,100)},o.init=function(){},o.save=function(e){o.currentEmails.forEach(function(e){e!=o.newEmail||toastr.error("You've already added this email!")}),i.save({},{childEmail:o.newEmail},function(e){toastr.success("Invitation sent!"),t(e,100)},function(e){toastr.error("We had some issues adding this email. Please check it's correct and try again.")})},o.init()}]),angular.module("standingOut.controllers").controller("SafeguardReportModalController",["$scope","$log","close","SafeguardReportsService","ClassSessionsService","safeguardReport",function(o,e,s,t,n,a){o.result={success:!1},o.classSessionDisabled=!1,o.safeguardReport=a,o.saveDisabled=!1,o.init=function(){$(".loading").show(),null!=a.classSessionId&&(o.classSessionDisabled=!0),n.lastMonth({},function(e){o.classSessions=e,$(".loading").hide()},function(e){})},o.save=function(){o.safeguardReportForm.submitted=!0,o.saveDisabled=!0,o.safeguardReportForm.$valid?($(".loading").show(),t.save({},o.safeguardReport,function(e){o.result.safeguardReport=e,toastr.success("Save Successful"),$(".loading").hide(),o.result.success=!0,s(o.result,100)},function(e){o.saveDisabled=!1,toastr.error("Save Unsuccessful"),$(".loading").hide()})):o.saveDisabled=!1},o.cancel=function(){s(o.result,100)},o.init()}]),function(){angular.module("standingOut.controllers").controller("SearchController",["$scope","SearchService",function($scope,SearchService){$scope.initialFilterTerm=filterTerm,$scope.loaded=0,$scope.toLoad=0,$scope.globalData={},$scope.takeData=[{value:5,label:"Show 5"},{value:10,label:"Show 10"},{value:20,label:"Show 20"},{value:50,label:"Show 50"}],$scope.globalSearch={page:0,take:10,search:searchTerm,sortType:"header",order:"ASC",tutors:!0,companies:!0},$scope.incrementLoad=function(){$scope.loaded++,$scope.loaded>=$scope.toLoad&&$(".loading").hide()},$scope.init=function(){$(".loading").show(),$scope.setToLoad(),$scope.globalSearch.take=10,"tutors"==$scope.initialFilterTerm?$scope.globalSearch.companies=!1:"companies"==$scope.initialFilterTerm&&($scope.globalSearch.tutors=!1),console.log("asdsa"),$scope.genericSearch("global")},$scope.setToLoad=function(){$scope.loaded=0,$scope.toLoad=1},$scope.search=function(e){console.log($scope.globalSearch),SearchService.search({type:e},$scope.globalSearch,function(e){$scope.globalData=e,console.log($scope.globalData),$scope.incrementLoad()},function(e){console.log(e)})},$scope.reloadData=function(e){$(".loading").show(),$scope.setToLoad(),$scope.search(e)},$scope.genericPage=function(action,type){var searchModel=eval("$scope."+type+"Search");"next"==action?searchModel.page++:"back"==action&&searchModel.page--,$scope.reloadData(type)},$scope.genericAlterOrder=function(field,type){var searchModel=eval("$scope."+type+"Search");searchModel.sortType=field,"DESC"==searchModel.order?searchModel.order="ASC":searchModel.order="DESC",searchModel.page=0,$scope.reloadData(type)},$scope.genericSearch=function(type){var searchModel=eval("$scope."+type+"Search");searchModel.page=0,$scope.reloadData(type)},$scope.goTo=function(e){"Tutor"==e.globalSearchTypeDisplay?window.open("/tutors/"+e.id,"_blank").focus():"Company"==e.globalSearchTypeDisplay&&window.open("/companies/"+e.id,"_blank").focus()},$scope.tutorClick=function(){0==$scope.globalSearch.companies&&0==$scope.globalSearch.tutors&&($scope.globalSearch.companies=!0),$scope.genericSearch("global")},$scope.companyClick=function(){0==$scope.globalSearch.companies&&0==$scope.globalSearch.tutors&&($scope.globalSearch.tutors=!0),$scope.genericSearch("global")},$scope.init()}])}(),angular.module("standingOut.services").factory("AlertPopService",["ModalService",function(i){return{alert:function(e,o,s,t,n,a){i.showModal({templateUrl:"/app/alertPop/alertPop.html",controller:"AlertPopModalController",inputs:{title:e,message:o,confirmButtons:s,noText:t,yesText:n}}).then(function(e){e.close.then(function(e){a(e)})})}}}]),angular.module("standingOut.services").factory("ClassroomSessionsService",["$resource","API","$rootScope",function(e,o,s){var t=e(o+"api/classroom/sessions/:id",null,{update:{method:"PUT",url:o+"api/assets/:id"},startRecording:{method:"GET",url:o+"api/classroom/sessions/startrecording/:classSessionId",isArray:!1},stopRecording:{method:"GET",url:o+"api/classroom/sessions/stoprecording/:classSessionId",isArray:!1},getTwilioKey:{method:"GET",url:o+"api/classroom/sessions/GetTwilioKey",isArray:!1},getAvailableGroups:{method:"GET",url:o+"api/classroom/sessions/getAvailableGroups/:classSessionId",isArray:!0},getUserDetails:{method:"GET",url:o+"api/classroom/sessions/GetUserDetails/:id",isArray:!1},endSession:{method:"GET",url:o+"api/classroom/sessions/EndSession/:classSessionId",isArray:!1},startSession:{method:"GET",url:o+"api/classroom/sessions/StartSession/:classSessionId",isArray:!1},getAllChatPermission:{method:"GET",url:o+"api/classroom/sessions/GetAllChatPermission/:classSessionId",isArray:!1},getWebcamGroup:{method:"GET",url:o+"api/classroom/sessions/WebcamGroup/:groupId"}});return t.updateInitListeners=function(){s.$broadcast("init_complete")},t.broadcastSessionStart=function(){s.$broadcast("session_start")},t.broadcastSessionEnd=function(){s.$broadcast("session_end")},t.updateChangePaneListeners=function(e){s.$broadcast("change_pane",e)},t.broadcastScreenshotTaken=function(){s.$broadcast("screenshotTaken")},t}]),angular.module("standingOut.services").factory("ClassSessionVideoRoomsService",["$resource","API","$rootScope",function(e,o,s){return e(o+"api/classroom/classsessionvideorooms/:id",null,{update:{method:"PUT",url:o+"api/classroom/classsessionvideorooms/:id"}})}]),angular.module("standingOut.services").factory("ClassSessionsService",["$resource","API","$rootScope",function(e,o,s){return e(o+"api/classSession",null,{upcomingSessions:{method:"POST",url:o+"api/classSession/upcomingSessions",isArray:!1},previousSessions:{method:"POST",url:o+"api/classSession/previousSessions",isArray:!1},search:{method:"POST",url:o+"api/classSession/search",isArray:!1},lastMonth:{method:"GET",url:o+"api/classSession/lastMonth",isArray:!0}})}]),angular.module("standingOut.services").factory("CompanysService",["$resource","API","$rootScope",function(e,o,s){return e(o+"api/companys/:id",null,{update:{method:"POST",url:o+"api/companys/:id"}})}]),angular.module("standingOut.services").factory("CompanyTutorsService",["$resource","API",function(e,o){return e(o+"api/companyTutors/:id",null,{update:{method:"PUT",url:o+"api/companyTutors/:id"},company:{method:"GET",url:o+"api/companyTutors/company/:id",isArray:!0},tutors:{method:"GET",url:o+"api/companyTutors/tutors",isArray:!0}})}]),angular.module("standingOut.services").factory("DeleteService",["ModalService",function(e){return{confirm:function(o){e.showModal({templateUrl:"/app/delete/delete.html",controller:"DeleteModalController"}).then(function(e){e.close.then(function(e){o(e)})})}}}]),angular.module("standingOut.services").factory("DragDropService",["$window","$document",function(i,r){var c=void 0;if(-1<navigator.userAgent.toLowerCase().indexOf("chrome"))c=document.getElementsByTagName("body")[0];else{c=document.getElementsByTagName("html")[0];var e=$(document).height();$("body").css({"max-height":e+"px",height:e+"px"})}return{dragMove:function(e,o,s){if(s){var t;t=s.pageY-(i.pageYOffset||r[0].documentElement.scrollTop);var n=s.pageX-(i.pageXOffset||r[0].documentElement.scrollLeft),a=(c.clientTop,c.clientTop,c.clientHeight,c.clientLeft,c.clientLeft,c.clientWidth,c.offsetLeft,c.offsetTop,80);t<c.clientTop+c.offsetTop?c.scrollTop=c.scrollTop-a:t>c.clientTop+c.clientHeight&&(c.scrollTop=c.scrollTop+a),n<c.clientLeft+c.offsetLeft?c.scrollLeft=c.scrollLeft-a:n>c.clientLeft+c.clientWidth&&(c.scrollLeft=c.scrollLeft+a)}}}}]),angular.module("standingOut.services").factory("EnumsService",["$resource","API",function(e,o){return e(o+"api/enums/:type",null,{})}]),angular.module("standingOut.services").factory("FamilyLinksService",["$resource","API",function(e,o){return e(o+"api/FamilyLinks/:id",null,{remove:{method:"DELETE",url:o+"api/FamilyLinks/:id",isArray:!1},resend:{method:"GET",url:o+"api/FamilyLinks/:id/resend",isArray:!1}})}]),angular.module("standingOut.services").factory("ManagementInfosService",["$resource","API","$rootScope",function(e,o,s){return e(o+"api/managementInfos",null,{dashboard:{method:"POST",url:o+"api/managementInfos/dashboard",isArray:!1},courses:{method:"POST",url:o+"api/managementInfos/courses",isArray:!1}})}]),angular.module("standingOut.services").factory("SafeguardReportsService",["$resource","API","$rootScope",function(e,o,s){return e(o+"api/safeguardReports/:id",null,{update:{method:"PUT",url:o+"api/safeguardReports/:id"}})}]),angular.module("standingOut.services").factory("SearchService",["$resource","API",function(e,o){return e(o+"api/search/:id",null,{search:{method:"POST",url:o+"api/search/:type",isArray:!1}})}]),angular.module("standingOut.services").factory("SessionAttendeesService",["$resource","API","$rootScope",function(e,o,s){return e(o+"api/classroom/:classSessionId/sessionAttendees/:id",null,{my:{method:"GET",url:o+"api/classroom/:classSessionId/sessionAttendees/my"},update:{method:"PUT",url:o+"api/assets/:id"}})}]),angular.module("standingOut.services").factory("SessionDocumentsService",["$resource","API","Upload",function(e,a,i){var o=e(a+"api/session/:classSessionId/SessionDocuments/:id",null,{update:{method:"PUT",url:a+"api/session/:classSessionId/SessionDocuments/:id"},getForSetup:{method:"GET",isArray:!1,url:a+"api/session/:classSessionId/SessionDocuments"},getForClassroom:{method:"GET",isArray:!1,url:a+"api/classroom/:classSessionId/SessionDocuments"},getForSetupByFolderSame:{method:"GET",isArray:!1,url:a+"api/session/:classSessionId/SessionDocuments/navigation/same/:folderId"},getForClassroomByFolderSame:{method:"GET",isArray:!1,url:a+"api/classroom/:classSessionId/SessionDocuments/navigation/same/:folderId"},getForSetupByFolderDown:{method:"GET",isArray:!1,url:a+"api/session/:classSessionId/SessionDocuments/navigation/down/:folderId"},getForClassroomByFolderDown:{method:"GET",isArray:!1,url:a+"api/classroom/:classSessionId/SessionDocuments/navigation/down/:folderId"},getForSetupByFolderUp:{method:"GET",isArray:!1,url:a+"api/session/:classSessionId/SessionDocuments/navigation/up/:folderId"},getForClassroomByFolderUp:{method:"GET",isArray:!1,url:a+"api/classroom/:classSessionId/SessionDocuments/navigation/up/:folderId"},postForSetupByFolderPage:{method:"POST",isArray:!1,url:a+"api/session/:classSessionId/SessionDocuments/navigation/page/:folderId"},postForClassroomByFolderPage:{method:"POST",isArray:!1,url:a+"api/classroom/:classSessionId/SessionDocuments/navigation/page/:folderId"},uploadScreenshot:{method:"POST",isArray:!1,url:a+"api/classroom/:classSessionId/SessionDocuments/screenshot"},deleteFromSetup:{method:"DELETE",isArray:!1,url:a+"api/session/:classSessionId/SessionDocuments/delete/:id"},getAttendeesForFileSetup:{method:"GET",url:a+"api/session/:classSessionId/SessionDocuments/getAttendeesForFileSetup/:fileId",isArray:!0},getAttendeesForFileSetupUpload:{method:"GET",url:a+"api/session/:classSessionId/SessionDocuments/getAttendeesForFileUpload",isArray:!0},shareFileUploadSetup:{method:"POST",url:a+"api/session/:classSessionId/SessionDocuments/shareFileUpload",isArray:!1},deleteFromClassroom:{method:"DELETE",isArray:!1,url:a+"api/classroom/:classSessionId/SessionDocuments/delete/:id"},getAttendeesForFileUpload:{method:"GET",url:a+"api/classroom/:classSessionId/SessionDocuments/getAttendeesForFileUpload",isArray:!0},shareFileUpload:{method:"POST",url:a+"api/classroom/:classSessionId/SessionDocuments/shareFileUpload",isArray:!1}});return o.uploadFromClassroom=function(e,o,s,t,n){i.upload({url:a+"api/classroom/"+o+"/SessionDocuments/upload/"+s,method:"POST",data:e}).then(function(e){t(e.data)},function(e){n(e)},function(e){})},o.upload=function(e,o,s,t,n){i.upload({url:a+"api/session/"+o+"/SessionDocuments/upload/"+s,method:"POST",data:e}).then(function(e){t(e.data)},function(e){n(e)},function(e){})},o}]),angular.module("standingOut.services").factory("SessionGroupsService",["$resource","API",function(e,o){return e(o+"api/session/:classSessionId/SessionGroups/:id",null,{update:{method:"PUT",url:o+"api/session/:classSessionId/SessionGroups/:id"},getDraggable:{method:"GET",url:o+"api/session/:classSessionId/SessionGroups/:id/Draggable",isArray:!0},move:{method:"PUT",url:o+"api/session/:classSessionId/SessionGroups/Move/:sessionAttendeeId"},getTutorCommandGroups:{method:"GET",isArray:!0,url:o+"api/classroom/:classSessionId/SessionGroups/TutorCommand"}})}]),angular.module("standingOut.services").factory("SessionMediasService",["$resource","API",function(e,o){return e(o+"api/session/:classSessionId/sessionMedias/:id",null,{update:{method:"PUT",url:o+"api/session/:classSessionId/sessionMedias/:id"},getForClassroom:{method:"GET",isArray:!0,url:o+"api/classroom/:classSessionId/sessionMedias"}})}]),angular.module("standingOut.services").factory("SessionMessagesService",["$resource","API",function(e,o){return e(o+"api/session/:classSessionId/SessionMessages/:id",null,{getChatroomInstances:{method:"GET",isArray:!0,url:o+"api/classroom/:classSessionId/SessionMessages/Chatrooms"},getChatPermissions:{method:"GET",isArray:!1,url:o+"api/classroom/:classSessionId/SessionMessages/ChatPermissions/:userId"},getGroupInstance:{method:"GET",isArray:!1,url:o+"api/classroom/:classSessionId/SessionMessages/GroupInstance/:groupId"}})}]),angular.module("standingOut.services").factory("SessionWhiteBoardsService",["$resource","API","Upload",function(e,c,d){var o=e(c+"api/classroom/:classSessionId/sessionWhiteBoards/:id",null,{update:{method:"PUT",url:c+"api/session/:classSessionId/sessionWhiteBoards/:id"},getMyWhiteBoards:{method:"GET",isArray:!0,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/getMyWhiteBoards"},createIndividualBoard:{method:"POST",isArray:!1,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/createIndividualBoard"},addCommand:{method:"POST",isArray:!1,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/addCommand"},toggleLock:{method:"PUT",isArray:!1,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/toggleLock/:sessionWhiteBoardId"},addLoadCommand:{method:"POST",isArray:!1,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/addLoadCommand/:sizeX/:sizeY"},undo:{method:"GET",isArray:!1,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/undo"},redo:{method:"GET",isArray:!1,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/redo"},clear:{method:"GET",isArray:!1,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/clear"},getMySavedWhiteBoards:{method:"GET",isArray:!0,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/getMySavedWhiteBoards"},save:{method:"POST",isArray:!1,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/save"},getLoadData:{method:"POST",isArray:!0,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/getLoadData"},setInactive:{method:"GET",isArray:!1,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/setInactive"},openIndividualBoard:{method:"POST",isArray:!1,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/openIndividualBoard"},getUsersForShare:{method:"GET",isArray:!0,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/getUsersForShare"},share:{method:"POST",isArray:!1,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/share/:individual"},getSharedBoard:{method:"GET",isArray:!1,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/getSharedBoard"},getMySharedWhiteBoards:{method:"GET",isArray:!0,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/getMySharedWhiteBoards"},getWhiteBoardsForCollaborate:{method:"GET",isArray:!1,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/getWhiteBoardsForCollaborate"},getWhiteBoardForCollaboration:{method:"GET",isArray:!1,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/getWhiteBoardForCollaboration"},tutorStoppedCollaborating:{method:"POST",isArray:!1,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/tutorStoppedCollaborating/:sessionWhiteBoardId"},alterSize:{method:"POST",isArray:!1,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/alterSize/:sizeX/:sizeY"},getImage:{method:"GET",isArray:!1,url:c+"api/classroom/:classSessionId/sessionWhiteBoards/getImage/:sessionWhiteBoardId/:fileName"}});return o.exportToDrive=function(e,o,s,t,n,a){d.upload({url:c+"api/classroom/"+s+"/SessionWhiteBoards/exportWhiteBoard/"+t,method:"POST",data:{name:o,imageData:e}}).then(function(e){n(e.data)},function(e){a(e)},function(e){})},o.uploadToWhiteBoard=function(e,o,s,t,n,a,i,r){console.log(e),d.upload({url:c+"api/classroom/"+o+"/sessionWhiteBoards/uploadToWhiteBoard/"+s+"/"+t+"/"+n+"/"+a,method:"POST",data:e}).then(function(e){i(e)},function(e){r(e)},function(e){})},o}]),angular.module("standingOut.services").factory("SystemToolsService",["$resource","API","$rootScope",function(e,o,s){return e(o+"api/classroom/systemtools/:id",null,{})}]),angular.module("standingOut.services").factory("TutorsService",["$resource","API","Upload",function(e,t,n){var o=e(t+"api/Tutors/:id",null,{update:{method:"POST",url:t+"api/Tutors/:id"},my:{method:"GET",url:t+"api/Tutors/my",isArray:!1}});return o.upload=function(e,o,s){n.upload({url:t+"api/tutors/upload",method:"POST",data:e}).then(function(e){o(e.data)},function(e){s(e)},function(e){})},o}]),angular.module("standingOut.controllers").controller("SessionGroupModalController",["$scope","$log","close","ModalService","group","EnumsService","SessionGroupsService",function(o,e,s,t,n,a,i){o.group=n,o.result={success:!1},o.cancel=function(){o.result.success=!1,s(o.result,100)},o.save=function(){o.groupForm.submitted=!0,o.groupForm.$valid&&(void 0!==o.group.sessionGroupId&&null!=o.group.sessionGroupId&&""!=o.group.sessionGroupId?i.update({classSessionId:o.group.classSessionId,id:o.group.sessionGroupId},o.group,function(e){o.result=e,o.result.success=!0,$(".loading").hide(),s(o.result,100),toastr.success("Save successsful.")},function(e){}):i.save({classSessionId:o.group.classSessionId},o.group,function(e){o.result=e,o.result.success=!0,$(".loading").hide(),s(o.result,100),toastr.success("Save successsful.")},function(e){}))}}]),angular.module("standingOut.controllers").controller("SessionMediaModalController",["$scope","$log","close","ModalService","media","EnumsService","SessionMediasService","$sce",function(o,e,s,t,n,a,i,r){o.media=n,o.result={success:!1},o.mediaTypes=[],o.toLoad=1,o.loaded=0,o.incrementLoad=function(){o.loaded++,o.loaded>=o.toLoad&&$(".loading").hide()},o.init=function(){$(".loading").show(),a.query({type:"SessionMediaType"},function(e){o.mediaTypes=e,o.incrementLoad()},function(e){})},o.getPreview=function(){return void 0!==o.media.content&&null!=o.media.content&&0<o.media.content.length?r.trustAsResourceUrl(o.media.content):""},o.cancel=function(){o.result.success=!1,s(o.result,100)},o.save=function(){o.mediaForm.submitted=!0,o.mediaForm.$valid&&(void 0!==o.media.sessionMediaId&&null!=o.media.sessionMediaId&&""!=o.media.sessionMediaId?i.update({classSessionId:o.media.classSessionId,id:o.media.sessionMediaId},o.media,function(e){o.result=e,o.result.success=!0,$(".loading").hide(),s(o.result,100),toastr.success("Save successsful.")},function(e){}):i.save({classSessionId:o.media.classSessionId},o.media,function(e){o.result=e,o.result.success=!0,$(".loading").hide(),s(o.result,100),toastr.success("Save successsful.")},function(e){}))},o.init()}]),angular.module("standingOut.controllers").controller("SessionIndexController",["$scope","ClassSessionsService","ModalService","TutorsService","FamilyLinksService",function(s,e,t,n,a){s.toLoad=0,s.loaded=0,s.possibleTakes=[10,20,50],s.upcomingSessions=[],s.upcomingSessionsSearch={page:1,take:20,search:"",filter:"",sortType:"",order:""},s.previousSessions=[],s.previousSessionsSearch={page:1,take:20,search:"",filter:"",sortType:"",order:""},s.searchText="",s.take=20,s.isTutor=isTutor,s.isParent=isParent,s.tutor={},s.familyLinks=[],s.incrementLoad=function(){s.loaded++,s.loaded>=s.toLoad&&$(".loading").hide()},s.resetLoadSet=function(e){$(".loading").show(),s.toLoad=e,s.loaded=0},s.init=function(){s.resetLoadSet(2+(s.isTutor?1:0)+(s.isParent?1:0)),s.isTutor&&n.my({},function(e){s.tutor=e,s.incrementLoad()},function(e){}),s.isParent&&a.query({},function(e){s.familyLinks=e,console.log(e),s.incrementLoad()},function(e){console.log(e)}),s.sessionSearch()},s.reloadSessionSearch=function(){s.resetLoadSet(2),s.sessionSearch()},s.sessionSearch=function(){s.upcomingCall(),s.previousCall()},s.search=function(){s.upcomingSessionsSearch.search=s.searchText,s.previousSessionsSearch.search=s.searchText,s.upcomingSessionsSearch.page=1,s.previousSessionsSearch.page=1,s.reloadSessionSearch()},s.upcomingCall=function(){e.upcomingSessions({},s.upcomingSessionsSearch,function(e){s.upcomingSessions=e.data,console.log(s.upcomingSessions),s.incrementLoad()},function(e){})},s.previousCall=function(){e.previousSessions({},s.previousSessionsSearch,function(e){s.previousSessions=e.data,console.log(s.previousSessions),s.incrementLoad()},function(e){})},s.toSession=function(e){window.location.href="/classroom/sessions/main/"+e},s.toSetup=function(e){window.location.href="/session/"+e},s.nextPage=function(e){s.resetLoadSet(1),"previous"==e?(s.previousSessionsSearch.page<s.previousSessionsSearch.totalPages&&(s.previousSessionsSearch.page=s.previousSessionsSearch.page+1),s.previousCall()):(s.upcomingSessionsSearch.page<s.upcomingSessionsSearch.totalPages&&(s.upcomingSessionsSearch.page=s.upcomingSessionsSearch.page+1),s.upcomingCall())},s.prevPage=function(e){s.resetLoadSet(1),"previous"==e?(1<s.previousSessionsSearch.page&&(s.previousSessionsSearch.page=s.previousSessionsSearch.page-1),s.previousCall()):(1<s.upcomingSessionsSearch.page&&(s.upcomingSessionsSearch.page=s.upcomingSessionsSearch.page-1),s.upcomingCall())},s.takeChange=function(){s.upcomingSessionsSearch.page=1,s.previousSessionsSearch.page=1,s.upcomingSessionsSearch.take=s.take,s.previousSessionsSearch.take=s.take,s.reloadSessionSearch()},s.addFamily=function(){if(isParent){var o=[];s.familyLinks.forEach(function(e){o.push(e.childEmail)}),t.showModal({templateUrl:"/app/my/familyLinkAddModal.html",controller:"FamilyLinkAddModalController",inputs:{currentEmails:o}}).then(function(e){e.close.then(function(e){null!=e&&s.familyLinks.push(e)})})}},s.resendFamily=function(o){!isParent||s.familyLinks[o].linked||s.familyLinks[o].recentRequest||a.resend({id:s.familyLinks[o].familyLinkId},function(e){s.familyLinks[o]=e},function(e){toastr.error("Error sending email")})},s.removeFamily=function(o){isParent&&a.remove({id:s.familyLinks[o].familyLinkId},function(e){s.familyLinks.splice(o,1)},function(e){toastr.error("Error removing family member")})},s.toggleReportAbuse=function(){t.showModal({templateUrl:"/app/safeguardReport/safeguardReportModal.html",controller:"SafeguardReportModalController",inputs:{safeguardReport:{safeguardReportId:void 0,classSessionId:void 0}}}).then(function(e){e.close.then(function(e){$(".loading").show()})})},s.uploadFiles=function(e){if(0<e.length){$(".loading").show();var o={file:e[0],tutorId:s.tutor.tutorId};n.upload(o,function(e){s.tutor.imageDirectory=e.imageDirectory,s.tutor.imageName=e.imageName,s.tutor.imageDownlaodUrl=e.imageDownlaodUrl,$(".loading").hide()},function(e){toastr.error("Failed to upload document."),$(".loading").hide()})}},s.updateTutor=function(){s.tutorForm.submitted=!0,s.tutorForm.$valid&&($(".loading").show(),n.update({id:s.tutor.tutorId},s.tutor,function(e){s.tutor=e,toastr.success("Save Successful"),$(".loading").hide()},function(e){toastr.error("Save Unsuccessful"),$(".loading").hide()}))},s.init()}]),angular.module("standingOut.controllers").controller("DocumentPermissionsModalController",["$scope","$log","$sce","close","ModalService","classSessionId","fileIds","names","isJustUploaded","showWarning","SessionDocumentsService",function(s,e,o,t,n,a,i,r,c,d,l){s.classSessionId=a,s.fileIds=i,s.names=r,s.isJustUploaded=c,s.showWarning=d,s.sessionAttendees=[],s.readToggle=!0,s.writeToggle=!0,s.cancel=function(){t(s.result,100)},s.init=function(){$(".loading").show(),100<s.names.length&&(s.names=s.names.substring(0,99)+"..."),s.getAttendees()},s.getAttendees=function(){s.isJustUploaded?l.getAttendeesForFileSetupUpload({classSessionId:s.classSessionId},function(e){s.sessionAttendees=e,$(".loading").hide()},function(e){$(".loading").hide()}):l.getAttendeesForFileSetup({classSessionId:s.classSessionId,fileId:s.fileIds[0]},function(e){s.sessionAttendees=e,s.checkWriteToggleValid(!1),s.checkReadToggleValid(!1),$(".loading").hide()},function(e){$(".loading").hide()})},s.setWrite=function(){console.log(s.writeToggle);for(var e=0;e<s.sessionAttendees.length;e++)s.sessionAttendees[e].isWriteable!=s.writeToggle&&(s.sessionAttendees[e].isWriteable=s.writeToggle);s.writeToggle&&(s.readToggle=!0,s.setRead())},s.setRead=function(){for(var e=0;e<s.sessionAttendees.length;e++)s.sessionAttendees[e].isReadable!=s.readToggle&&(s.sessionAttendees[e].isReadable=s.readToggle);s.readToggle||(s.writeToggle=!1,s.setWrite())},s.writeChanged=function(e){s.sessionAttendees[e].isWriteable&&!s.sessionAttendees[e].isReadable&&(s.sessionAttendees[e].isReadable=!0,s.checkReadToggleValid(s.sessionAttendees[e].isReadable)),s.checkWriteToggleValid(s.sessionAttendees[e].isWriteable)},s.readChanged=function(e){!s.sessionAttendees[e].isReadable&&s.sessionAttendees[e].isWriteable&&(s.sessionAttendees[e].isWriteable=!1,s.checkWriteToggleValid(s.sessionAttendees[e].isWriteable)),s.checkReadToggleValid(s.sessionAttendees[e].isReadable)},s.checkWriteToggleValid=function(e){if(e!=s.writeToggle){for(var o=0;o<s.sessionAttendees.length;o++)if(s.sessionAttendees[o].isWriteable==s.writeToggle)return;s.writeToggle=e}},s.checkReadToggleValid=function(e){if(e!=s.readToggle){for(var o=0;o<s.sessionAttendees.length;o++)if(s.sessionAttendees[o].isReadable==s.readToggle)return;s.readToggle=e}},s.share=function(){l.shareFileUploadSetup({classSessionId:s.classSessionId},{FileIds:s.fileIds,SessionAttendees:s.sessionAttendees},function(e){toastr.success("Share successsful.")},function(e){toastr.error("Share unsuccesssful.")}),s.cancel()},s.init()}]),angular.module("standingOut.controllers").controller("SetupDocumentsController",["$scope","ClassroomSessionsService","SessionDocumentsService","ModalService","DeleteService",function(t,e,n,s,a){t.classSessionId=classSessionId,t.toLoad=1,t.loaded=0,t.documents=[],t.depth=[],t.depthNames=["Class"],t.selectedDocument=void 0,t.parentFolder=void 0,t.navigationRunning=!1,t.masterFolderId=void 0,t.fileIdsUploaded=[],t.namesUploaded="",t.pageNumber=1,t.nextPage=void 0,t.previousPages=[],t.disallowUploadIn=[],t.incrementLoad=function(){t.loaded++,t.loaded>=t.toLoad&&e.updateInitListeners("init_complete")},t.init=function(){$(".loading").show(),n.getForSetup({classSessionId:t.classSessionId},function(e){t.disallowUploadIn=e.disallowUploadIn,t.masterFolderId=e.masterFolderId,t.assignDocumentsWithCheckboxes(e.files),void 0!==e.files[0]&&void 0!==e.files[0].parents[0]&&(t.depth=[e.files[0].parents[0]],t.depthNames=["Class"]),t.resetPagination(e.nextPageToken),t.incrementLoad()},function(e){})},t.uploadDisabled=function(){if(1==t.depth.length)return!0;for(var e=0;e<t.disallowUploadIn.length;e++)if(t.disallowUploadIn[e]==t.depth[t.depth.length-1])return!0;return!1},t.permissionsMultiple=function(){if(null!=t.documents&&t.documents!=[]){for(var e=0;e<t.documents.length;e++)1==t.documents[e].includeInShare&&t.setupForPermissions(t.documents[e].id,t.documents[e].name);1==t.fileIdsUploaded.length?t.permissions(!1,!1):t.permissions(!0,!0)}},t.permissionsSingle=function(e){t.namesUploaded=e.name,t.fileIdsUploaded=[e.id],t.permissions(!1,!1)},t.permissions=function(e,o){s.showModal({templateUrl:"/app/sessionSetup/documentPermissionsModal.html",controller:"DocumentPermissionsModalController",inputs:{classSessionId:t.classSessionId,fileIds:t.fileIdsUploaded,names:t.namesUploaded,isJustUploaded:e,showWarning:o}}).then(function(e){e.close.then(function(e){t.fileIdsUploaded=[],t.namesUploaded=""})})},t.getDownloadUrl=function(e){var o="";return"application/vnd.google-apps.folder"!=e.mimeType&&(o="application/vnd.google-apps.spreadsheet"==e.mimeType?"https://docs.google.com/spreadsheets/d/"+e.id:"application/vnd.google-apps.document"==e.mimeType?"https://docs.google.com/document/d/"+e.id:"application/vnd.google-apps.presentation"==e.mimeType?"https://docs.google.com/presentation/d/"+e.id:e.webContentLink),o},t.deleteDocument=function(o){a.confirm(function(e){1==e&&(t.navigationRunning=!0,$(".loading").show(),n.deleteFromSetup({classSessionId:t.classSessionId,id:o.id},function(e){t.resetPagination(void 0),t.navigationRunning=!1,t.navigateSame(),$(".loading").hide(),toastr.success("Delete successsful.")},function(e){$(".loading").hide(),toastr.error("Delete unsuccesssful."),t.navigationRunning=!1}))},function(e){})},t.setFiles=function(e){if(t.files=e,t.toUpload=t.files.length,(t.uploaded=0)<t.files.length){$(".loading").show();for(var o=0;o<t.files.length;o++){var s={file:t.files[o]};n.upload(s,t.classSessionId,t.depth[t.depth.length-1],function(e){void 0!==e.parents[0]&&e.parents[0]==t.depth[t.depth.length-1]&&t.documents.push(e),t.incrementUpload(e.id,e.name)},function(e){t.incrementUpload()})}}},t.resetPagination=function(e){t.previousPages=[],t.partResetPagination(e)},t.partResetPagination=function(e){t.pageNumber=1,console.log(t.pageNumber),t.nextPage=void 0!==e&&null!=e?e:void 0},t.refresh=function(){t.navigateSame(function(){toastr.success("Page refreshed")},function(){toastr.error("Refresh failed")})},t.inMaster=function(){return t.depth[t.depth.length-1]==t.masterFolderId},t.showShareButton=function(){if(null!=t.documents&&t.documents!=[]&&t.inMaster()){for(var e=0;e<t.documents.length;e++)if(1==t.documents[e].includeInShare)return!0;return!1}return!1},t.assignDocumentsWithCheckboxes=function(e){if(null!=e)for(var o=0;o<e.length;o++)e.includeInShare=!1;t.documents=e},t.navigateSame=function(o,s){t.navigationRunning||(t.navigationRunning=!0,$(".loading").show(),n.getForSetupByFolderSame({classSessionId:t.classSessionId,folderId:t.depth[t.depth.length-1]},function(e){t.assignDocumentsWithCheckboxes(e.files),e.resetToRoot?(t.depth=[e.resetToFolder],t.depthNames=["Class"],t.parentFolder=void 0,t.resetPagination(e.nextPageToken)):t.partResetPagination(e.nextPageToken),t.navigationRunning=!1,$(".loading").hide(),null!=o&&o()},function(e){t.navigationRunning=!1,$(".loading").hide(),null!=o&&s()}))},t.navigateDown=function(e){var o=e.id;t.navigationRunning||void 0===t.depth[0]||t.depth[t.depth.length-1]==o||(t.navigationRunning=!0,$(".loading").show(),t.depth.push(o),t.depthNames.push(e.name),1<t.depth.length&&(t.parentFolder=t.depth[t.depth.length-2]),n.getForSetupByFolderDown({classSessionId:t.classSessionId,folderId:o},function(e){t.assignDocumentsWithCheckboxes(e.files),t.resetPagination(e.nextPageToken),t.navigationRunning=!1,$(".loading").hide()},function(e){t.navigationRunning=!1,$(".loading").hide()}))},t.navigateUp=function(){t.navigationRunning||void 0===t.depth[0]||(t.navigationRunning=!0,$(".loading").show(),n.getForSetupByFolderUp({classSessionId:t.classSessionId,folderId:t.parentFolder},function(e){t.assignDocumentsWithCheckboxes(e.files),e.resetToRoot?(t.depth=[e.resetToFolder],t.depthNames=["Class"],t.parentFolder=void 0):t.depth.length<2?t.parentFolder=void 0:t.depth[t.depth.length-1]!=t.parentFolder&&(t.depth.pop(),t.depthNames.pop(),t.parentFolder=t.depth[t.depth.length-2]),t.resetPagination(e.nextPageToken),t.navigationRunning=!1,$(".loading").hide()},function(e){t.navigationRunning=!1,$(".loading").hide()}))},t.getNextPage=function(){if(!t.navigationRunning){t.navigationRunning=!0,$(".loading").show();var e={pageToken:t.nextPage};n.postForSetupByFolderPage({classSessionId:t.classSessionId,folderId:t.depth[t.depth.length-1]},e,function(e){t.assignDocumentsWithCheckboxes(e.files),e.resetToRoot?(t.depth=[e.resetToFolder],t.depthNames=["Class"],t.parentFolder=void 0,t.resetPagination(e.nextPageToken)):t.nextPagination(e.nextPageToken),t.navigationRunning=!1,$(".loading").hide()},function(e){t.navigationRunning=!1,$(".loading").hide()})}},t.nextPagination=function(e){t.previousPages.push(t.nextPage),t.pageNumber=t.pageNumber+1,t.nextPage=void 0!==e&&null!=e?e:void 0},t.getPreviousPage=function(){if(!t.navigationRunning){t.navigationRunning=!0,$(".loading").show();var e={pageToken:1<t.previousPages.length?t.previousPages[t.previousPages.length-2]:""};n.postForClassroomByFolderPage({classSessionId:t.classSessionId,folderId:t.depth[t.depth.length-1]},e,function(e){t.assignDocumentsWithCheckboxes(e.files),e.resetToRoot?(t.depth=[e.resetToFolder],t.depthNames=["Class"],t.parentFolder=void 0,t.resetPagination(e.nextPageToken)):t.previousPagination(e.nextPageToken),t.navigationRunning=!1,$(".loading").hide()},function(e){t.navigationRunning=!1,$(".loading").hide()})}},t.previousPagination=function(e){0<t.previousPages.length?(t.nextPage=t.previousPages[t.previousPages.length-1],t.previousPages.pop(),t.pageNumber=t.pageNumber-1):t.resetPagination(e)},t.open=function(e){"application/vnd.google-apps.folder"==e.mimeType&&t.navigateDown(e)},t.incrementUpload=function(e,o){t.uploaded++,null!=e&&t.setupForPermissions(e,o),t.uploaded>=t.toUpload&&($(".loading").hide(),t.uploaded=0,t.inMaster()?t.permissions(!0,!1):t.fileIdsUploaded=[])},t.setupForPermissions=function(e,o){t.fileIdsUploaded.push(e),""==t.namesUploaded?t.namesUploaded=o:t.namesUploaded=t.namesUploaded+", "+o},t.init()}]),angular.module("standingOut.controllers").controller("SetupGroupsController",["$scope","ClassroomSessionsService","SessionGroupsService","DragDropService","ModalService","DeleteService",function(t,e,n,o,s,a){t.classSessionId=classSessionId,t.toLoad=1,t.loaded=0,t.groups=[],t.tabsComplete=0,t.tabsToWaitFor=3,t.processing=!1,t.incrementLoad=function(){t.loaded++,t.loaded>=t.toLoad&&(console.log("group Done"),e.updateInitListeners("init_complete"))},t.$on("init_complete",function(e,o){console.log("tabsComplete: ",t.tabsComplete),t.tabsComplete++,t.tabsComplete>=t.tabsToWaitFor&&$(".loading").hide()}),t.init=function(){$(".loading").show(),n.getDraggable({classSessionId:t.classSessionId},function(e){t.groups=e,t.incrementLoad()},function(e){})},t.addGroup=function(){s.showModal({templateUrl:"/app/sessionGroup/sessionGroupModal.html",controller:"SessionGroupModalController",inputs:{group:{classSessionId:t.classSessionId}}}).then(function(e){e.close.then(function(e){$(".loading").show(),t.init()})})},t.editGroup=function(e){s.showModal({templateUrl:"/app/sessionGroup/sessionGroupModal.html",controller:"SessionGroupModalController",inputs:{group:e}}).then(function(e){e.close.then(function(e){$(".loading").show(),t.init()})})},t.deleteGroup=function(o){a.confirm(function(e){1==e&&($(".loading").show(),n.delete({classSessionId:t.classSessionId,id:o.sessionGroupId},function(e){t.init(),toastr.success("Delete successsful.")},function(e){$(".loading").hide(),toastr.error("Delete unsuccesssful.")}))},function(e){})},t.sortableAttendees={accept:function(e,o){return e.itemScope.modelValue.sessionAttendeeId},orderChanged:function(e){},itemMoved:function(e){t.processing=!0;var o=e.source.itemScope.item,s=$(e.dest.sortableScope.element[0]).data("session-group-id");n.move({classSessionId:t.classSessionId,sessionAttendeeId:o.sessionAttendeeId,sessionGroupId:s},null,function(e){t.processing=!1,toastr.success("Move successsful.")},function(e){$(".loading").show(),t.processing=!1,t.init(),toastr.error("Move unsuccesssful.")})},dragMove:o.dragMove},t.init()}]),angular.module("standingOut.controllers").controller("SetupMediaController",["$scope","ClassroomSessionsService","SessionMediasService","$sce","ModalService","DeleteService",function(s,e,t,o,n,a){s.classSessionId=classSessionId,s.toLoad=1,s.loaded=0,s.media=[],s.iframeTest="https://www.iostudios.co.uk/",s.youtubeTest="https://www.youtube.com/embed/WqJyzPglufI",s.trustSrc=function(e){return o.trustAsResourceUrl(e)},s.incrementLoad=function(){s.loaded++,s.loaded>=s.toLoad&&(console.log("media Done"),e.updateInitListeners("init_complete"))},s.init=function(){t.query({classSessionId:s.classSessionId},function(e){s.media=e,s.incrementLoad()},function(e){})},s.addMedia=function(){n.showModal({templateUrl:"/app/sessionMedia/sessionMediaModal.html",controller:"SessionMediaModalController",inputs:{media:{classSessionId:s.classSessionId}}}).then(function(e){e.close.then(function(e){$(".loading").show(),s.init()})})},s.editMedia=function(e){n.showModal({templateUrl:"/app/sessionMedia/sessionMediaModal.html",controller:"SessionMediaModalController",inputs:{media:e}}).then(function(e){e.close.then(function(e){$(".loading").show(),s.init()})})},s.deleteMedia=function(o){a.confirm(function(e){1==e&&($(".loading").show(),t.delete({classSessionId:s.classSessionId,id:o.sessionMediaId},function(e){s.init(),toastr.success("Delete successsful.")},function(e){$(".loading").hide(),toastr.error("Delete unsuccesssful.")}))},function(e){})},s.init()}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
