using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using StandingOut.Data;
using StandingOutStore.Business.Services;
using StandingOutStore.Business.Services.Interfaces;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Models = StandingOut.Data.Models;

namespace StandingOut.TestForm
{
    public partial class Form1 : Form
    {
        private readonly IConfiguration _Configuration;

        DbContextOptionsBuilder<DbEntities> _Builder = new DbContextOptionsBuilder<DbEntities>();
        DbEntities _DbEntities;
        private readonly IUnitOfWork _UnitOfWork;
        private readonly IPromoCodeService _PromoCodeService;



        public Form1()
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json");

            _Configuration = builder.Build();

            var appSettings = new AppSettings()
            {
                AppDataFolderDirectory = "",
                ContentFolderDirectory = "",
                MainSiteUrl = "",
            };

            string connString = _Configuration.GetConnectionString("DefaultConnection");
            _Builder.UseSqlServer(connString);
            _DbEntities = new DbEntities(_Builder.Options);
            _UnitOfWork = new UnitOfWork(_DbEntities, null, null);
            _PromoCodeService = new PromoCodeService(_UnitOfWork, appSettings);


            InitializeComponent();
        }





        private string PassGen2(int maxSize = 8)
        { //better, same level of security only better random generation
            char[] chars = new char[62];
            chars =
            "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890".ToCharArray();
            byte[] data = new byte[1];
            RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider();
            crypto.GetNonZeroBytes(data);
            data = new byte[maxSize];
            crypto.GetNonZeroBytes(data);
            StringBuilder result = new StringBuilder(maxSize);
            foreach (byte b in data)
            {
                result.Append(chars[b % (chars.Length)]);
            }
            return result.ToString();
        }

        private async void btnGeneratePromo_Click(object sender, EventArgs e)
        {
            if(string.IsNullOrWhiteSpace(numberOfCodes.Text) || string.IsNullOrWhiteSpace(amountOff.Text) ||
                string.IsNullOrWhiteSpace(numberOfUses.Text) || string.IsNullOrWhiteSpace(codeLength.Text))
            {
                MessageBox.Show("All Fields are Required");
            }

            int actualNumberOfCodes = Convert.ToInt32(numberOfCodes.Text);
            int actualamountOff = Convert.ToInt32(amountOff.Text);
            int actualnumberOfUses = Convert.ToInt32(numberOfUses.Text);
            int actualcodeLength = Convert.ToInt32(codeLength.Text);


            List<string> codes = new List<string>();

            while(codes.Count < actualNumberOfCodes)
            {
                var code = PassGen2(actualcodeLength);

                if (await _PromoCodeService.GetByName(code) == null)
                    codes.Add(code);
            }

            List<Models.PromoCode> promos = codes.Select(o => new Models.PromoCode()
            {
                Type = Data.Enums.PromoCodeType.PercentageOff,
                Name = o,
                PercentOff = actualamountOff,
                MaxUses = actualnumberOfUses,

                CreatedBy = "AutoGenerated by ioStudios"
            }).ToList();

            promos = await _PromoCodeService.Create(promos);


            string outputPath = @"C:\crudtest\promoCodes-" + DateTime.Now.ToString("dd-MM-yyyy-HH-mm-ss") +".txt";
            if(!File.Exists(outputPath))
            {
                File.AppendAllLines(outputPath, promos.Select(o => o.Name), Encoding.UTF8);
            }
            else
            {
                throw new Exception("File Exists");
            }



            string done = "";

        }
    }
}
