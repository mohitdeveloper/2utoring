// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StandingOut.Data;

namespace StandingOut.Data.Migrations
{
    [DbContext(typeof(DbEntities))]
    [Migration("20200427095903_tutorDbsFile")]
    partial class tutorDbsFile
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StandingOut.Data.Models.ClassSession", b =>
                {
                    b.Property<Guid>("ClassSessionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AppointmentId");

                    b.Property<string>("BaseStudentDirectoryId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("BaseTutorDirectoryId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("ChatActive");

                    b.Property<int?>("ClassId");

                    b.Property<bool>("Complete");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTimeOffset?>("DueEndDate");

                    b.Property<string>("EmailContents");

                    b.Property<DateTimeOffset>("EndDate");

                    b.Property<bool>("Ended");

                    b.Property<DateTimeOffset?>("EndedAtDate");

                    b.Property<bool>("HasEmailAttachment");

                    b.Property<Guid?>("HubId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsUnder16");

                    b.Property<string>("LessonDescriptionBody")
                        .HasMaxLength(500);

                    b.Property<bool>("MasterFilesCopied");

                    b.Property<string>("MasterStudentDirectoryId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MasterStudentDirectoryName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("MaxPersons");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("OwnerId");

                    b.Property<decimal>("PricePerPerson")
                        .HasColumnType("decimal(13,4)");

                    b.Property<int>("ReadMessagesTutor");

                    b.Property<DateTime?>("ScheduleEndDate");

                    b.Property<int?>("ScheduleType");

                    b.Property<string>("SessionDirectoryId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SessionDirectoryName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("SharedStudentDirectoryId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("StartDate");

                    b.Property<bool>("Started");

                    b.Property<DateTimeOffset?>("StartedAtDate");

                    b.Property<Guid>("StudyLevelId");

                    b.Property<Guid?>("SubjectCategoryId");

                    b.Property<Guid>("SubjectId");

                    b.Property<int>("Type");

                    b.HasKey("ClassSessionId");

                    b.HasIndex("HubId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StudyLevelId");

                    b.HasIndex("SubjectCategoryId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ClassSessions");
                });

            modelBuilder.Entity("StandingOut.Data.Models.ClassSessionVideoRoom", b =>
                {
                    b.Property<Guid>("ClassSessionVideoRoomId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClassSessionId");

                    b.Property<bool>("CompositionDownloadReady");

                    b.Property<string>("CompositionSid");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("Duration");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ParticipantSid")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("RoomSid")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("UserId");

                    b.HasKey("ClassSessionVideoRoomId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("ClassSessionVideoRooms");
                });

            modelBuilder.Entity("StandingOut.Data.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Biography")
                        .HasMaxLength(2000);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ImageDirectory")
                        .HasMaxLength(1000);

                    b.Property<string>("ImageName")
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("SubHeader")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("CompanyId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Companys");
                });

            modelBuilder.Entity("StandingOut.Data.Models.CompanyTutor", b =>
                {
                    b.Property<Guid>("CompanyTutorId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("TutorId");

                    b.HasKey("CompanyTutorId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("TutorId");

                    b.ToTable("CompanyTutors");
                });

            modelBuilder.Entity("StandingOut.Data.Models.ErrorLog", b =>
                {
                    b.Property<Guid>("ErrorLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("InnerException")
                        .HasMaxLength(2000);

                    b.Property<string>("InnerStackTrace");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LogDate");

                    b.Property<string>("Message")
                        .HasMaxLength(2000);

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Path")
                        .HasMaxLength(2000);

                    b.Property<string>("StackTrace");

                    b.HasKey("ErrorLogId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("StandingOut.Data.Models.Hub", b =>
                {
                    b.Property<Guid>("HubId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("SubDomain")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.HasKey("HubId");

                    b.ToTable("Hub");
                });

            modelBuilder.Entity("StandingOut.Data.Models.PromoCode", b =>
                {
                    b.Property<Guid>("PromoCodeId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("AmountOff");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("MaxUses");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<decimal?>("PercentOff");

                    b.Property<int>("Type");

                    b.HasKey("PromoCodeId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SafeguardReport", b =>
                {
                    b.Property<Guid>("SafeguardReportId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LogDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000);

                    b.Property<int>("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("UserId");

                    b.HasKey("SafeguardReportId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("SafeguardReports");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionAttendee", b =>
                {
                    b.Property<Guid>("SessionAttendeeId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllWhiteboardActive");

                    b.Property<decimal>("AmountCharged")
                        .HasColumnType("decimal(13,4)");

                    b.Property<bool>("Attended");

                    b.Property<bool>("AudioEnabled");

                    b.Property<bool>("CallIndividualsEnabled");

                    b.Property<bool>("ChatActive");

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("GroupAudioEnabled");

                    b.Property<bool>("GroupRoomJoinEnabled");

                    b.Property<bool>("GroupScreenShareEnabled");

                    b.Property<bool>("GroupVideoEnabled");

                    b.Property<bool>("GroupWhiteboardActive");

                    b.Property<bool>("HelpRequested");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("JoinDate");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PaymentIntentId");

                    b.Property<Guid?>("PromoCodeId");

                    b.Property<int>("ReadMessagesAll");

                    b.Property<int>("ReadMessagesGroup");

                    b.Property<bool>("Refunded");

                    b.Property<string>("RefundedBy");

                    b.Property<DateTime?>("RefundedDate");

                    b.Property<bool>("Removed");

                    b.Property<string>("RemovedBy");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<bool>("RoomJoinEnabled");

                    b.Property<bool>("ScreenShareEnabled");

                    b.Property<string>("SessionAttendeeDirectoryId")
                        .HasMaxLength(100);

                    b.Property<string>("SessionAttendeeDirectoryName")
                        .HasMaxLength(500);

                    b.Property<Guid?>("SessionGroupId");

                    b.Property<decimal>("StandingOutActualCut")
                        .HasColumnType("decimal(13,4)");

                    b.Property<decimal>("StandingOutPercentageCut")
                        .HasColumnType("decimal(13,4)");

                    b.Property<bool>("TutorPaid");

                    b.Property<string>("TutorStripeTransferId")
                        .HasMaxLength(250);

                    b.Property<string>("UserId");

                    b.Property<bool>("VideoEnabled");

                    b.HasKey("SessionAttendeeId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("SessionGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("SessionAttendees");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionGroup", b =>
                {
                    b.Property<Guid>("SessionGroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ChatActive");

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("ReadMessagesTutor");

                    b.HasKey("SessionGroupId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("SessionGroups");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionInvite", b =>
                {
                    b.Property<Guid>("SessionInviteId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("UserId");

                    b.HasKey("SessionInviteId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("SessionInvites");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionMedia", b =>
                {
                    b.Property<Guid>("SessionMediaId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("Type");

                    b.HasKey("SessionMediaId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("SessionMedias");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionMessage", b =>
                {
                    b.Property<Guid>("SessionMessageId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("FromUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LogDate");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid?>("SessionOneToOneChatInstanceId");

                    b.Property<Guid?>("ToGroupId");

                    b.Property<string>("ToUserId");

                    b.HasKey("SessionMessageId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SessionOneToOneChatInstanceId");

                    b.HasIndex("ToGroupId");

                    b.HasIndex("ToUserId");

                    b.ToTable("SessionMessages");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionOneToOneChatInstance", b =>
                {
                    b.Property<Guid>("SessionOneToOneChatInstanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("SessionOneToOneChatInstanceId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("SessionOneToOneChatInstances");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionOneToOneChatInstanceUser", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<Guid>("SessionOneToOneChatInstanceId");

                    b.Property<int>("ReadMessages");

                    b.HasKey("UserId", "SessionOneToOneChatInstanceId");

                    b.HasIndex("SessionOneToOneChatInstanceId");

                    b.ToTable("SessionOneToOneChatInstanceUsers");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionWhiteBoard", b =>
                {
                    b.Property<Guid>("SessionWhiteBoardId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInactive");

                    b.Property<bool>("Locked");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.Property<Guid?>("SessionGroupId");

                    b.Property<int>("SizeX");

                    b.Property<int>("SizeY");

                    b.Property<string>("UserId");

                    b.HasKey("SessionWhiteBoardId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("SessionGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("SessionWhiteBoards");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionWhiteBoardHistory", b =>
                {
                    b.Property<Guid>("SessionWhiteBoardHistoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("HistoryType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("JsonData");

                    b.Property<DateTime>("LogDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool>("ReDone");

                    b.Property<Guid?>("ReDoneId");

                    b.Property<Guid>("SessionWhiteBoardId");

                    b.Property<bool>("UnDone");

                    b.Property<DateTime?>("UnDoneDate");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("SessionWhiteBoardHistoryId");

                    b.HasIndex("ReDoneId");

                    b.HasIndex("SessionWhiteBoardId");

                    b.HasIndex("UserId");

                    b.ToTable("SessionWhiteBoardHistory");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionWhiteBoardSave", b =>
                {
                    b.Property<Guid>("SessionWhiteBoardSaveId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("FileLocation")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("SizeX");

                    b.Property<int>("SizeY");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("SessionWhiteBoardSaveId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("SessionWhiteBoardSave");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionWhiteBoardShare", b =>
                {
                    b.Property<Guid>("SessionWhiteBoardShareId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("SessionWhiteBoardId");

                    b.Property<string>("UserId");

                    b.Property<bool>("WritePermissions");

                    b.HasKey("SessionWhiteBoardShareId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("SessionWhiteBoardId");

                    b.HasIndex("UserId");

                    b.ToTable("SessionWhiteBoardShare");
                });

            modelBuilder.Entity("StandingOut.Data.Models.Setting", b =>
                {
                    b.Property<Guid>("SettingId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AcuitySchedulingSecret")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("AcuitySchedulingUserId")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("AzureBlobConnectionString")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<decimal>("BaseClassSessionCommision");

                    b.Property<string>("ContactUsEmail")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("GoogleAppName")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("GoogleClientId")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("GoogleClientSecret")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("SafeguardReportAlertEmail")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("SendGridApi")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("SendGridFromEmail")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("SignUpEmail")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("StripeConnectClientId")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("StripeKey")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("TutorProfileUpdateEmail")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("TutorSignUpEmail")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("TwilioAccountSid")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("TwilioApiKey")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("TwilioApiSecret")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("TwilioAuthToken")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("SettingId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("StandingOut.Data.Models.StripeCountry", b =>
                {
                    b.Property<Guid>("StripeCountryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(250);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<bool>("TopOfList");

                    b.HasKey("StripeCountryId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("StripeCountrys");
                });

            modelBuilder.Entity("StandingOut.Data.Models.StripePlan", b =>
                {
                    b.Property<Guid>("StripePlanId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("StripePlanLevel");

                    b.Property<int>("StripePlanType");

                    b.Property<string>("StripeProductId")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("StripePlanId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("StripePlans");
                });

            modelBuilder.Entity("StandingOut.Data.Models.StudyLevel", b =>
                {
                    b.Property<Guid>("StudyLevelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("Order");

                    b.Property<string>("Url")
                        .HasMaxLength(300);

                    b.HasKey("StudyLevelId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("StudyLevels");
                });

            modelBuilder.Entity("StandingOut.Data.Models.Subject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Url")
                        .HasMaxLength(300);

                    b.HasKey("SubjectId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SubjectCategory", b =>
                {
                    b.Property<Guid>("SubjectCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<Guid>("SubjectId");

                    b.Property<string>("Url")
                        .HasMaxLength(300);

                    b.HasKey("SubjectCategoryId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectCategories");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SystemTool", b =>
                {
                    b.Property<Guid>("SystemToolId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowMultiple");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("ExitWarning");

                    b.Property<string>("FontAwesomeIconClass")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("NgInclude")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("SystemToolId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("SystemTools");
                });

            modelBuilder.Entity("StandingOut.Data.Models.Tutor", b =>
                {
                    b.Property<Guid>("TutorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Biography")
                        .HasMaxLength(2000);

                    b.Property<int>("CalendarId")
                        .HasMaxLength(500);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("DbsAdminApproved");

                    b.Property<string>("DbsCertificateFileLocation")
                        .HasMaxLength(2000);

                    b.Property<string>("DbsCertificateFileName")
                        .HasMaxLength(2000);

                    b.Property<string>("DbsCertificateNumber")
                        .HasMaxLength(250);

                    b.Property<bool>("HasDbsCheck");

                    b.Property<string>("Header")
                        .HasMaxLength(250);

                    b.Property<bool>("InitialRegistrationComplete");

                    b.Property<int>("InitialRegistrationStep");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("PaymentStatus");

                    b.Property<bool>("ProfileAuthorized");

                    b.Property<bool>("ProfileAuthorizedMessageRead");

                    b.Property<string>("ProfileHowITeach")
                        .HasMaxLength(2000);

                    b.Property<string>("ProfileImageFileLocation")
                        .HasMaxLength(2000);

                    b.Property<string>("ProfileImageFileName")
                        .HasMaxLength(2000);

                    b.Property<string>("ProfileTeachingExperiance")
                        .HasMaxLength(2000);

                    b.Property<string>("SignUpVoucher")
                        .HasMaxLength(250);

                    b.Property<string>("StripeConnectAccountId")
                        .HasMaxLength(250);

                    b.Property<string>("StripeConnectBankAccountId")
                        .HasMaxLength(250);

                    b.Property<string>("StripeCustomerId")
                        .HasMaxLength(250);

                    b.Property<Guid>("StripePlanId");

                    b.Property<string>("StripeSubscriptionId")
                        .HasMaxLength(250);

                    b.Property<string>("SubHeader")
                        .HasMaxLength(2000);

                    b.HasKey("TutorId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("StripePlanId");

                    b.ToTable("Tutors");
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorCertificate", b =>
                {
                    b.Property<Guid>("TutorCertificateId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CertificateFileLocation")
                        .HasMaxLength(2000);

                    b.Property<string>("CertificateFileName")
                        .HasMaxLength(2000);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("TutorId");

                    b.HasKey("TutorCertificateId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorCertificates");
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorQualification", b =>
                {
                    b.Property<Guid>("TutorQualificationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<Guid>("TutorId");

                    b.HasKey("TutorQualificationId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorQualifications");
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorSubject", b =>
                {
                    b.Property<Guid>("TutorSubjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("SubjectCategoryId");

                    b.Property<Guid>("SubjectId");

                    b.Property<Guid>("TutorId");

                    b.HasKey("TutorSubjectId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SubjectCategoryId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorSubjects");
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorSubjectStudyLevel", b =>
                {
                    b.Property<Guid>("TutorSubjectStudyLevelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("StudyLevelId");

                    b.Property<Guid>("TutorSubjectId");

                    b.HasKey("TutorSubjectStudyLevelId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("StudyLevelId");

                    b.HasIndex("TutorSubjectId");

                    b.ToTable("TutorSubjectStudyLevels");
                });

            modelBuilder.Entity("StandingOut.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("GoogleProfilePicture")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsParent");

                    b.Property<bool>("IsSetupComplete");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<bool>("MarketingAccepted");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(250);

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("ParentFirstName")
                        .HasMaxLength(250);

                    b.Property<string>("ParentLastName")
                        .HasMaxLength(250);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("StripeCustomerId");

                    b.Property<string>("TelephoneNumber")
                        .HasMaxLength(250);

                    b.Property<bool>("TermsAndConditionsAccepted");

                    b.Property<string>("Title")
                        .HasMaxLength(250);

                    b.Property<Guid?>("TutorId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TutorId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StandingOut.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StandingOut.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StandingOut.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.ClassSession", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Hub", "Hub")
                        .WithMany("ClassSessions")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "Owner")
                        .WithMany("ClassSessions")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.StudyLevel", "StudyLevel")
                        .WithMany()
                        .HasForeignKey("StudyLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.SubjectCategory", "SubjectCategory")
                        .WithMany()
                        .HasForeignKey("SubjectCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.ClassSessionVideoRoom", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("VideoRooms")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.CompanyTutor", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Company", "Company")
                        .WithMany("CompanyTutors")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Tutor", "Tutor")
                        .WithMany("CompanyTutors")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SafeguardReport", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("SafeguardReports")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany("SafeguardReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionAttendee", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("SessionAttendees")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.PromoCode", "PromoCode")
                        .WithMany("SessionAttendees")
                        .HasForeignKey("PromoCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.SessionGroup", "SessionGroup")
                        .WithMany("SessionAttendees")
                        .HasForeignKey("SessionGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany("SessionAttendees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionGroup", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("SessionGroups")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionInvite", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany()
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionMedia", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("SessionMedia")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionMessage", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("SessionMessages")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.SessionOneToOneChatInstance", "SessionOneToOneChatInstance")
                        .WithMany("SessionMessages")
                        .HasForeignKey("SessionOneToOneChatInstanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.SessionGroup", "ToGroup")
                        .WithMany()
                        .HasForeignKey("ToGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionOneToOneChatInstance", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany()
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionOneToOneChatInstanceUser", b =>
                {
                    b.HasOne("StandingOut.Data.Models.SessionOneToOneChatInstance", "SessionOneToOneChatInstance")
                        .WithMany("SessionOneToOneChatInstanceUsers")
                        .HasForeignKey("SessionOneToOneChatInstanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany("SessionOneToOneChatInstanceUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionWhiteBoard", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("SessionWhiteBoards")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.SessionGroup", "SessionGroup")
                        .WithMany("SessionWhiteBoards")
                        .HasForeignKey("SessionGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany("SessionWhiteBoards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionWhiteBoardHistory", b =>
                {
                    b.HasOne("StandingOut.Data.Models.SessionWhiteBoardHistory", "ReDoneHistory")
                        .WithMany()
                        .HasForeignKey("ReDoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.SessionWhiteBoard", "SessionWhiteBoard")
                        .WithMany("History")
                        .HasForeignKey("SessionWhiteBoardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionWhiteBoardSave", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("SessionWhiteBoardSaves")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany("SessionWhiteBoardSaves")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionWhiteBoardShare", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("SessionWhiteBoardShares")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.SessionWhiteBoard", "SessionWhiteBoard")
                        .WithMany("SessionWhiteBoardShares")
                        .HasForeignKey("SessionWhiteBoardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany("SessionWhiteBoardShares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SubjectCategory", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Subject", "Subject")
                        .WithMany("SubjectCategories")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.Tutor", b =>
                {
                    b.HasOne("StandingOut.Data.Models.StripePlan", "StripePlan")
                        .WithMany()
                        .HasForeignKey("StripePlanId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorCertificate", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Tutor", "Tutor")
                        .WithMany("TutorCertificates")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorQualification", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Tutor", "Tutor")
                        .WithMany("TutorQualifications")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorSubject", b =>
                {
                    b.HasOne("StandingOut.Data.Models.SubjectCategory", "SubjectCategory")
                        .WithMany()
                        .HasForeignKey("SubjectCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Tutor", "Tutor")
                        .WithMany("TutorSubjects")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorSubjectStudyLevel", b =>
                {
                    b.HasOne("StandingOut.Data.Models.StudyLevel", "StudyLevel")
                        .WithMany()
                        .HasForeignKey("StudyLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.TutorSubject", "TutorSubject")
                        .WithMany("TutorSubjectStudyLevels")
                        .HasForeignKey("TutorSubjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.User", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Tutor", "Tutor")
                        .WithMany("Users")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
