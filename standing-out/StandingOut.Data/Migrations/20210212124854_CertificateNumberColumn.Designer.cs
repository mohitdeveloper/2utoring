// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StandingOut.Data;

namespace StandingOut.Data.Migrations
{
    [DbContext(typeof(DbEntities))]
    [Migration("20210212124854_CertificateNumberColumn")]
    partial class CertificateNumberColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StandingOut.Data.Models.ClassSession", b =>
                {
                    b.Property<Guid>("ClassSessionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AppointmentId");

                    b.Property<string>("BaseStudentDirectoryId")
                        .HasMaxLength(100);

                    b.Property<string>("BaseTutorDirectoryId")
                        .HasMaxLength(100);

                    b.Property<bool>("Cancel");

                    b.Property<bool>("ChatActive");

                    b.Property<int?>("ClassId");

                    b.Property<bool>("Complete");

                    b.Property<Guid?>("CourseId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTimeOffset?>("DueEndDate");

                    b.Property<string>("EmailContents");

                    b.Property<DateTimeOffset>("EndDate");

                    b.Property<bool>("Ended");

                    b.Property<DateTimeOffset?>("EndedAtDate");

                    b.Property<bool>("HasEmailAttachment");

                    b.Property<Guid?>("HubId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsUnder16");

                    b.Property<string>("LessonDescriptionBody")
                        .HasMaxLength(500);

                    b.Property<bool>("MasterFilesCopied");

                    b.Property<string>("MasterStudentDirectoryId")
                        .HasMaxLength(100);

                    b.Property<string>("MasterStudentDirectoryName")
                        .HasMaxLength(500);

                    b.Property<int>("MaxPersons");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("OwnerId");

                    b.Property<decimal>("PricePerPerson")
                        .HasColumnType("decimal(13,4)");

                    b.Property<int>("ReadMessagesTutor");

                    b.Property<bool>("Refunded");

                    b.Property<bool>("RequiresGoogleAccount");

                    b.Property<DateTime?>("ScheduleEndDate");

                    b.Property<int?>("ScheduleType");

                    b.Property<string>("SessionDirectoryId")
                        .HasMaxLength(100);

                    b.Property<string>("SessionDirectoryName")
                        .HasMaxLength(500);

                    b.Property<string>("SharedStudentDirectoryId")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("StartDate");

                    b.Property<bool>("Started");

                    b.Property<DateTimeOffset?>("StartedAtDate");

                    b.Property<Guid>("StudyLevelId");

                    b.Property<Guid?>("SubjectCategoryId");

                    b.Property<Guid>("SubjectId");

                    b.Property<int>("Type");

                    b.HasKey("ClassSessionId");

                    b.HasIndex("CourseId");

                    b.HasIndex("HubId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StudyLevelId");

                    b.HasIndex("SubjectCategoryId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ClassSessions");
                });

            modelBuilder.Entity("StandingOut.Data.Models.ClassSessionVideoRoom", b =>
                {
                    b.Property<Guid>("ClassSessionVideoRoomId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClassSessionId");

                    b.Property<bool>("CompositionDownloadReady");

                    b.Property<string>("CompositionSid");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("Duration");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ParticipantSid")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("RoomSid")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("UserId");

                    b.HasKey("ClassSessionVideoRoomId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("ClassSessionVideoRooms");
                });

            modelBuilder.Entity("StandingOut.Data.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(250);

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(250);

                    b.Property<string>("AdminUserId");

                    b.Property<string>("Biography")
                        .HasMaxLength(2000);

                    b.Property<int?>("CompanyCancelAccountReason");

                    b.Property<string>("CompanyCancelAccountReasonDescription")
                        .HasMaxLength(1000);

                    b.Property<string>("Country")
                        .HasMaxLength(250);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(250);

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("IDVerificationtStatus");

                    b.Property<string>("ImageDirectory")
                        .HasMaxLength(1000);

                    b.Property<string>("ImageName")
                        .HasMaxLength(250);

                    b.Property<bool>("InitialRegistrationComplete");

                    b.Property<int>("InitialRegistrationStep");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastTimeStripeSubscriptionChecked");

                    b.Property<bool>("MarketingAccepted");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(250);

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("PaymentAddressLine1")
                        .HasMaxLength(250);

                    b.Property<string>("PaymentPostcode")
                        .HasMaxLength(250);

                    b.Property<int>("PaymentStatus");

                    b.Property<string>("Postcode")
                        .HasMaxLength(10);

                    b.Property<int>("ProfileApprovalStatus");

                    b.Property<string>("ProfileImageFileLocation");

                    b.Property<string>("ProfileImageFileName")
                        .HasMaxLength(2000);

                    b.Property<bool>("ProfileMessageRead");

                    b.Property<string>("PromoCode")
                        .HasMaxLength(250);

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Role")
                        .HasMaxLength(2000);

                    b.Property<string>("StripeConnectAccountId")
                        .HasMaxLength(250);

                    b.Property<string>("StripeConnectBankAccountId")
                        .HasMaxLength(250);

                    b.Property<string>("StripeCustomerId")
                        .HasMaxLength(250);

                    b.Property<Guid?>("StripePlanId");

                    b.Property<string>("StripeSubscriptionId")
                        .HasMaxLength(250);

                    b.Property<string>("SubHeader")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("TelephoneNumber")
                        .HasMaxLength(250);

                    b.Property<bool>("TermsAndConditionsAccepted");

                    b.Property<string>("UrlSlug")
                        .HasMaxLength(500);

                    b.Property<string>("WhatWeDo")
                        .HasMaxLength(2000);

                    b.Property<string>("WhoWeAre")
                        .HasMaxLength(2000);

                    b.Property<string>("WhyChooseUs")
                        .HasMaxLength(2000);

                    b.Property<string>("WhyWeDoIt")
                        .HasMaxLength(2000);

                    b.HasKey("CompanyId");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("StripePlanId");

                    b.ToTable("Companys");
                });

            modelBuilder.Entity("StandingOut.Data.Models.CompanyMember", b =>
                {
                    b.Property<Guid>("CompanyTeamId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<string>("ImageDirectory")
                        .HasMaxLength(1000);

                    b.Property<string>("ImageName")
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ProfileImageFileLocation");

                    b.Property<string>("ProfileImageFileName")
                        .HasMaxLength(2000);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("CompanyTeamId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("CompanyMember");
                });

            modelBuilder.Entity("StandingOut.Data.Models.CompanySubject", b =>
                {
                    b.Property<Guid>("CompanySubjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid?>("SubjectCategoryId");

                    b.Property<Guid>("SubjectId");

                    b.HasKey("CompanySubjectId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SubjectCategoryId");

                    b.HasIndex("SubjectId");

                    b.ToTable("CompanySubjects");
                });

            modelBuilder.Entity("StandingOut.Data.Models.CompanySubjectStudyLevel", b =>
                {
                    b.Property<Guid>("CompanySubjectStudyLevelId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyId");

                    b.Property<Guid>("CompanySubjectId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("StudyLevelId");

                    b.HasKey("CompanySubjectStudyLevelId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanySubjectId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("StudyLevelId");

                    b.ToTable("CompanySubjectStudyLevels");
                });

            modelBuilder.Entity("StandingOut.Data.Models.CompanySubscription", b =>
                {
                    b.Property<Guid>("CompanySubscriptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("EndDateTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime?>("StartDateTime");

                    b.Property<Guid>("SubscriptionId");

                    b.HasKey("CompanySubscriptionId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("CompanySubscription");
                });

            modelBuilder.Entity("StandingOut.Data.Models.CompanyTutor", b =>
                {
                    b.Property<Guid>("CompanyTutorId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActualEndDate");

                    b.Property<DateTime?>("ActualStartDate");

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime?>("PreferredEndDate");

                    b.Property<DateTime?>("PreferredStartDate");

                    b.Property<Guid>("TutorId");

                    b.HasKey("CompanyTutorId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("TutorId");

                    b.ToTable("CompanyTutors");
                });

            modelBuilder.Entity("StandingOut.Data.Models.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Cancelled");

                    b.Property<Guid?>("CompanyId");

                    b.Property<bool>("Completed");

                    b.Property<int>("CourseType");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatorUserId");

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<DateTimeOffset?>("EndDate");

                    b.Property<string>("IPAddress");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsUnder18");

                    b.Property<int>("MaxClassSize");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<decimal>("PricePerPerson")
                        .HasColumnType("decimal(13,2)");

                    b.Property<bool>("Published");

                    b.Property<bool?>("RequiresGoogleAccount");

                    b.Property<DateTimeOffset?>("StartDate");

                    b.Property<bool>("Started");

                    b.Property<Guid>("StudyLevelId");

                    b.Property<Guid?>("SubjectCategoryId");

                    b.Property<Guid>("SubjectId");

                    b.Property<Guid?>("TutorId");

                    b.Property<string>("UniqueNumber");

                    b.HasKey("CourseId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("StudyLevelId");

                    b.HasIndex("SubjectCategoryId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TutorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("StandingOut.Data.Models.CourseInvite", b =>
                {
                    b.Property<Guid>("CourseInviteId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("InviteSent");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid?>("OrderItemId");

                    b.Property<string>("UserId");

                    b.HasKey("CourseInviteId");

                    b.HasIndex("CourseId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseInvites");
                });

            modelBuilder.Entity("StandingOut.Data.Models.ErrorLog", b =>
                {
                    b.Property<Guid>("ErrorLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("InnerException")
                        .HasMaxLength(2000);

                    b.Property<string>("InnerStackTrace");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LogDate");

                    b.Property<string>("Message")
                        .HasMaxLength(2000);

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Path")
                        .HasMaxLength(2000);

                    b.Property<string>("StackTrace");

                    b.HasKey("ErrorLogId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("StandingOut.Data.Models.Feature", b =>
                {
                    b.Property<Guid>("FeatureId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("FeatureArea")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("FeatureId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("StandingOut.Data.Models.GoogleFilePermission", b =>
                {
                    b.Property<Guid>("GoogleFilePermissionId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("FileId");

                    b.Property<string>("FolderName");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsReadable");

                    b.Property<bool>("IsWriteable");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("SessionAttendeeId");

                    b.Property<string>("UserId");

                    b.HasKey("GoogleFilePermissionId");

                    b.HasIndex("SessionAttendeeId");

                    b.ToTable("GoogleFilePermissions");
                });

            modelBuilder.Entity("StandingOut.Data.Models.Hub", b =>
                {
                    b.Property<Guid>("HubId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("SubDomain")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("HubId");

                    b.ToTable("Hub");
                });

            modelBuilder.Entity("StandingOut.Data.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("AmountCharged")
                        .HasColumnType("decimal(13,4)");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Currency")
                        .HasMaxLength(3);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OrderPaymentStatus");

                    b.Property<string>("OrderProcessingNote")
                        .HasMaxLength(2000);

                    b.Property<int>("OrderStatus");

                    b.Property<string>("PayerUserId")
                        .IsRequired();

                    b.Property<Guid?>("PaymentProviderFieldSetId");

                    b.Property<Guid?>("PromoCodeId");

                    b.HasKey("OrderId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PayerUserId");

                    b.HasIndex("PaymentProviderFieldSetId");

                    b.HasIndex("PromoCodeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("StandingOut.Data.Models.OrderItem", b =>
                {
                    b.Property<Guid>("OrderItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("OrderId");

                    b.HasKey("OrderItemId");

                    b.HasIndex("CourseId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("StandingOut.Data.Models.OrderRefund", b =>
                {
                    b.Property<Guid>("OrderRefundId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(13,4)");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<decimal?>("Deduction")
                        .HasColumnType("decimal(13,4)");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRefundUserInitiated");

                    b.Property<bool>("IsSystemInitiated");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("OrderId");

                    b.Property<Guid?>("PaymentProviderFieldSetId");

                    b.Property<string>("RefundProcessingNote")
                        .HasMaxLength(2000);

                    b.Property<int>("RefundProcessingStatus");

                    b.HasKey("OrderRefundId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentProviderFieldSetId");

                    b.ToTable("OrderRefunds");
                });

            modelBuilder.Entity("StandingOut.Data.Models.PaymentProviderFieldSet", b =>
                {
                    b.Property<Guid>("PaymentProviderFieldSetId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreditLinkBack");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PaymentMethodId");

                    b.Property<int>("PaymentProvider");

                    b.Property<int>("PaymentProviderFieldSetType");

                    b.Property<string>("ReceiptId");

                    b.Property<string>("UserRefundId");

                    b.Property<string>("VendorCreditId");

                    b.Property<string>("VendorPayoutId");

                    b.HasKey("PaymentProviderFieldSetId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("PaymentProviderFields");
                });

            modelBuilder.Entity("StandingOut.Data.Models.PromoCode", b =>
                {
                    b.Property<Guid>("PromoCodeId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("AmountOff");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("MaxUses");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<decimal?>("PercentOff");

                    b.Property<int>("Type");

                    b.HasKey("PromoCodeId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SafeguardReport", b =>
                {
                    b.Property<Guid>("SafeguardReportId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LogDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000);

                    b.Property<int>("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("UserId");

                    b.HasKey("SafeguardReportId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("SafeguardReports");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionAttendee", b =>
                {
                    b.Property<Guid>("SessionAttendeeId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllWhiteboardActive");

                    b.Property<decimal>("AmountCharged")
                        .HasColumnType("decimal(13,4)");

                    b.Property<bool>("Attended");

                    b.Property<Guid?>("AttendeeRefundId");

                    b.Property<bool>("AudioEnabled");

                    b.Property<bool>("CallIndividualsEnabled");

                    b.Property<bool>("ChatActive");

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("GroupAudioEnabled");

                    b.Property<bool>("GroupRoomJoinEnabled");

                    b.Property<bool>("GroupScreenShareEnabled");

                    b.Property<bool>("GroupVideoEnabled");

                    b.Property<bool>("GroupWhiteboardActive");

                    b.Property<bool>("HelpRequested");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("JoinDate");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid?>("OrderId");

                    b.Property<Guid?>("OrderItemId");

                    b.Property<Guid?>("PromoCodeId");

                    b.Property<int>("ReadMessagesAll");

                    b.Property<int>("ReadMessagesGroup");

                    b.Property<bool>("Refunded");

                    b.Property<bool>("Removed");

                    b.Property<string>("RemovedBy");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<bool>("RoomJoinEnabled");

                    b.Property<bool>("ScreenShareEnabled");

                    b.Property<string>("SessionAttendeeDirectoryId")
                        .HasMaxLength(100);

                    b.Property<string>("SessionAttendeeDirectoryName")
                        .HasMaxLength(500);

                    b.Property<Guid?>("SessionGroupId");

                    b.Property<decimal?>("StandingOutActualCut")
                        .HasColumnType("decimal(13,4)");

                    b.Property<decimal?>("StandingOutPercentageCut")
                        .HasColumnType("decimal(13,4)");

                    b.Property<string>("UserId");

                    b.Property<decimal?>("VendorAmount");

                    b.Property<Guid?>("VendorEarningId");

                    b.Property<bool>("VideoEnabled");

                    b.HasKey("SessionAttendeeId");

                    b.HasIndex("AttendeeRefundId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("SessionGroupId");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorEarningId");

                    b.ToTable("SessionAttendees");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionGroup", b =>
                {
                    b.Property<Guid>("SessionGroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ChatActive");

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("ReadMessagesTutor");

                    b.HasKey("SessionGroupId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("SessionGroups");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionInvite", b =>
                {
                    b.Property<Guid>("SessionInviteId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("InviteSent");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("UserId");

                    b.HasKey("SessionInviteId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("SessionInvites");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionMedia", b =>
                {
                    b.Property<Guid>("SessionMediaId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("Type");

                    b.HasKey("SessionMediaId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("SessionMedias");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionMessage", b =>
                {
                    b.Property<Guid>("SessionMessageId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("FromUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LogDate");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid?>("SessionOneToOneChatInstanceId");

                    b.Property<Guid?>("ToGroupId");

                    b.Property<string>("ToUserId");

                    b.HasKey("SessionMessageId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SessionOneToOneChatInstanceId");

                    b.HasIndex("ToGroupId");

                    b.HasIndex("ToUserId");

                    b.ToTable("SessionMessages");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionOneToOneChatInstance", b =>
                {
                    b.Property<Guid>("SessionOneToOneChatInstanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("SessionOneToOneChatInstanceId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("SessionOneToOneChatInstances");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionOneToOneChatInstanceUser", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<Guid>("SessionOneToOneChatInstanceId");

                    b.Property<int>("ReadMessages");

                    b.HasKey("UserId", "SessionOneToOneChatInstanceId");

                    b.HasIndex("SessionOneToOneChatInstanceId");

                    b.ToTable("SessionOneToOneChatInstanceUsers");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionWhiteBoard", b =>
                {
                    b.Property<Guid>("SessionWhiteBoardId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInactive");

                    b.Property<bool>("Locked");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.Property<Guid?>("SessionGroupId");

                    b.Property<int>("SizeX");

                    b.Property<int>("SizeY");

                    b.Property<string>("UserId");

                    b.HasKey("SessionWhiteBoardId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("SessionGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("SessionWhiteBoards");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionWhiteBoardHistory", b =>
                {
                    b.Property<Guid>("SessionWhiteBoardHistoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("HistoryType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("JsonData");

                    b.Property<DateTime>("LogDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool>("ReDone");

                    b.Property<Guid?>("ReDoneId");

                    b.Property<Guid>("SessionWhiteBoardId");

                    b.Property<bool>("UnDone");

                    b.Property<DateTime?>("UnDoneDate");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("SessionWhiteBoardHistoryId");

                    b.HasIndex("ReDoneId");

                    b.HasIndex("SessionWhiteBoardId");

                    b.HasIndex("UserId");

                    b.ToTable("SessionWhiteBoardHistory");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionWhiteBoardSave", b =>
                {
                    b.Property<Guid>("SessionWhiteBoardSaveId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("FileLocation")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("SizeX");

                    b.Property<int>("SizeY");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("SessionWhiteBoardSaveId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("SessionWhiteBoardSave");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionWhiteBoardShare", b =>
                {
                    b.Property<Guid>("SessionWhiteBoardShareId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClassSessionId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("SessionWhiteBoardId");

                    b.Property<string>("UserId");

                    b.Property<bool>("WritePermissions");

                    b.HasKey("SessionWhiteBoardShareId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("SessionWhiteBoardId");

                    b.HasIndex("UserId");

                    b.ToTable("SessionWhiteBoardShare");
                });

            modelBuilder.Entity("StandingOut.Data.Models.Setting", b =>
                {
                    b.Property<Guid>("SettingId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AcuitySchedulingSecret")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("AcuitySchedulingUserId")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("AzureBlobConnectionString")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<decimal>("BaseClassSessionCommision");

                    b.Property<string>("ContactUsEmail")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("GoogleAppName")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("GoogleClientId")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("GoogleClientSecret")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("MinimumDateForClassSession");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("SafeguardReportAlertEmail")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("SendGridApi")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("SendGridFromEmail")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("SignUpEmail")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("StripeConnectClientId")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("StripeKey")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("TutorProfileUpdateEmail")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("TutorSignUpEmail")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("TwilioAccountSid")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("TwilioAccountSid2")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("TwilioApiKey")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("TwilioApiKey2")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("TwilioApiSecret")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("TwilioApiSecret2")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("TwilioAuthToken")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("TwilioAuthToken2")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("SettingId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("StandingOut.Data.Models.StripeCountry", b =>
                {
                    b.Property<Guid>("StripeCountryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(250);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<bool>("TopOfList");

                    b.HasKey("StripeCountryId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("StripeCountrys");
                });

            modelBuilder.Entity("StandingOut.Data.Models.StripePlan", b =>
                {
                    b.Property<Guid>("StripePlanId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int?>("FreeDays");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("StripePlanLevel");

                    b.Property<int>("StripePlanType");

                    b.Property<string>("StripeProductId")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<Guid?>("SubscriptionId");

                    b.HasKey("StripePlanId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("StripePlans");
                });

            modelBuilder.Entity("StandingOut.Data.Models.StudyLevel", b =>
                {
                    b.Property<Guid>("StudyLevelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("Order");

                    b.Property<string>("Url")
                        .HasMaxLength(300);

                    b.HasKey("StudyLevelId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("StudyLevels");
                });

            modelBuilder.Entity("StandingOut.Data.Models.Subject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Url")
                        .HasMaxLength(300);

                    b.HasKey("SubjectId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SubjectCategory", b =>
                {
                    b.Property<Guid>("SubjectCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<Guid>("SubjectId");

                    b.Property<string>("Url")
                        .HasMaxLength(300);

                    b.HasKey("SubjectCategoryId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectCategories");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SubjectStudyLevelSetup", b =>
                {
                    b.Property<Guid>("SubjectStudyLevelSetupId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<decimal?>("GroupPricePerPerson")
                        .HasColumnType("decimal(13,4)");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<decimal>("PricePerPerson")
                        .HasColumnType("decimal(13,4)");

                    b.Property<Guid>("StudyLevelId");

                    b.Property<Guid>("SubjectId");

                    b.Property<Guid?>("TutorId");

                    b.HasKey("SubjectStudyLevelSetupId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("StudyLevelId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TutorId");

                    b.ToTable("SubjectStudyLevelSetups");
                });

            modelBuilder.Entity("StandingOut.Data.Models.Subscription", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("SubscriptionName")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<decimal>("SubscriptionPrice")
                        .HasColumnType("decimal(13,4)");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SubscriptionFeature", b =>
                {
                    b.Property<Guid>("SubscriptionFeatureId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<Guid>("FeatureId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("RuleCriteria")
                        .HasMaxLength(200);

                    b.Property<int?>("RuleMax");

                    b.Property<int?>("RuleMin");

                    b.Property<string>("Setting")
                        .HasMaxLength(2000);

                    b.Property<Guid>("SubscriptionId");

                    b.HasKey("SubscriptionFeatureId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionFeatures");
                });

            modelBuilder.Entity("StandingOut.Data.Models.SystemTool", b =>
                {
                    b.Property<Guid>("SystemToolId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowMultiple");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("ExitWarning");

                    b.Property<string>("FontAwesomeIconClass")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("NgInclude")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("SystemToolId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("SystemTools");
                });

            modelBuilder.Entity("StandingOut.Data.Models.Tutor", b =>
                {
                    b.Property<Guid>("TutorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(250);

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(20);

                    b.Property<string>("BankSortCode")
                        .HasMaxLength(10);

                    b.Property<string>("Biography")
                        .HasMaxLength(2000);

                    b.Property<int>("CalendarId")
                        .HasMaxLength(500);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("DbsAdminApprovedMessageRead");

                    b.Property<int>("DbsApprovalStatus");

                    b.Property<bool>("DbsApprovedMessageRead");

                    b.Property<string>("DbsCertificateFileLocation")
                        .HasMaxLength(2000);

                    b.Property<string>("DbsCertificateFileName")
                        .HasMaxLength(2000);

                    b.Property<string>("DbsCertificateNumber")
                        .HasMaxLength(250);

                    b.Property<bool>("DbsNotApprovedMessageRead");

                    b.Property<bool>("DbsStatusMessageRead");

                    b.Property<bool>("HasDbsCheck");

                    b.Property<string>("Header")
                        .HasMaxLength(250);

                    b.Property<int>("IDVerificationtStatus");

                    b.Property<bool>("InitialRegistrationComplete");

                    b.Property<int>("InitialRegistrationStep");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastTimeStripeSubscriptionChecked");

                    b.Property<bool>("LinkAccountMessageRead");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("PaymentStatus");

                    b.Property<string>("PostCode")
                        .HasMaxLength(10);

                    b.Property<int>("ProfileApprovalStatus");

                    b.Property<bool>("ProfileAuthorizedMessageRead");

                    b.Property<string>("ProfileHowITeach")
                        .HasMaxLength(2000);

                    b.Property<string>("ProfileImageFileLocation")
                        .HasMaxLength(2000);

                    b.Property<string>("ProfileImageFileName")
                        .HasMaxLength(2000);

                    b.Property<bool>("ProfileMessageRead");

                    b.Property<string>("ProfileTeachingExperiance")
                        .HasMaxLength(2000);

                    b.Property<bool>("ProfileUpgradeMessageRead");

                    b.Property<string>("SignUpVoucher")
                        .HasMaxLength(250);

                    b.Property<string>("StripeConnectAccountId")
                        .HasMaxLength(250);

                    b.Property<string>("StripeConnectBankAccountId")
                        .HasMaxLength(250);

                    b.Property<string>("StripeCustomerId")
                        .HasMaxLength(250);

                    b.Property<Guid?>("StripePlanId");

                    b.Property<string>("StripeSubscriptionId")
                        .HasMaxLength(250);

                    b.Property<string>("SubHeader")
                        .HasMaxLength(2000);

                    b.Property<int?>("TutorCancelAccountReason");

                    b.Property<string>("TutorCancelAccountReasonDescription")
                        .HasMaxLength(1000);

                    b.Property<string>("UrlSlug")
                        .HasMaxLength(500);

                    b.HasKey("TutorId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("StripePlanId");

                    b.ToTable("Tutors");
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorAvailability", b =>
                {
                    b.Property<Guid>("TutorAvailabilityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("DayOfWeek");

                    b.Property<DateTime>("EndTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("NoOfWeek");

                    b.Property<string>("OriginDate");

                    b.Property<string>("RepeatedSlot");

                    b.Property<string>("SlotDescription");

                    b.Property<int>("SlotType");

                    b.Property<DateTimeOffset?>("SpecificDate");

                    b.Property<DateTime>("StartTime");

                    b.Property<Guid>("TutorId");

                    b.HasKey("TutorAvailabilityId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorAvailabilities");
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorCertificate", b =>
                {
                    b.Property<Guid>("TutorCertificateId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CertificateFileLocation")
                        .HasMaxLength(2000);

                    b.Property<string>("CertificateFileName")
                        .HasMaxLength(2000);

                    b.Property<string>("CertificateNumber");

                    b.Property<int>("CertificateType");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("TutorId");

                    b.HasKey("TutorCertificateId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorCertificates");
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorQualification", b =>
                {
                    b.Property<Guid>("TutorQualificationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<Guid>("TutorId");

                    b.HasKey("TutorQualificationId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorQualifications");
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorSubject", b =>
                {
                    b.Property<Guid>("TutorSubjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid?>("SubjectCategoryId");

                    b.Property<Guid>("SubjectId");

                    b.Property<Guid>("TutorId");

                    b.HasKey("TutorSubjectId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SubjectCategoryId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorSubjects");
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorSubjectStudyLevel", b =>
                {
                    b.Property<Guid>("TutorSubjectStudyLevelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("StudyLevelId");

                    b.Property<Guid>("TutorSubjectId");

                    b.HasKey("TutorSubjectStudyLevelId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("StudyLevelId");

                    b.HasIndex("TutorSubjectId");

                    b.ToTable("TutorSubjectStudyLevels");
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorSubscription", b =>
                {
                    b.Property<Guid>("TutorSubscriptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("EndDateTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime?>("StartDateTime");

                    b.Property<Guid>("SubscriptionId");

                    b.Property<Guid>("TutorId");

                    b.HasKey("TutorSubscriptionId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorSubscription");
                });

            modelBuilder.Entity("StandingOut.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(250);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250);

                    b.Property<string>("ForgottenKey")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset?>("ForgottenRequestDate");

                    b.Property<string>("GoogleEmail")
                        .HasMaxLength(250);

                    b.Property<string>("GoogleProfilePicture")
                        .HasMaxLength(1000);

                    b.Property<string>("IPAddress");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsParent");

                    b.Property<bool>("IsSetupComplete");

                    b.Property<string>("LastName")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastPasswordChange");

                    b.Property<string>("LinkAccountKeyOne")
                        .HasMaxLength(250);

                    b.Property<string>("LinkAccountKeyTwo")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset?>("LinkAccountRequestDate");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<bool>("MarketingAccepted");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(250);

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("ParentFirstName")
                        .HasMaxLength(250);

                    b.Property<string>("ParentLastName")
                        .HasMaxLength(250);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("StripeCustomerId");

                    b.Property<string>("TelephoneNumber")
                        .HasMaxLength(250);

                    b.Property<bool>("TermsAndConditionsAccepted");

                    b.Property<string>("Title")
                        .HasMaxLength(250);

                    b.Property<Guid?>("TutorId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("VerificationCode");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TutorId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("StandingOut.Data.Models.VendorEarning", b =>
                {
                    b.Property<Guid>("VendorEarningId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClassSessionId");

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<decimal>("EarningAmount")
                        .HasColumnType("decimal(13,4)");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("OrderId");

                    b.Property<Guid?>("PaymentProviderFieldSetId");

                    b.Property<Guid?>("TutorId");

                    b.Property<Guid?>("VendorPayoutId");

                    b.HasKey("VendorEarningId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentProviderFieldSetId");

                    b.HasIndex("TutorId");

                    b.HasIndex("VendorPayoutId");

                    b.ToTable("VendorEarnings");
                });

            modelBuilder.Entity("StandingOut.Data.Models.VendorPayout", b =>
                {
                    b.Property<Guid>("VendorPayoutId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(13,4)");

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTimeOffset>("PaymentDate");

                    b.Property<Guid?>("PaymentProviderFieldSetId");

                    b.Property<Guid?>("TutorId");

                    b.HasKey("VendorPayoutId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PaymentProviderFieldSetId");

                    b.HasIndex("TutorId");

                    b.ToTable("VendorPayouts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StandingOut.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StandingOut.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StandingOut.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.ClassSession", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Course", "Course")
                        .WithMany("ClassSessions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Hub", "Hub")
                        .WithMany("ClassSessions")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "Owner")
                        .WithMany("ClassSessions")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.StudyLevel", "StudyLevel")
                        .WithMany()
                        .HasForeignKey("StudyLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.SubjectCategory", "SubjectCategory")
                        .WithMany()
                        .HasForeignKey("SubjectCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.ClassSessionVideoRoom", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("VideoRooms")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.Company", b =>
                {
                    b.HasOne("StandingOut.Data.Models.User", "AdminUser")
                        .WithMany()
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.StripePlan", "StripePlan")
                        .WithMany()
                        .HasForeignKey("StripePlanId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.CompanyMember", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Company", "Company")
                        .WithMany("CompanyTeam")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.CompanySubject", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Company", "Company")
                        .WithMany("CompanySubjects")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.SubjectCategory", "SubjectCategory")
                        .WithMany()
                        .HasForeignKey("SubjectCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.CompanySubjectStudyLevel", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Company")
                        .WithMany("CompanySubjectStudyLevels")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.CompanySubject", "CompanySubject")
                        .WithMany("CompanySubjectStudyLevels")
                        .HasForeignKey("CompanySubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.StudyLevel", "StudyLevel")
                        .WithMany()
                        .HasForeignKey("StudyLevelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.CompanySubscription", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Company", "Company")
                        .WithMany("CompanySubscriptions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Subscription", "Subscription")
                        .WithMany("CompanySubscriptions")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.CompanyTutor", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Company", "Company")
                        .WithMany("CompanyTutors")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Tutor", "Tutor")
                        .WithMany("CompanyTutors")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.Course", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Company", "Company")
                        .WithMany("Courses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.StudyLevel", "StudyLevel")
                        .WithMany()
                        .HasForeignKey("StudyLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.SubjectCategory", "SubjectCategory")
                        .WithMany()
                        .HasForeignKey("SubjectCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.CourseInvite", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Course", "Course")
                        .WithMany("CourseInvites")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.OrderItem", "OrderItem")
                        .WithMany("CourseInvites")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.GoogleFilePermission", b =>
                {
                    b.HasOne("StandingOut.Data.Models.SessionAttendee")
                        .WithMany("GoogleFilePermissions")
                        .HasForeignKey("SessionAttendeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.Order", b =>
                {
                    b.HasOne("StandingOut.Data.Models.User", "PayerUser")
                        .WithMany()
                        .HasForeignKey("PayerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.PaymentProviderFieldSet", "PaymentProviderFields")
                        .WithMany()
                        .HasForeignKey("PaymentProviderFieldSetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.PromoCode", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.OrderItem", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Course", "Course")
                        .WithMany("OrderItems")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.OrderRefund", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Order", "Order")
                        .WithMany("OrderRefunds")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.PaymentProviderFieldSet", "PaymentProviderFields")
                        .WithMany()
                        .HasForeignKey("PaymentProviderFieldSetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SafeguardReport", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("SafeguardReports")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany("SafeguardReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionAttendee", b =>
                {
                    b.HasOne("StandingOut.Data.Models.OrderRefund", "AttendeeRefund")
                        .WithMany("RefundedAttendees")
                        .HasForeignKey("AttendeeRefundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("SessionAttendees")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Order", "Order")
                        .WithMany("SessionAttendees")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.OrderItem", "OrderItem")
                        .WithMany("SessionAttendees")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.PromoCode", "PromoCode")
                        .WithMany("SessionAttendees")
                        .HasForeignKey("PromoCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.SessionGroup", "SessionGroup")
                        .WithMany("SessionAttendees")
                        .HasForeignKey("SessionGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany("SessionAttendees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.VendorEarning", "VendorEarning")
                        .WithMany("SessionAttendees")
                        .HasForeignKey("VendorEarningId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionGroup", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("SessionGroups")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionInvite", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany()
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionMedia", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("SessionMedia")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionMessage", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("SessionMessages")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.SessionOneToOneChatInstance", "SessionOneToOneChatInstance")
                        .WithMany("SessionMessages")
                        .HasForeignKey("SessionOneToOneChatInstanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.SessionGroup", "ToGroup")
                        .WithMany()
                        .HasForeignKey("ToGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionOneToOneChatInstance", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany()
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionOneToOneChatInstanceUser", b =>
                {
                    b.HasOne("StandingOut.Data.Models.SessionOneToOneChatInstance", "SessionOneToOneChatInstance")
                        .WithMany("SessionOneToOneChatInstanceUsers")
                        .HasForeignKey("SessionOneToOneChatInstanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany("SessionOneToOneChatInstanceUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionWhiteBoard", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("SessionWhiteBoards")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.SessionGroup", "SessionGroup")
                        .WithMany("SessionWhiteBoards")
                        .HasForeignKey("SessionGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany("SessionWhiteBoards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionWhiteBoardHistory", b =>
                {
                    b.HasOne("StandingOut.Data.Models.SessionWhiteBoardHistory", "ReDoneHistory")
                        .WithMany()
                        .HasForeignKey("ReDoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.SessionWhiteBoard", "SessionWhiteBoard")
                        .WithMany("History")
                        .HasForeignKey("SessionWhiteBoardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionWhiteBoardSave", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("SessionWhiteBoardSaves")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany("SessionWhiteBoardSaves")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SessionWhiteBoardShare", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("SessionWhiteBoardShares")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.SessionWhiteBoard", "SessionWhiteBoard")
                        .WithMany("SessionWhiteBoardShares")
                        .HasForeignKey("SessionWhiteBoardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.User", "User")
                        .WithMany("SessionWhiteBoardShares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.StripePlan", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SubjectCategory", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Subject", "Subject")
                        .WithMany("SubjectCategories")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SubjectStudyLevelSetup", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Company", "Company")
                        .WithMany("SubjectStudyLevelSetups")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.StudyLevel", "StudyLevel")
                        .WithMany()
                        .HasForeignKey("StudyLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Tutor", "Tutor")
                        .WithMany("SubjectStudyLevelSetups")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.SubscriptionFeature", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Feature", "Feature")
                        .WithMany("SubscriptionFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Subscription", "Subscription")
                        .WithMany("SubscriptionFeatures")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.Tutor", b =>
                {
                    b.HasOne("StandingOut.Data.Models.StripePlan", "StripePlan")
                        .WithMany()
                        .HasForeignKey("StripePlanId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorAvailability", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Tutor", "Tutor")
                        .WithMany("TutorAvailabilities")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorCertificate", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Tutor", "Tutor")
                        .WithMany("TutorCertificates")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorQualification", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Tutor", "Tutor")
                        .WithMany("TutorQualifications")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorSubject", b =>
                {
                    b.HasOne("StandingOut.Data.Models.SubjectCategory", "SubjectCategory")
                        .WithMany()
                        .HasForeignKey("SubjectCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Tutor", "Tutor")
                        .WithMany("TutorSubjects")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorSubjectStudyLevel", b =>
                {
                    b.HasOne("StandingOut.Data.Models.StudyLevel", "StudyLevel")
                        .WithMany()
                        .HasForeignKey("StudyLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.TutorSubject", "TutorSubject")
                        .WithMany("TutorSubjectStudyLevels")
                        .HasForeignKey("TutorSubjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.TutorSubscription", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Subscription", "Subscription")
                        .WithMany("TutorSubscriptions")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Tutor", "Tutor")
                        .WithMany("TutorSubscriptions")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.User", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Tutor", "Tutor")
                        .WithMany("Users")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.VendorEarning", b =>
                {
                    b.HasOne("StandingOut.Data.Models.ClassSession", "ClassSession")
                        .WithMany("VendorEarnings")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.PaymentProviderFieldSet", "PaymentProviderFieldSet")
                        .WithMany()
                        .HasForeignKey("PaymentProviderFieldSetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.VendorPayout", "VendorPayout")
                        .WithMany("VendorEarnings")
                        .HasForeignKey("VendorPayoutId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StandingOut.Data.Models.VendorPayout", b =>
                {
                    b.HasOne("StandingOut.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.PaymentProviderFieldSet", "PaymentProviderFieldSet")
                        .WithMany()
                        .HasForeignKey("PaymentProviderFieldSetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StandingOut.Data.Models.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
